
EIDSController5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006168  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  080062f8  080062f8  000162f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006464  08006464  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08006464  08006464  00016464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800646c  0800646c  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800646c  0800646c  0001646c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006470  08006470  00016470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08006474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          000001ac  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00006000  20000240  20000240  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001021c  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000266b  00000000  00000000  000302e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f10  00000000  00000000  00032950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e28  00000000  00000000  00033860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021d4a  00000000  00000000  00034688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010b54  00000000  00000000  000563d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc23f  00000000  00000000  00066f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00133165  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000042b4  00000000  00000000  001331b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080062e0 	.word	0x080062e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	080062e0 	.word	0x080062e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <Flash_Unlock>:
/** Put this in the src folder **/
#include "main.h"
#include "flash.h"

void Flash_Unlock()
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8000578:	f001 fe80 	bl	800227c <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
 800057c:	4b04      	ldr	r3, [pc, #16]	; (8000590 <Flash_Unlock+0x1c>)
 800057e:	22b3      	movs	r2, #179	; 0xb3
 8000580:	60da      	str	r2, [r3, #12]
	HAL_Delay(500);
 8000582:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000586:	f001 fc5d 	bl	8001e44 <HAL_Delay>
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	40023c00 	.word	0x40023c00

08000594 <Flash_Erase>:

void Flash_Erase()
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	FLASH_Erase_Sector(FLASH_SECTOR_4, VOLTAGE_RANGE_3);
 8000598:	2102      	movs	r1, #2
 800059a:	2004      	movs	r0, #4
 800059c:	f001 ffd0 	bl	8002540 <FLASH_Erase_Sector>
	HAL_Delay(500);
 80005a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005a4:	f001 fc4e 	bl	8001e44 <HAL_Delay>
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}

080005ac <Flash_Write>:

void Flash_Write(uint32_t Flash_Address, uint32_t Flash_Data)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Flash_Address, Flash_Data);
 80005b6:	6839      	ldr	r1, [r7, #0]
 80005b8:	2000      	movs	r0, #0
 80005ba:	460a      	mov	r2, r1
 80005bc:	4603      	mov	r3, r0
 80005be:	6879      	ldr	r1, [r7, #4]
 80005c0:	2002      	movs	r0, #2
 80005c2:	f001 fe07 	bl	80021d4 <HAL_FLASH_Program>
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}

080005ce <Flash_Lock>:

void Flash_Lock()
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	af00      	add	r7, sp, #0
	HAL_FLASH_Lock();
 80005d2:	f001 fe75 	bl	80022c0 <HAL_FLASH_Lock>
	HAL_Delay(500);
 80005d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005da:	f001 fc33 	bl	8001e44 <HAL_Delay>
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <Flash_Read>:

uint32_t Flash_Read(uint32_t Flash_Address)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b084      	sub	sp, #16
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
	uint32_t Flash_Data;
	Flash_Data = *(uint32_t*) Flash_Address;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	60fb      	str	r3, [r7, #12]
	HAL_Delay(1);
 80005f0:	2001      	movs	r0, #1
 80005f2:	f001 fc27 	bl	8001e44 <HAL_Delay>
	return Flash_Data;
 80005f6:	68fb      	ldr	r3, [r7, #12]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <startPWM>:
uint16_t dead_value =0;
uint16_t pulse2=0,geriSayim=0;
uint32_t deneme=0;

void startPWM(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start(&htim1,TIM_CHANNEL_2);			//OC2			enable
 8000604:	2104      	movs	r1, #4
 8000606:	4808      	ldr	r0, [pc, #32]	; (8000628 <startPWM+0x28>)
 8000608:	f002 febe 	bl	8003388 <HAL_TIM_OC_Start>
	HAL_TIMEx_OCN_Start(&htim1,TIM_CHANNEL_2);	//OC2N		enable
 800060c:	2104      	movs	r1, #4
 800060e:	4806      	ldr	r0, [pc, #24]	; (8000628 <startPWM+0x28>)
 8000610:	f003 ff44 	bl	800449c <HAL_TIMEx_OCN_Start>

	HAL_TIM_OC_Start(&htim1,TIM_CHANNEL_3);			//OC3			enable
 8000614:	2108      	movs	r1, #8
 8000616:	4804      	ldr	r0, [pc, #16]	; (8000628 <startPWM+0x28>)
 8000618:	f002 feb6 	bl	8003388 <HAL_TIM_OC_Start>
	HAL_TIMEx_OCN_Start(&htim1,TIM_CHANNEL_3);	//OC3N		enable
 800061c:	2108      	movs	r1, #8
 800061e:	4802      	ldr	r0, [pc, #8]	; (8000628 <startPWM+0x28>)
 8000620:	f003 ff3c 	bl	800449c <HAL_TIMEx_OCN_Start>
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	200000b4 	.word	0x200000b4

0800062c <stopPWM>:

void stopPWM(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Stop(&htim1,TIM_CHANNEL_2);		//stop pwm output	or user function
 8000630:	2104      	movs	r1, #4
 8000632:	4808      	ldr	r0, [pc, #32]	; (8000654 <stopPWM+0x28>)
 8000634:	f002 ff70 	bl	8003518 <HAL_TIM_OC_Stop>
	HAL_TIMEx_OCN_Stop(&htim1,TIM_CHANNEL_2);
 8000638:	2104      	movs	r1, #4
 800063a:	4806      	ldr	r0, [pc, #24]	; (8000654 <stopPWM+0x28>)
 800063c:	f003 ffe8 	bl	8004610 <HAL_TIMEx_OCN_Stop>

	HAL_TIM_OC_Stop(&htim1,TIM_CHANNEL_3);
 8000640:	2108      	movs	r1, #8
 8000642:	4804      	ldr	r0, [pc, #16]	; (8000654 <stopPWM+0x28>)
 8000644:	f002 ff68 	bl	8003518 <HAL_TIM_OC_Stop>
	HAL_TIMEx_OCN_Stop(&htim1,TIM_CHANNEL_3);
 8000648:	2108      	movs	r1, #8
 800064a:	4802      	ldr	r0, [pc, #8]	; (8000654 <stopPWM+0x28>)
 800064c:	f003 ffe0 	bl	8004610 <HAL_TIMEx_OCN_Stop>
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	200000b4 	.word	0x200000b4

08000658 <pulsePWM>:

void pulsePWM(uint16_t pulse)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	80fb      	strh	r3, [r7, #6]

	HAL_Delay(500);
 8000662:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000666:	f001 fbed 	bl	8001e44 <HAL_Delay>

	if(geriSayim==0)
 800066a:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <pulsePWM+0x80>)
 800066c:	881b      	ldrh	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d10d      	bne.n	800068e <pulsePWM+0x36>
	{
	pulse2++;
 8000672:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <pulsePWM+0x84>)
 8000674:	881b      	ldrh	r3, [r3, #0]
 8000676:	3301      	adds	r3, #1
 8000678:	b29a      	uxth	r2, r3
 800067a:	4b18      	ldr	r3, [pc, #96]	; (80006dc <pulsePWM+0x84>)
 800067c:	801a      	strh	r2, [r3, #0]
	if(pulse2>580)
 800067e:	4b17      	ldr	r3, [pc, #92]	; (80006dc <pulsePWM+0x84>)
 8000680:	881b      	ldrh	r3, [r3, #0]
 8000682:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 8000686:	d902      	bls.n	800068e <pulsePWM+0x36>
		{
		geriSayim=1;
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <pulsePWM+0x80>)
 800068a:	2201      	movs	r2, #1
 800068c:	801a      	strh	r2, [r3, #0]
		}
	}

	if(geriSayim==1)
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <pulsePWM+0x80>)
 8000690:	881b      	ldrh	r3, [r3, #0]
 8000692:	2b01      	cmp	r3, #1
 8000694:	d10c      	bne.n	80006b0 <pulsePWM+0x58>
	{
		pulse2-=1;//600 oluyor 700de faz takla atıyor.}
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <pulsePWM+0x84>)
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	3b01      	subs	r3, #1
 800069c:	b29a      	uxth	r2, r3
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <pulsePWM+0x84>)
 80006a0:	801a      	strh	r2, [r3, #0]
		if(pulse2<2){geriSayim=0;}
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <pulsePWM+0x84>)
 80006a4:	881b      	ldrh	r3, [r3, #0]
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d802      	bhi.n	80006b0 <pulsePWM+0x58>
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <pulsePWM+0x80>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	801a      	strh	r2, [r3, #0]
	//TIM4->PSC=prescalerValue;
	//__HAL_TIM_SET_PRESCALER(&htim2,prescalerValue);
	//__HAL_TIM_SET_PRESCALER(&htim3,prescalerValue);
	//__HAL_TIM_SET_PRESCALER(&htim4,prescalerValue);

 if(prescalerValueOld!=prescalerValue)
 80006b0:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <pulsePWM+0x88>)
 80006b2:	881a      	ldrh	r2, [r3, #0]
 80006b4:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <pulsePWM+0x8c>)
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d003      	beq.n	80006c4 <pulsePWM+0x6c>
 {


	  prescalerValueOld=prescalerValue;
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <pulsePWM+0x8c>)
 80006be:	881a      	ldrh	r2, [r3, #0]
 80006c0:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <pulsePWM+0x88>)
 80006c2:	801a      	strh	r2, [r3, #0]
	//HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 }
	 //map(x, in_min, in_max, out_min, out_max)


	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse2);//pulse fazın kaydırılgı yer.
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <pulsePWM+0x84>)
 80006c6:	881a      	ldrh	r2, [r3, #0]
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <pulsePWM+0x90>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000202 	.word	0x20000202
 80006dc:	20000200 	.word	0x20000200
 80006e0:	20000016 	.word	0x20000016
 80006e4:	20000014 	.word	0x20000014
 80006e8:	200000b4 	.word	0x200000b4

080006ec <deadTimePWM>:

void deadTimePWM(uint16_t dtime)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	80fb      	strh	r3, [r7, #6]
	/* Set TIMx_BDTR	->	DTG data	*/
	TIM1->BDTR &= 0xFF00;							//clear	DTG data
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <deadTimePWM+0x30>)
 80006f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006fa:	4a08      	ldr	r2, [pc, #32]	; (800071c <deadTimePWM+0x30>)
 80006fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000700:	6453      	str	r3, [r2, #68]	; 0x44
	TIM1->BDTR |= (dtime & 0x00FF);	//dtime       	//set	DTG data
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <deadTimePWM+0x30>)
 8000704:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000706:	88fb      	ldrh	r3, [r7, #6]
 8000708:	b2db      	uxtb	r3, r3
 800070a:	4904      	ldr	r1, [pc, #16]	; (800071c <deadTimePWM+0x30>)
 800070c:	4313      	orrs	r3, r2
 800070e:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	40010000 	.word	0x40010000

08000720 <map>:
uint16_t pwm_value=0,step=1;
uint16_t arrValue=0;
uint16_t preScalar=0,prePulse=0;
long  freqValue=8000000;
long map(long x,long in_min,long in_max,long out_min,long out_max)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
 800072c:	603b      	str	r3, [r7, #0]
return (x-in_min)*(out_max-out_min)/(in_max-in_min)+out_min;
 800072e:	68fa      	ldr	r2, [r7, #12]
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	1ad3      	subs	r3, r2, r3
 8000734:	69b9      	ldr	r1, [r7, #24]
 8000736:	683a      	ldr	r2, [r7, #0]
 8000738:	1a8a      	subs	r2, r1, r2
 800073a:	fb03 f202 	mul.w	r2, r3, r2
 800073e:	6879      	ldr	r1, [r7, #4]
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	1acb      	subs	r3, r1, r3
 8000744:	fb92 f2f3 	sdiv	r2, r2, r3
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	4413      	add	r3, r2
//map(value,fromLow,fromHigh,toLow,toHigh);//yapıyı burda actım.
}
 800074c:	4618      	mov	r0, r3
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <Constrain>:
uint32_t Constrain(uint32_t au32_IN, uint32_t au32_MIN, uint32_t au32_MAX)
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	607a      	str	r2, [r7, #4]
	if(au32_IN < au32_MIN)
 8000764:	68fa      	ldr	r2, [r7, #12]
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	429a      	cmp	r2, r3
 800076a:	d201      	bcs.n	8000770 <Constrain+0x18>
	{
		return au32_MIN;
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	e006      	b.n	800077e <Constrain+0x26>
	}
	else if (au32_IN > au32_MAX)
 8000770:	68fa      	ldr	r2, [r7, #12]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	429a      	cmp	r2, r3
 8000776:	d901      	bls.n	800077c <Constrain+0x24>
	{
		return au32_MAX;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	e000      	b.n	800077e <Constrain+0x26>
	}
	else
	{
		return au32_IN;
 800077c:	68fb      	ldr	r3, [r7, #12]
	}
}
 800077e:	4618      	mov	r0, r3
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
	...

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000790:	f001 fae6 	bl	8001d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000794:	f000 f870 	bl	8000878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000798:	f000 fa38 	bl	8000c0c <MX_GPIO_Init>
  MX_TIM1_Init();
 800079c:	f000 f8d6 	bl	800094c <MX_TIM1_Init>
  MX_TIM4_Init();
 80007a0:	f000 f992 	bl	8000ac8 <MX_TIM4_Init>
  MX_USART6_UART_Init();
 80007a4:	f000 fa08 	bl	8000bb8 <MX_USART6_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80007a8:	f000 f8c4 	bl	8000934 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_ENABLE(&htim1);										//TIM1		enable
 80007ac:	4b2c      	ldr	r3, [pc, #176]	; (8000860 <main+0xd4>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	4b2b      	ldr	r3, [pc, #172]	; (8000860 <main+0xd4>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f042 0201 	orr.w	r2, r2, #1
 80007ba:	601a      	str	r2, [r3, #0]
  	startPWM();
 80007bc:	f7ff ff20 	bl	8000600 <startPWM>
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_BREAK);	//break interrupt enable
 80007c0:	4b27      	ldr	r3, [pc, #156]	; (8000860 <main+0xd4>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	68da      	ldr	r2, [r3, #12]
 80007c6:	4b26      	ldr	r3, [pc, #152]	; (8000860 <main+0xd4>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80007ce:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80007d0:	2100      	movs	r1, #0
 80007d2:	4824      	ldr	r0, [pc, #144]	; (8000864 <main+0xd8>)
 80007d4:	f002 ff6a 	bl	80036ac <HAL_TIM_PWM_Start>

   Flash_Read_All();
 80007d8:	f000 faa2 	bl	8000d20 <Flash_Read_All>

   if(Record!=1)// boşta değeri 1 den farklı oluyor
 80007dc:	4b22      	ldr	r3, [pc, #136]	; (8000868 <main+0xdc>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d006      	beq.n	80007f2 <main+0x66>
   	{

   	// flash yazma işlemi tamam
	   Flash_Write_All();
 80007e4:	f000 fa72 	bl	8000ccc <Flash_Write_All>
		HAL_Delay(100);
 80007e8:	2064      	movs	r0, #100	; 0x64
 80007ea:	f001 fb2b 	bl	8001e44 <HAL_Delay>
		Flash_Read_All();
 80007ee:	f000 fa97 	bl	8000d20 <Flash_Read_All>
   	}


   HAL_Delay(100);
 80007f2:	2064      	movs	r0, #100	; 0x64
 80007f4:	f001 fb26 	bl	8001e44 <HAL_Delay>
	CurrentPage = INIT_PAGE;					  
 80007f8:	4b1c      	ldr	r3, [pc, #112]	; (800086c <main+0xe0>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]
  	Nextion_Page(INIT_PAGE);
 80007fe:	2000      	movs	r0, #0
 8000800:	f001 f872 	bl	80018e8 <Nextion_Page>
  	HAL_Delay(2000);
 8000804:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000808:	f001 fb1c 	bl	8001e44 <HAL_Delay>
  	//BAsLANGIÇ SAYFASINA YÖNLENDİR
	HAL_Delay(100);
 800080c:	2064      	movs	r0, #100	; 0x64
 800080e:	f001 fb19 	bl	8001e44 <HAL_Delay>
  	CurrentPage = MAIN_PAGE;
 8000812:	4b16      	ldr	r3, [pc, #88]	; (800086c <main+0xe0>)
 8000814:	2213      	movs	r2, #19
 8000816:	701a      	strb	r2, [r3, #0]
  

	HAL_UART_Receive_IT (&huart6, (uint8_t *)reading_buffer, 1);
 8000818:	2201      	movs	r2, #1
 800081a:	4915      	ldr	r1, [pc, #84]	; (8000870 <main+0xe4>)
 800081c:	4815      	ldr	r0, [pc, #84]	; (8000874 <main+0xe8>)
 800081e:	f004 f931 	bl	8004a84 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    if (CurrentPage == MAIN_PAGE) {
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <main+0xe0>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b13      	cmp	r3, #19
 8000828:	d105      	bne.n	8000836 <main+0xaa>
			Nextion_Page(MAIN_PAGE);
 800082a:	2013      	movs	r0, #19
 800082c:	f001 f85c 	bl	80018e8 <Nextion_Page>
			FN_MAIN_PAGE();//5
 8000830:	f000 fab4 	bl	8000d9c <FN_MAIN_PAGE>
 8000834:	e7f5      	b.n	8000822 <main+0x96>
		} else if (CurrentPage == TORQUE_PAGE) {
 8000836:	4b0d      	ldr	r3, [pc, #52]	; (800086c <main+0xe0>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b14      	cmp	r3, #20
 800083c:	d105      	bne.n	800084a <main+0xbe>
			Nextion_Page(TORQUE_PAGE);
 800083e:	2014      	movs	r0, #20
 8000840:	f001 f852 	bl	80018e8 <Nextion_Page>
			FN_TORQUE_PAGE();//5
 8000844:	f000 fb68 	bl	8000f18 <FN_TORQUE_PAGE>
 8000848:	e7eb      	b.n	8000822 <main+0x96>
		} else if (CurrentPage == RPM_PAGE) {
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <main+0xe0>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b15      	cmp	r3, #21
 8000850:	d1e7      	bne.n	8000822 <main+0x96>
			Nextion_Page(RPM_PAGE);
 8000852:	2015      	movs	r0, #21
 8000854:	f001 f848 	bl	80018e8 <Nextion_Page>
			FN_RPM_PAGE();//5
 8000858:	f000 fce4 	bl	8001224 <FN_RPM_PAGE>
	    if (CurrentPage == MAIN_PAGE) {
 800085c:	e7e1      	b.n	8000822 <main+0x96>
 800085e:	bf00      	nop
 8000860:	200000b4 	.word	0x200000b4
 8000864:	200000fc 	.word	0x200000fc
 8000868:	20000190 	.word	0x20000190
 800086c:	20000198 	.word	0x20000198
 8000870:	200001d0 	.word	0x200001d0
 8000874:	20000144 	.word	0x20000144

08000878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b094      	sub	sp, #80	; 0x50
 800087c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	f107 0320 	add.w	r3, r7, #32
 8000882:	2230      	movs	r2, #48	; 0x30
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f005 f8b4 	bl	80059f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800089c:	2300      	movs	r3, #0
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	4b22      	ldr	r3, [pc, #136]	; (800092c <SystemClock_Config+0xb4>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a4:	4a21      	ldr	r2, [pc, #132]	; (800092c <SystemClock_Config+0xb4>)
 80008a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008aa:	6413      	str	r3, [r2, #64]	; 0x40
 80008ac:	4b1f      	ldr	r3, [pc, #124]	; (800092c <SystemClock_Config+0xb4>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b8:	2300      	movs	r3, #0
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <SystemClock_Config+0xb8>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a1b      	ldr	r2, [pc, #108]	; (8000930 <SystemClock_Config+0xb8>)
 80008c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c6:	6013      	str	r3, [r2, #0]
 80008c8:	4b19      	ldr	r3, [pc, #100]	; (8000930 <SystemClock_Config+0xb8>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d4:	2301      	movs	r3, #1
 80008d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008de:	2300      	movs	r3, #0
 80008e0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e2:	f107 0320 	add.w	r3, r7, #32
 80008e6:	4618      	mov	r0, r3
 80008e8:	f002 f80e 	bl	8002908 <HAL_RCC_OscConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80008f2:	f000 ff63 	bl	80017bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f6:	230f      	movs	r3, #15
 80008f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80008fa:	2301      	movs	r3, #1
 80008fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000902:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000906:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	2100      	movs	r1, #0
 8000914:	4618      	mov	r0, r3
 8000916:	f002 fa6f 	bl	8002df8 <HAL_RCC_ClockConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000920:	f000 ff4c 	bl	80017bc <Error_Handler>
  }
}
 8000924:	bf00      	nop
 8000926:	3750      	adds	r7, #80	; 0x50
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40023800 	.word	0x40023800
 8000930:	40007000 	.word	0x40007000

08000934 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000938:	2200      	movs	r2, #0
 800093a:	2100      	movs	r1, #0
 800093c:	2047      	movs	r0, #71	; 0x47
 800093e:	f001 fb80 	bl	8002042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000942:	2047      	movs	r0, #71	; 0x47
 8000944:	f001 fb99 	bl	800207a <HAL_NVIC_EnableIRQ>
}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}

0800094c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b096      	sub	sp, #88	; 0x58
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000952:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000960:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800096a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]
 800097a:	615a      	str	r2, [r3, #20]
 800097c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2220      	movs	r2, #32
 8000982:	2100      	movs	r1, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f005 f835 	bl	80059f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800098a:	4b4d      	ldr	r3, [pc, #308]	; (8000ac0 <MX_TIM1_Init+0x174>)
 800098c:	4a4d      	ldr	r2, [pc, #308]	; (8000ac4 <MX_TIM1_Init+0x178>)
 800098e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000990:	4b4b      	ldr	r3, [pc, #300]	; (8000ac0 <MX_TIM1_Init+0x174>)
 8000992:	2200      	movs	r2, #0
 8000994:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000996:	4b4a      	ldr	r3, [pc, #296]	; (8000ac0 <MX_TIM1_Init+0x174>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 590;
 800099c:	4b48      	ldr	r3, [pc, #288]	; (8000ac0 <MX_TIM1_Init+0x174>)
 800099e:	f240 224e 	movw	r2, #590	; 0x24e
 80009a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a4:	4b46      	ldr	r3, [pc, #280]	; (8000ac0 <MX_TIM1_Init+0x174>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009aa:	4b45      	ldr	r3, [pc, #276]	; (8000ac0 <MX_TIM1_Init+0x174>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009b0:	4b43      	ldr	r3, [pc, #268]	; (8000ac0 <MX_TIM1_Init+0x174>)
 80009b2:	2280      	movs	r2, #128	; 0x80
 80009b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009b6:	4842      	ldr	r0, [pc, #264]	; (8000ac0 <MX_TIM1_Init+0x174>)
 80009b8:	f002 fc3e 	bl	8003238 <HAL_TIM_Base_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80009c2:	f000 fefb 	bl	80017bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009d0:	4619      	mov	r1, r3
 80009d2:	483b      	ldr	r0, [pc, #236]	; (8000ac0 <MX_TIM1_Init+0x174>)
 80009d4:	f003 f958 	bl	8003c88 <HAL_TIM_ConfigClockSource>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80009de:	f000 feed 	bl	80017bc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80009e2:	4837      	ldr	r0, [pc, #220]	; (8000ac0 <MX_TIM1_Init+0x174>)
 80009e4:	f002 fc77 	bl	80032d6 <HAL_TIM_OC_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80009ee:	f000 fee5 	bl	80017bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f2:	2300      	movs	r3, #0
 80009f4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009fe:	4619      	mov	r1, r3
 8000a00:	482f      	ldr	r0, [pc, #188]	; (8000ac0 <MX_TIM1_Init+0x174>)
 8000a02:	f003 fe63 	bl	80046cc <HAL_TIMEx_MasterConfigSynchronization>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000a0c:	f000 fed6 	bl	80017bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000a10:	2330      	movs	r3, #48	; 0x30
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1;
 8000a14:	2301      	movs	r3, #1
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a24:	2300      	movs	r3, #0
 8000a26:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a30:	2204      	movs	r2, #4
 8000a32:	4619      	mov	r1, r3
 8000a34:	4822      	ldr	r0, [pc, #136]	; (8000ac0 <MX_TIM1_Init+0x174>)
 8000a36:	f003 f809 	bl	8003a4c <HAL_TIM_OC_ConfigChannel>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000a40:	f000 febc 	bl	80017bc <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8000a44:	4b1e      	ldr	r3, [pc, #120]	; (8000ac0 <MX_TIM1_Init+0x174>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	699a      	ldr	r2, [r3, #24]
 8000a4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <MX_TIM1_Init+0x174>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a58:	2208      	movs	r2, #8
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4818      	ldr	r0, [pc, #96]	; (8000ac0 <MX_TIM1_Init+0x174>)
 8000a5e:	f002 fff5 	bl	8003a4c <HAL_TIM_OC_ConfigChannel>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8000a68:	f000 fea8 	bl	80017bc <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_3);
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <MX_TIM1_Init+0x174>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	69da      	ldr	r2, [r3, #28]
 8000a72:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <MX_TIM1_Init+0x174>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f042 0208 	orr.w	r2, r2, #8
 8000a7a:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 5;
 8000a88:	2305      	movs	r3, #5
 8000a8a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000a8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a90:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000a96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a9a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4807      	ldr	r0, [pc, #28]	; (8000ac0 <MX_TIM1_Init+0x174>)
 8000aa2:	f003 fe8f 	bl	80047c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8000aac:	f000 fe86 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ab0:	4803      	ldr	r0, [pc, #12]	; (8000ac0 <MX_TIM1_Init+0x174>)
 8000ab2:	f000 ffcd 	bl	8001a50 <HAL_TIM_MspPostInit>

}
 8000ab6:	bf00      	nop
 8000ab8:	3758      	adds	r7, #88	; 0x58
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	200000b4 	.word	0x200000b4
 8000ac4:	40010000 	.word	0x40010000

08000ac8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08e      	sub	sp, #56	; 0x38
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ace:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000adc:	f107 0320 	add.w	r3, r7, #32
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
 8000af4:	615a      	str	r2, [r3, #20]
 8000af6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000af8:	4b2d      	ldr	r3, [pc, #180]	; (8000bb0 <MX_TIM4_Init+0xe8>)
 8000afa:	4a2e      	ldr	r2, [pc, #184]	; (8000bb4 <MX_TIM4_Init+0xec>)
 8000afc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 127;
 8000afe:	4b2c      	ldr	r3, [pc, #176]	; (8000bb0 <MX_TIM4_Init+0xe8>)
 8000b00:	227f      	movs	r2, #127	; 0x7f
 8000b02:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b04:	4b2a      	ldr	r3, [pc, #168]	; (8000bb0 <MX_TIM4_Init+0xe8>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 62499;
 8000b0a:	4b29      	ldr	r3, [pc, #164]	; (8000bb0 <MX_TIM4_Init+0xe8>)
 8000b0c:	f24f 4223 	movw	r2, #62499	; 0xf423
 8000b10:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b12:	4b27      	ldr	r3, [pc, #156]	; (8000bb0 <MX_TIM4_Init+0xe8>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b18:	4b25      	ldr	r3, [pc, #148]	; (8000bb0 <MX_TIM4_Init+0xe8>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b1e:	4824      	ldr	r0, [pc, #144]	; (8000bb0 <MX_TIM4_Init+0xe8>)
 8000b20:	f002 fb8a 	bl	8003238 <HAL_TIM_Base_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000b2a:	f000 fe47 	bl	80017bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	481d      	ldr	r0, [pc, #116]	; (8000bb0 <MX_TIM4_Init+0xe8>)
 8000b3c:	f003 f8a4 	bl	8003c88 <HAL_TIM_ConfigClockSource>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000b46:	f000 fe39 	bl	80017bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000b4a:	4819      	ldr	r0, [pc, #100]	; (8000bb0 <MX_TIM4_Init+0xe8>)
 8000b4c:	f002 fd54 	bl	80035f8 <HAL_TIM_PWM_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000b56:	f000 fe31 	bl	80017bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b62:	f107 0320 	add.w	r3, r7, #32
 8000b66:	4619      	mov	r1, r3
 8000b68:	4811      	ldr	r0, [pc, #68]	; (8000bb0 <MX_TIM4_Init+0xe8>)
 8000b6a:	f003 fdaf 	bl	80046cc <HAL_TIMEx_MasterConfigSynchronization>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000b74:	f000 fe22 	bl	80017bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b78:	2360      	movs	r3, #96	; 0x60
 8000b7a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 31250;
 8000b7c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8000b80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4807      	ldr	r0, [pc, #28]	; (8000bb0 <MX_TIM4_Init+0xe8>)
 8000b92:	f002 ffb7 	bl	8003b04 <HAL_TIM_PWM_ConfigChannel>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000b9c:	f000 fe0e 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ba0:	4803      	ldr	r0, [pc, #12]	; (8000bb0 <MX_TIM4_Init+0xe8>)
 8000ba2:	f000 ff55 	bl	8001a50 <HAL_TIM_MspPostInit>

}
 8000ba6:	bf00      	nop
 8000ba8:	3738      	adds	r7, #56	; 0x38
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	200000fc 	.word	0x200000fc
 8000bb4:	40000800 	.word	0x40000800

08000bb8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <MX_USART6_UART_Init+0x4c>)
 8000bbe:	4a12      	ldr	r2, [pc, #72]	; (8000c08 <MX_USART6_UART_Init+0x50>)
 8000bc0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <MX_USART6_UART_Init+0x4c>)
 8000bc4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000bc8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <MX_USART6_UART_Init+0x4c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <MX_USART6_UART_Init+0x4c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <MX_USART6_UART_Init+0x4c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000bdc:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <MX_USART6_UART_Init+0x4c>)
 8000bde:	220c      	movs	r2, #12
 8000be0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be2:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <MX_USART6_UART_Init+0x4c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <MX_USART6_UART_Init+0x4c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000bee:	4805      	ldr	r0, [pc, #20]	; (8000c04 <MX_USART6_UART_Init+0x4c>)
 8000bf0:	f003 fe69 	bl	80048c6 <HAL_UART_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000bfa:	f000 fddf 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000144 	.word	0x20000144
 8000c08:	40011400 	.word	0x40011400

08000c0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b087      	sub	sp, #28
 8000c10:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	4b2c      	ldr	r3, [pc, #176]	; (8000cc8 <MX_GPIO_Init+0xbc>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a2b      	ldr	r2, [pc, #172]	; (8000cc8 <MX_GPIO_Init+0xbc>)
 8000c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b29      	ldr	r3, [pc, #164]	; (8000cc8 <MX_GPIO_Init+0xbc>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	4b25      	ldr	r3, [pc, #148]	; (8000cc8 <MX_GPIO_Init+0xbc>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a24      	ldr	r2, [pc, #144]	; (8000cc8 <MX_GPIO_Init+0xbc>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b22      	ldr	r3, [pc, #136]	; (8000cc8 <MX_GPIO_Init+0xbc>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <MX_GPIO_Init+0xbc>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a1d      	ldr	r2, [pc, #116]	; (8000cc8 <MX_GPIO_Init+0xbc>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <MX_GPIO_Init+0xbc>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <MX_GPIO_Init+0xbc>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a16      	ldr	r2, [pc, #88]	; (8000cc8 <MX_GPIO_Init+0xbc>)
 8000c70:	f043 0310 	orr.w	r3, r3, #16
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <MX_GPIO_Init+0xbc>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0310 	and.w	r3, r3, #16
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <MX_GPIO_Init+0xbc>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a0f      	ldr	r2, [pc, #60]	; (8000cc8 <MX_GPIO_Init+0xbc>)
 8000c8c:	f043 0308 	orr.w	r3, r3, #8
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <MX_GPIO_Init+0xbc>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0308 	and.w	r3, r3, #8
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	603b      	str	r3, [r7, #0]
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_GPIO_Init+0xbc>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a08      	ldr	r2, [pc, #32]	; (8000cc8 <MX_GPIO_Init+0xbc>)
 8000ca8:	f043 0304 	orr.w	r3, r3, #4
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <MX_GPIO_Init+0xbc>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0304 	and.w	r3, r3, #4
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]

}
 8000cba:	bf00      	nop
 8000cbc:	371c      	adds	r7, #28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40023800 	.word	0x40023800

08000ccc <Flash_Write_All>:

/* USER CODE BEGIN 4 */

void Flash_Write_All()
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	Flash_Unlock();
 8000cd0:	f7ff fc50 	bl	8000574 <Flash_Unlock>
	Flash_Erase();
 8000cd4:	f7ff fc5e 	bl	8000594 <Flash_Erase>

	Flash_Write(RPM_Unit_address, RPM_Unit);
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <Flash_Write_All+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0c      	ldr	r2, [pc, #48]	; (8000d10 <Flash_Write_All+0x44>)
 8000cde:	6812      	ldr	r2, [r2, #0]
 8000ce0:	4611      	mov	r1, r2
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fc62 	bl	80005ac <Flash_Write>
	Flash_Write(Torque_Unit_address, Torque_Unit);
 8000ce8:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <Flash_Write_All+0x48>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <Flash_Write_All+0x4c>)
 8000cee:	6812      	ldr	r2, [r2, #0]
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fc5a 	bl	80005ac <Flash_Write>
	Flash_Write(Record_address, 1);
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <Flash_Write_All+0x50>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fc54 	bl	80005ac <Flash_Write>


	Flash_Lock();
 8000d04:	f7ff fc63 	bl	80005ce <Flash_Lock>
}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	20000188 	.word	0x20000188
 8000d14:	20000004 	.word	0x20000004
 8000d18:	2000018c 	.word	0x2000018c
 8000d1c:	20000008 	.word	0x20000008

08000d20 <Flash_Read_All>:
void Nextion_Settings_Load()
{
}

void Flash_Read_All()
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	RPM_Unit = Flash_Read(RPM_Unit_address);
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <Flash_Read_All+0x38>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff fc5a 	bl	80005e2 <Flash_Read>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <Flash_Read_All+0x3c>)
 8000d32:	6013      	str	r3, [r2, #0]
	Torque_Unit = Flash_Read(Torque_Unit_address);
 8000d34:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <Flash_Read_All+0x40>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fc52 	bl	80005e2 <Flash_Read>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	4a08      	ldr	r2, [pc, #32]	; (8000d64 <Flash_Read_All+0x44>)
 8000d42:	6013      	str	r3, [r2, #0]
	Record = Flash_Read(Record_address);
 8000d44:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <Flash_Read_All+0x48>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fc4a 	bl	80005e2 <Flash_Read>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	4a06      	ldr	r2, [pc, #24]	; (8000d6c <Flash_Read_All+0x4c>)
 8000d52:	6013      	str	r3, [r2, #0]
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	20000188 	.word	0x20000188
 8000d60:	20000004 	.word	0x20000004
 8000d64:	2000018c 	.word	0x2000018c
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	20000190 	.word	0x20000190

08000d70 <HAL_TIMEx_BreakCallback>:


void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)		//need modify
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <HAL_TIMEx_BreakCallback+0x24>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d104      	bne.n	8000d8c <HAL_TIMEx_BreakCallback+0x1c>
	{
		stopPWM();									//stop pwm output	or user function
 8000d82:	f7ff fc53 	bl	800062c <stopPWM>
		break_falg = 1;
 8000d86:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <HAL_TIMEx_BreakCallback+0x28>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	701a      	strb	r2, [r3, #0]
	}
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40010000 	.word	0x40010000
 8000d98:	200001fc 	.word	0x200001fc

08000d9c <FN_MAIN_PAGE>:


void FN_MAIN_PAGE(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af02      	add	r7, sp, #8
	while (CurrentPage == MAIN_PAGE) {
 8000da2:	e07d      	b.n	8000ea0 <FN_MAIN_PAGE+0x104>
		pulsePWM(pulse_value);	//user function set
 8000da4:	4b43      	ldr	r3, [pc, #268]	; (8000eb4 <FN_MAIN_PAGE+0x118>)
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fc55 	bl	8000658 <pulsePWM>
			//dead_value++;
			deadTimePWM(dead_value);
 8000dae:	4b42      	ldr	r3, [pc, #264]	; (8000eb8 <FN_MAIN_PAGE+0x11c>)
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fc9a 	bl	80006ec <deadTimePWM>

			if(break_falg == 1)			//user function set
 8000db8:	4b40      	ldr	r3, [pc, #256]	; (8000ebc <FN_MAIN_PAGE+0x120>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d104      	bne.n	8000dca <FN_MAIN_PAGE+0x2e>
			{
				break_falg = 0;				//clear falg
 8000dc0:	4b3e      	ldr	r3, [pc, #248]	; (8000ebc <FN_MAIN_PAGE+0x120>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
				startPWM();
 8000dc6:	f7ff fc1b 	bl	8000600 <startPWM>
			}

		   HAL_Delay(1000);
 8000dca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dce:	f001 f839 	bl	8001e44 <HAL_Delay>
		   step++;//hz degerimi belirleyecek olan degişken
 8000dd2:	4b3b      	ldr	r3, [pc, #236]	; (8000ec0 <FN_MAIN_PAGE+0x124>)
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	4b39      	ldr	r3, [pc, #228]	; (8000ec0 <FN_MAIN_PAGE+0x124>)
 8000ddc:	801a      	strh	r2, [r3, #0]
		   step=Constrain(step, 1, 5000);
 8000dde:	4b38      	ldr	r3, [pc, #224]	; (8000ec0 <FN_MAIN_PAGE+0x124>)
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000de6:	2101      	movs	r1, #1
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fcb5 	bl	8000758 <Constrain>
 8000dee:	4603      	mov	r3, r0
 8000df0:	b29a      	uxth	r2, r3
 8000df2:	4b33      	ldr	r3, [pc, #204]	; (8000ec0 <FN_MAIN_PAGE+0x124>)
 8000df4:	801a      	strh	r2, [r3, #0]
		   arrValue=((freqValue/step)/128);
 8000df6:	4b33      	ldr	r3, [pc, #204]	; (8000ec4 <FN_MAIN_PAGE+0x128>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a31      	ldr	r2, [pc, #196]	; (8000ec0 <FN_MAIN_PAGE+0x124>)
 8000dfc:	8812      	ldrh	r2, [r2, #0]
 8000dfe:	fb93 f3f2 	sdiv	r3, r3, r2
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	da00      	bge.n	8000e08 <FN_MAIN_PAGE+0x6c>
 8000e06:	337f      	adds	r3, #127	; 0x7f
 8000e08:	11db      	asrs	r3, r3, #7
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	4b2e      	ldr	r3, [pc, #184]	; (8000ec8 <FN_MAIN_PAGE+0x12c>)
 8000e0e:	801a      	strh	r2, [r3, #0]

		   //arrValue=map(arrValue, 0, 31250, 0, 62499);
		   prePulse=map(arrValue, 0, 62499, 0, 31250);
 8000e10:	4b2d      	ldr	r3, [pc, #180]	; (8000ec8 <FN_MAIN_PAGE+0x12c>)
 8000e12:	881b      	ldrh	r3, [r3, #0]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f647 2312 	movw	r3, #31250	; 0x7a12
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f24f 4223 	movw	r2, #62499	; 0xf423
 8000e22:	2100      	movs	r1, #0
 8000e24:	f7ff fc7c 	bl	8000720 <map>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <FN_MAIN_PAGE+0x130>)
 8000e2e:	801a      	strh	r2, [r3, #0]

		   TIM4->ARR=arrValue;
 8000e30:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <FN_MAIN_PAGE+0x12c>)
 8000e32:	881a      	ldrh	r2, [r3, #0]
 8000e34:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <FN_MAIN_PAGE+0x134>)
 8000e36:	62da      	str	r2, [r3, #44]	; 0x2c
		   TIM4->CCR1=prePulse;
 8000e38:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <FN_MAIN_PAGE+0x130>)
 8000e3a:	881a      	ldrh	r2, [r3, #0]
 8000e3c:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <FN_MAIN_PAGE+0x134>)
 8000e3e:	635a      	str	r2, [r3, #52]	; 0x34

		   Nextion_Set_Value("torque", torque);
 8000e40:	4b24      	ldr	r3, [pc, #144]	; (8000ed4 <FN_MAIN_PAGE+0x138>)
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	4619      	mov	r1, r3
 8000e46:	4824      	ldr	r0, [pc, #144]	; (8000ed8 <FN_MAIN_PAGE+0x13c>)
 8000e48:	f000 fcbe 	bl	80017c8 <Nextion_Set_Value>
		   Nextion_Set_Value("rpm", rpm);
 8000e4c:	4b23      	ldr	r3, [pc, #140]	; (8000edc <FN_MAIN_PAGE+0x140>)
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	4619      	mov	r1, r3
 8000e52:	4823      	ldr	r0, [pc, #140]	; (8000ee0 <FN_MAIN_PAGE+0x144>)
 8000e54:	f000 fcb8 	bl	80017c8 <Nextion_Set_Value>
		   Nextion_Set_Value("tit", tit);
 8000e58:	4b22      	ldr	r3, [pc, #136]	; (8000ee4 <FN_MAIN_PAGE+0x148>)
 8000e5a:	881b      	ldrh	r3, [r3, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4822      	ldr	r0, [pc, #136]	; (8000ee8 <FN_MAIN_PAGE+0x14c>)
 8000e60:	f000 fcb2 	bl	80017c8 <Nextion_Set_Value>
		   Nextion_Set_Value("ff", ff);
 8000e64:	4b21      	ldr	r3, [pc, #132]	; (8000eec <FN_MAIN_PAGE+0x150>)
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4821      	ldr	r0, [pc, #132]	; (8000ef0 <FN_MAIN_PAGE+0x154>)
 8000e6c:	f000 fcac 	bl	80017c8 <Nextion_Set_Value>
		   Nextion_Set_Value("gop", gop);
 8000e70:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <FN_MAIN_PAGE+0x158>)
 8000e72:	881b      	ldrh	r3, [r3, #0]
 8000e74:	4619      	mov	r1, r3
 8000e76:	4820      	ldr	r0, [pc, #128]	; (8000ef8 <FN_MAIN_PAGE+0x15c>)
 8000e78:	f000 fca6 	bl	80017c8 <Nextion_Set_Value>
		   Nextion_Set_Value("eop", eop);
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <FN_MAIN_PAGE+0x160>)
 8000e7e:	881b      	ldrh	r3, [r3, #0]
 8000e80:	4619      	mov	r1, r3
 8000e82:	481f      	ldr	r0, [pc, #124]	; (8000f00 <FN_MAIN_PAGE+0x164>)
 8000e84:	f000 fca0 	bl	80017c8 <Nextion_Set_Value>
		   Nextion_Set_Value("eot", eot);
 8000e88:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <FN_MAIN_PAGE+0x168>)
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	481e      	ldr	r0, [pc, #120]	; (8000f08 <FN_MAIN_PAGE+0x16c>)
 8000e90:	f000 fc9a 	bl	80017c8 <Nextion_Set_Value>
		   Nextion_Set_Value("eoq", eoq);
 8000e94:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <FN_MAIN_PAGE+0x170>)
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	481d      	ldr	r0, [pc, #116]	; (8000f10 <FN_MAIN_PAGE+0x174>)
 8000e9c:	f000 fc94 	bl	80017c8 <Nextion_Set_Value>
	while (CurrentPage == MAIN_PAGE) {
 8000ea0:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <FN_MAIN_PAGE+0x178>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b13      	cmp	r3, #19
 8000ea6:	f43f af7d 	beq.w	8000da4 <FN_MAIN_PAGE+0x8>
	}

}
 8000eaa:	bf00      	nop
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	200001fa 	.word	0x200001fa
 8000eb8:	200001fe 	.word	0x200001fe
 8000ebc:	200001fc 	.word	0x200001fc
 8000ec0:	20000018 	.word	0x20000018
 8000ec4:	2000001c 	.word	0x2000001c
 8000ec8:	20000204 	.word	0x20000204
 8000ecc:	20000206 	.word	0x20000206
 8000ed0:	40000800 	.word	0x40000800
 8000ed4:	200001e4 	.word	0x200001e4
 8000ed8:	080062f8 	.word	0x080062f8
 8000edc:	200001e6 	.word	0x200001e6
 8000ee0:	08006300 	.word	0x08006300
 8000ee4:	200001e8 	.word	0x200001e8
 8000ee8:	08006304 	.word	0x08006304
 8000eec:	200001ea 	.word	0x200001ea
 8000ef0:	08006308 	.word	0x08006308
 8000ef4:	200001ec 	.word	0x200001ec
 8000ef8:	0800630c 	.word	0x0800630c
 8000efc:	200001ee 	.word	0x200001ee
 8000f00:	08006310 	.word	0x08006310
 8000f04:	200001f0 	.word	0x200001f0
 8000f08:	08006314 	.word	0x08006314
 8000f0c:	200001f2 	.word	0x200001f2
 8000f10:	08006318 	.word	0x08006318
 8000f14:	20000198 	.word	0x20000198

08000f18 <FN_TORQUE_PAGE>:
void FN_TORQUE_PAGE(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
	CurrentButton = 0;
 8000f1e:	4bb4      	ldr	r3, [pc, #720]	; (80011f0 <FN_TORQUE_PAGE+0x2d8>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
	if (CurrentPage == TORQUE_PAGE)
 8000f24:	4bb3      	ldr	r3, [pc, #716]	; (80011f4 <FN_TORQUE_PAGE+0x2dc>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b14      	cmp	r3, #20
 8000f2a:	f040 815c 	bne.w	80011e6 <FN_TORQUE_PAGE+0x2ce>
		{
			HAL_Delay(500);
 8000f2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f32:	f000 ff87 	bl	8001e44 <HAL_Delay>

			if(Torque_Unit == 0)
 8000f36:	4bb0      	ldr	r3, [pc, #704]	; (80011f8 <FN_TORQUE_PAGE+0x2e0>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d118      	bne.n	8000f70 <FN_TORQUE_PAGE+0x58>
			 {
				Nextion_Set_Value("c0", 1);
 8000f3e:	2101      	movs	r1, #1
 8000f40:	48ae      	ldr	r0, [pc, #696]	; (80011fc <FN_TORQUE_PAGE+0x2e4>)
 8000f42:	f000 fc41 	bl	80017c8 <Nextion_Set_Value>
				Nextion_Set_Value("c1", 0);
 8000f46:	2100      	movs	r1, #0
 8000f48:	48ad      	ldr	r0, [pc, #692]	; (8001200 <FN_TORQUE_PAGE+0x2e8>)
 8000f4a:	f000 fc3d 	bl	80017c8 <Nextion_Set_Value>
				Nextion_Set_Value("c2", 0);
 8000f4e:	2100      	movs	r1, #0
 8000f50:	48ac      	ldr	r0, [pc, #688]	; (8001204 <FN_TORQUE_PAGE+0x2ec>)
 8000f52:	f000 fc39 	bl	80017c8 <Nextion_Set_Value>
				Nextion_Set_Value("c3", 0);
 8000f56:	2100      	movs	r1, #0
 8000f58:	48ab      	ldr	r0, [pc, #684]	; (8001208 <FN_TORQUE_PAGE+0x2f0>)
 8000f5a:	f000 fc35 	bl	80017c8 <Nextion_Set_Value>
				Nextion_Set_Value("c4", 0);
 8000f5e:	2100      	movs	r1, #0
 8000f60:	48aa      	ldr	r0, [pc, #680]	; (800120c <FN_TORQUE_PAGE+0x2f4>)
 8000f62:	f000 fc31 	bl	80017c8 <Nextion_Set_Value>
				Nextion_Set_Value("c5", 0);
 8000f66:	2100      	movs	r1, #0
 8000f68:	48a9      	ldr	r0, [pc, #676]	; (8001210 <FN_TORQUE_PAGE+0x2f8>)
 8000f6a:	f000 fc2d 	bl	80017c8 <Nextion_Set_Value>
 8000f6e:	e038      	b.n	8000fe2 <FN_TORQUE_PAGE+0xca>

			 }else if(Torque_Unit == 1)
 8000f70:	4ba1      	ldr	r3, [pc, #644]	; (80011f8 <FN_TORQUE_PAGE+0x2e0>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d118      	bne.n	8000faa <FN_TORQUE_PAGE+0x92>
			 {
				Nextion_Set_Value("c0", 0);
 8000f78:	2100      	movs	r1, #0
 8000f7a:	48a0      	ldr	r0, [pc, #640]	; (80011fc <FN_TORQUE_PAGE+0x2e4>)
 8000f7c:	f000 fc24 	bl	80017c8 <Nextion_Set_Value>
				Nextion_Set_Value("c1", 1);
 8000f80:	2101      	movs	r1, #1
 8000f82:	489f      	ldr	r0, [pc, #636]	; (8001200 <FN_TORQUE_PAGE+0x2e8>)
 8000f84:	f000 fc20 	bl	80017c8 <Nextion_Set_Value>
				Nextion_Set_Value("c2", 0);
 8000f88:	2100      	movs	r1, #0
 8000f8a:	489e      	ldr	r0, [pc, #632]	; (8001204 <FN_TORQUE_PAGE+0x2ec>)
 8000f8c:	f000 fc1c 	bl	80017c8 <Nextion_Set_Value>
				Nextion_Set_Value("c3", 0);
 8000f90:	2100      	movs	r1, #0
 8000f92:	489d      	ldr	r0, [pc, #628]	; (8001208 <FN_TORQUE_PAGE+0x2f0>)
 8000f94:	f000 fc18 	bl	80017c8 <Nextion_Set_Value>
				Nextion_Set_Value("c4", 0);
 8000f98:	2100      	movs	r1, #0
 8000f9a:	489c      	ldr	r0, [pc, #624]	; (800120c <FN_TORQUE_PAGE+0x2f4>)
 8000f9c:	f000 fc14 	bl	80017c8 <Nextion_Set_Value>
				Nextion_Set_Value("c5", 0);
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	489b      	ldr	r0, [pc, #620]	; (8001210 <FN_TORQUE_PAGE+0x2f8>)
 8000fa4:	f000 fc10 	bl	80017c8 <Nextion_Set_Value>
 8000fa8:	e01b      	b.n	8000fe2 <FN_TORQUE_PAGE+0xca>

			 }else if(Torque_Unit == 2)
 8000faa:	4b93      	ldr	r3, [pc, #588]	; (80011f8 <FN_TORQUE_PAGE+0x2e0>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d117      	bne.n	8000fe2 <FN_TORQUE_PAGE+0xca>
			 {
				Nextion_Set_Value("c0", 0);
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4891      	ldr	r0, [pc, #580]	; (80011fc <FN_TORQUE_PAGE+0x2e4>)
 8000fb6:	f000 fc07 	bl	80017c8 <Nextion_Set_Value>
				Nextion_Set_Value("c1", 0);
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4890      	ldr	r0, [pc, #576]	; (8001200 <FN_TORQUE_PAGE+0x2e8>)
 8000fbe:	f000 fc03 	bl	80017c8 <Nextion_Set_Value>
				Nextion_Set_Value("c2", 1);
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	488f      	ldr	r0, [pc, #572]	; (8001204 <FN_TORQUE_PAGE+0x2ec>)
 8000fc6:	f000 fbff 	bl	80017c8 <Nextion_Set_Value>
				Nextion_Set_Value("c3", 0);
 8000fca:	2100      	movs	r1, #0
 8000fcc:	488e      	ldr	r0, [pc, #568]	; (8001208 <FN_TORQUE_PAGE+0x2f0>)
 8000fce:	f000 fbfb 	bl	80017c8 <Nextion_Set_Value>
				Nextion_Set_Value("c4", 0);
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	488d      	ldr	r0, [pc, #564]	; (800120c <FN_TORQUE_PAGE+0x2f4>)
 8000fd6:	f000 fbf7 	bl	80017c8 <Nextion_Set_Value>
				Nextion_Set_Value("c5", 0);
 8000fda:	2100      	movs	r1, #0
 8000fdc:	488c      	ldr	r0, [pc, #560]	; (8001210 <FN_TORQUE_PAGE+0x2f8>)
 8000fde:	f000 fbf3 	bl	80017c8 <Nextion_Set_Value>
			 }

			  if(Torque_Unit == 3)
 8000fe2:	4b85      	ldr	r3, [pc, #532]	; (80011f8 <FN_TORQUE_PAGE+0x2e0>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d118      	bne.n	800101c <FN_TORQUE_PAGE+0x104>
			 {
				Nextion_Set_Value("c0", 0);
 8000fea:	2100      	movs	r1, #0
 8000fec:	4883      	ldr	r0, [pc, #524]	; (80011fc <FN_TORQUE_PAGE+0x2e4>)
 8000fee:	f000 fbeb 	bl	80017c8 <Nextion_Set_Value>
				Nextion_Set_Value("c1", 0);
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4882      	ldr	r0, [pc, #520]	; (8001200 <FN_TORQUE_PAGE+0x2e8>)
 8000ff6:	f000 fbe7 	bl	80017c8 <Nextion_Set_Value>
				Nextion_Set_Value("c2", 0);
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4881      	ldr	r0, [pc, #516]	; (8001204 <FN_TORQUE_PAGE+0x2ec>)
 8000ffe:	f000 fbe3 	bl	80017c8 <Nextion_Set_Value>
				Nextion_Set_Value("c3", 1);
 8001002:	2101      	movs	r1, #1
 8001004:	4880      	ldr	r0, [pc, #512]	; (8001208 <FN_TORQUE_PAGE+0x2f0>)
 8001006:	f000 fbdf 	bl	80017c8 <Nextion_Set_Value>
				Nextion_Set_Value("c4", 0);
 800100a:	2100      	movs	r1, #0
 800100c:	487f      	ldr	r0, [pc, #508]	; (800120c <FN_TORQUE_PAGE+0x2f4>)
 800100e:	f000 fbdb 	bl	80017c8 <Nextion_Set_Value>
				Nextion_Set_Value("c5", 0);
 8001012:	2100      	movs	r1, #0
 8001014:	487e      	ldr	r0, [pc, #504]	; (8001210 <FN_TORQUE_PAGE+0x2f8>)
 8001016:	f000 fbd7 	bl	80017c8 <Nextion_Set_Value>
 800101a:	e0df      	b.n	80011dc <FN_TORQUE_PAGE+0x2c4>

			 }else if(Torque_Unit == 4)
 800101c:	4b76      	ldr	r3, [pc, #472]	; (80011f8 <FN_TORQUE_PAGE+0x2e0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b04      	cmp	r3, #4
 8001022:	d118      	bne.n	8001056 <FN_TORQUE_PAGE+0x13e>
			 {
				Nextion_Set_Value("c0", 0);
 8001024:	2100      	movs	r1, #0
 8001026:	4875      	ldr	r0, [pc, #468]	; (80011fc <FN_TORQUE_PAGE+0x2e4>)
 8001028:	f000 fbce 	bl	80017c8 <Nextion_Set_Value>
				Nextion_Set_Value("c1", 0);
 800102c:	2100      	movs	r1, #0
 800102e:	4874      	ldr	r0, [pc, #464]	; (8001200 <FN_TORQUE_PAGE+0x2e8>)
 8001030:	f000 fbca 	bl	80017c8 <Nextion_Set_Value>
				Nextion_Set_Value("c2", 0);
 8001034:	2100      	movs	r1, #0
 8001036:	4873      	ldr	r0, [pc, #460]	; (8001204 <FN_TORQUE_PAGE+0x2ec>)
 8001038:	f000 fbc6 	bl	80017c8 <Nextion_Set_Value>
				Nextion_Set_Value("c3", 0);
 800103c:	2100      	movs	r1, #0
 800103e:	4872      	ldr	r0, [pc, #456]	; (8001208 <FN_TORQUE_PAGE+0x2f0>)
 8001040:	f000 fbc2 	bl	80017c8 <Nextion_Set_Value>
				Nextion_Set_Value("c4", 1);
 8001044:	2101      	movs	r1, #1
 8001046:	4871      	ldr	r0, [pc, #452]	; (800120c <FN_TORQUE_PAGE+0x2f4>)
 8001048:	f000 fbbe 	bl	80017c8 <Nextion_Set_Value>
				Nextion_Set_Value("c5", 0);
 800104c:	2100      	movs	r1, #0
 800104e:	4870      	ldr	r0, [pc, #448]	; (8001210 <FN_TORQUE_PAGE+0x2f8>)
 8001050:	f000 fbba 	bl	80017c8 <Nextion_Set_Value>
 8001054:	e0c2      	b.n	80011dc <FN_TORQUE_PAGE+0x2c4>

			 }else if(Torque_Unit == 5)
 8001056:	4b68      	ldr	r3, [pc, #416]	; (80011f8 <FN_TORQUE_PAGE+0x2e0>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2b05      	cmp	r3, #5
 800105c:	f040 80be 	bne.w	80011dc <FN_TORQUE_PAGE+0x2c4>
			 {
				Nextion_Set_Value("c0", 0);
 8001060:	2100      	movs	r1, #0
 8001062:	4866      	ldr	r0, [pc, #408]	; (80011fc <FN_TORQUE_PAGE+0x2e4>)
 8001064:	f000 fbb0 	bl	80017c8 <Nextion_Set_Value>
				Nextion_Set_Value("c1", 0);
 8001068:	2100      	movs	r1, #0
 800106a:	4865      	ldr	r0, [pc, #404]	; (8001200 <FN_TORQUE_PAGE+0x2e8>)
 800106c:	f000 fbac 	bl	80017c8 <Nextion_Set_Value>
				Nextion_Set_Value("c2", 0);
 8001070:	2100      	movs	r1, #0
 8001072:	4864      	ldr	r0, [pc, #400]	; (8001204 <FN_TORQUE_PAGE+0x2ec>)
 8001074:	f000 fba8 	bl	80017c8 <Nextion_Set_Value>
				Nextion_Set_Value("c3", 0);
 8001078:	2100      	movs	r1, #0
 800107a:	4863      	ldr	r0, [pc, #396]	; (8001208 <FN_TORQUE_PAGE+0x2f0>)
 800107c:	f000 fba4 	bl	80017c8 <Nextion_Set_Value>
				Nextion_Set_Value("c4", 0);
 8001080:	2100      	movs	r1, #0
 8001082:	4862      	ldr	r0, [pc, #392]	; (800120c <FN_TORQUE_PAGE+0x2f4>)
 8001084:	f000 fba0 	bl	80017c8 <Nextion_Set_Value>
				Nextion_Set_Value("c5", 1);
 8001088:	2101      	movs	r1, #1
 800108a:	4861      	ldr	r0, [pc, #388]	; (8001210 <FN_TORQUE_PAGE+0x2f8>)
 800108c:	f000 fb9c 	bl	80017c8 <Nextion_Set_Value>
			 }

			  while(CurrentPage == TORQUE_PAGE){
 8001090:	e0a4      	b.n	80011dc <FN_TORQUE_PAGE+0x2c4>

				HAL_Delay(300);
 8001092:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001096:	f000 fed5 	bl	8001e44 <HAL_Delay>

				if (CurrentButton == DEFAULT_BUTTON) //
 800109a:	4b55      	ldr	r3, [pc, #340]	; (80011f0 <FN_TORQUE_PAGE+0x2d8>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d126      	bne.n	80010f0 <FN_TORQUE_PAGE+0x1d8>
				{

				Nextion_Set_Value("c0", 1);
 80010a2:	2101      	movs	r1, #1
 80010a4:	4855      	ldr	r0, [pc, #340]	; (80011fc <FN_TORQUE_PAGE+0x2e4>)
 80010a6:	f000 fb8f 	bl	80017c8 <Nextion_Set_Value>
				Nextion_Set_Value("c1", 0);
 80010aa:	2100      	movs	r1, #0
 80010ac:	4854      	ldr	r0, [pc, #336]	; (8001200 <FN_TORQUE_PAGE+0x2e8>)
 80010ae:	f000 fb8b 	bl	80017c8 <Nextion_Set_Value>
				Nextion_Set_Value("c2", 0);
 80010b2:	2100      	movs	r1, #0
 80010b4:	4853      	ldr	r0, [pc, #332]	; (8001204 <FN_TORQUE_PAGE+0x2ec>)
 80010b6:	f000 fb87 	bl	80017c8 <Nextion_Set_Value>
				Nextion_Set_Value("c3", 0);
 80010ba:	2100      	movs	r1, #0
 80010bc:	4852      	ldr	r0, [pc, #328]	; (8001208 <FN_TORQUE_PAGE+0x2f0>)
 80010be:	f000 fb83 	bl	80017c8 <Nextion_Set_Value>
				Nextion_Set_Value("c4", 0);
 80010c2:	2100      	movs	r1, #0
 80010c4:	4851      	ldr	r0, [pc, #324]	; (800120c <FN_TORQUE_PAGE+0x2f4>)
 80010c6:	f000 fb7f 	bl	80017c8 <Nextion_Set_Value>
				Nextion_Set_Value("c5", 0);
 80010ca:	2100      	movs	r1, #0
 80010cc:	4850      	ldr	r0, [pc, #320]	; (8001210 <FN_TORQUE_PAGE+0x2f8>)
 80010ce:	f000 fb7b 	bl	80017c8 <Nextion_Set_Value>

				Torque_Unit = Fac_Torque_Unit;
 80010d2:	4b50      	ldr	r3, [pc, #320]	; (8001214 <FN_TORQUE_PAGE+0x2fc>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a48      	ldr	r2, [pc, #288]	; (80011f8 <FN_TORQUE_PAGE+0x2e0>)
 80010d8:	6013      	str	r3, [r2, #0]

				Flash_Write_All();
 80010da:	f7ff fdf7 	bl	8000ccc <Flash_Write_All>
				HAL_Delay(100);
 80010de:	2064      	movs	r0, #100	; 0x64
 80010e0:	f000 feb0 	bl	8001e44 <HAL_Delay>
				Flash_Read_All();
 80010e4:	f7ff fe1c 	bl	8000d20 <Flash_Read_All>
				CurrentButton = 0;
 80010e8:	4b41      	ldr	r3, [pc, #260]	; (80011f0 <FN_TORQUE_PAGE+0x2d8>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
 80010ee:	e075      	b.n	80011dc <FN_TORQUE_PAGE+0x2c4>

				}
				else if (CurrentButton == SAVE_BUTTON) //
 80010f0:	4b3f      	ldr	r3, [pc, #252]	; (80011f0 <FN_TORQUE_PAGE+0x2d8>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b03      	cmp	r3, #3
 80010f6:	d171      	bne.n	80011dc <FN_TORQUE_PAGE+0x2c4>
				{

				Nextion_Send_Command("tsw 255,0");
 80010f8:	4847      	ldr	r0, [pc, #284]	; (8001218 <FN_TORQUE_PAGE+0x300>)
 80010fa:	f000 fbbb 	bl	8001874 <Nextion_Send_Command>
				HAL_Delay(200);
 80010fe:	20c8      	movs	r0, #200	; 0xc8
 8001100:	f000 fea0 	bl	8001e44 <HAL_Delay>
				Nextion_Get_Value("c0");
 8001104:	483d      	ldr	r0, [pc, #244]	; (80011fc <FN_TORQUE_PAGE+0x2e4>)
 8001106:	f000 fb85 	bl	8001814 <Nextion_Get_Value>
				HAL_Delay(200);
 800110a:	20c8      	movs	r0, #200	; 0xc8
 800110c:	f000 fe9a 	bl	8001e44 <HAL_Delay>
				uint8_t c0 = Next_Number_Value;
 8001110:	4b42      	ldr	r3, [pc, #264]	; (800121c <FN_TORQUE_PAGE+0x304>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	71fb      	strb	r3, [r7, #7]


				Nextion_Get_Value("c1");
 8001116:	483a      	ldr	r0, [pc, #232]	; (8001200 <FN_TORQUE_PAGE+0x2e8>)
 8001118:	f000 fb7c 	bl	8001814 <Nextion_Get_Value>
				HAL_Delay(200);
 800111c:	20c8      	movs	r0, #200	; 0xc8
 800111e:	f000 fe91 	bl	8001e44 <HAL_Delay>
				uint8_t c1 = Next_Number_Value;
 8001122:	4b3e      	ldr	r3, [pc, #248]	; (800121c <FN_TORQUE_PAGE+0x304>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	71bb      	strb	r3, [r7, #6]


				Nextion_Get_Value("c2");
 8001128:	4836      	ldr	r0, [pc, #216]	; (8001204 <FN_TORQUE_PAGE+0x2ec>)
 800112a:	f000 fb73 	bl	8001814 <Nextion_Get_Value>
				HAL_Delay(200);
 800112e:	20c8      	movs	r0, #200	; 0xc8
 8001130:	f000 fe88 	bl	8001e44 <HAL_Delay>
				uint8_t c2 = Next_Number_Value;
 8001134:	4b39      	ldr	r3, [pc, #228]	; (800121c <FN_TORQUE_PAGE+0x304>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	717b      	strb	r3, [r7, #5]


				Nextion_Get_Value("c3");
 800113a:	4833      	ldr	r0, [pc, #204]	; (8001208 <FN_TORQUE_PAGE+0x2f0>)
 800113c:	f000 fb6a 	bl	8001814 <Nextion_Get_Value>
				HAL_Delay(200);
 8001140:	20c8      	movs	r0, #200	; 0xc8
 8001142:	f000 fe7f 	bl	8001e44 <HAL_Delay>
				uint8_t c3 = Next_Number_Value;
 8001146:	4b35      	ldr	r3, [pc, #212]	; (800121c <FN_TORQUE_PAGE+0x304>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	713b      	strb	r3, [r7, #4]


				Nextion_Get_Value("c4");
 800114c:	482f      	ldr	r0, [pc, #188]	; (800120c <FN_TORQUE_PAGE+0x2f4>)
 800114e:	f000 fb61 	bl	8001814 <Nextion_Get_Value>
				HAL_Delay(200);
 8001152:	20c8      	movs	r0, #200	; 0xc8
 8001154:	f000 fe76 	bl	8001e44 <HAL_Delay>
				uint8_t c4 = Next_Number_Value;
 8001158:	4b30      	ldr	r3, [pc, #192]	; (800121c <FN_TORQUE_PAGE+0x304>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	70fb      	strb	r3, [r7, #3]


				Nextion_Get_Value("c5");
 800115e:	482c      	ldr	r0, [pc, #176]	; (8001210 <FN_TORQUE_PAGE+0x2f8>)
 8001160:	f000 fb58 	bl	8001814 <Nextion_Get_Value>
				HAL_Delay(200);
 8001164:	20c8      	movs	r0, #200	; 0xc8
 8001166:	f000 fe6d 	bl	8001e44 <HAL_Delay>
				uint8_t c5 = Next_Number_Value;
 800116a:	4b2c      	ldr	r3, [pc, #176]	; (800121c <FN_TORQUE_PAGE+0x304>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	70bb      	strb	r3, [r7, #2]


				if(c0 == 1)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d103      	bne.n	800117e <FN_TORQUE_PAGE+0x266>
				{
					Torque_Unit = 0;
 8001176:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <FN_TORQUE_PAGE+0x2e0>)
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	e021      	b.n	80011c2 <FN_TORQUE_PAGE+0x2aa>
				}
				else if(c1 == 1)
 800117e:	79bb      	ldrb	r3, [r7, #6]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d103      	bne.n	800118c <FN_TORQUE_PAGE+0x274>
				{
					Torque_Unit = 1;
 8001184:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <FN_TORQUE_PAGE+0x2e0>)
 8001186:	2201      	movs	r2, #1
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	e01a      	b.n	80011c2 <FN_TORQUE_PAGE+0x2aa>
				}
				else if(c2 == 1)
 800118c:	797b      	ldrb	r3, [r7, #5]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d103      	bne.n	800119a <FN_TORQUE_PAGE+0x282>
				{
					Torque_Unit = 2;
 8001192:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <FN_TORQUE_PAGE+0x2e0>)
 8001194:	2202      	movs	r2, #2
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	e013      	b.n	80011c2 <FN_TORQUE_PAGE+0x2aa>
				}else if(c3 == 1)
 800119a:	793b      	ldrb	r3, [r7, #4]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d103      	bne.n	80011a8 <FN_TORQUE_PAGE+0x290>
				{
					Torque_Unit = 3;
 80011a0:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <FN_TORQUE_PAGE+0x2e0>)
 80011a2:	2203      	movs	r2, #3
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	e00c      	b.n	80011c2 <FN_TORQUE_PAGE+0x2aa>
				}
				else if(c4 == 1)
 80011a8:	78fb      	ldrb	r3, [r7, #3]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d103      	bne.n	80011b6 <FN_TORQUE_PAGE+0x29e>
				{
					Torque_Unit = 4;
 80011ae:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <FN_TORQUE_PAGE+0x2e0>)
 80011b0:	2204      	movs	r2, #4
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	e005      	b.n	80011c2 <FN_TORQUE_PAGE+0x2aa>
				}
				else if(c5 == 1)
 80011b6:	78bb      	ldrb	r3, [r7, #2]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d102      	bne.n	80011c2 <FN_TORQUE_PAGE+0x2aa>
				{
					Torque_Unit = 5;
 80011bc:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <FN_TORQUE_PAGE+0x2e0>)
 80011be:	2205      	movs	r2, #5
 80011c0:	601a      	str	r2, [r3, #0]
				}
				Flash_Write_All();
 80011c2:	f7ff fd83 	bl	8000ccc <Flash_Write_All>
				HAL_Delay(100);
 80011c6:	2064      	movs	r0, #100	; 0x64
 80011c8:	f000 fe3c 	bl	8001e44 <HAL_Delay>
				Flash_Read_All();
 80011cc:	f7ff fda8 	bl	8000d20 <Flash_Read_All>
				Nextion_Send_Command("tsw 255,255");
 80011d0:	4813      	ldr	r0, [pc, #76]	; (8001220 <FN_TORQUE_PAGE+0x308>)
 80011d2:	f000 fb4f 	bl	8001874 <Nextion_Send_Command>
				CurrentButton = 0;
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <FN_TORQUE_PAGE+0x2d8>)
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
			  while(CurrentPage == TORQUE_PAGE){
 80011dc:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <FN_TORQUE_PAGE+0x2dc>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b14      	cmp	r3, #20
 80011e2:	f43f af56 	beq.w	8001092 <FN_TORQUE_PAGE+0x17a>
				}
			  }
		}else {
		}

}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000199 	.word	0x20000199
 80011f4:	20000198 	.word	0x20000198
 80011f8:	2000018c 	.word	0x2000018c
 80011fc:	0800631c 	.word	0x0800631c
 8001200:	08006320 	.word	0x08006320
 8001204:	08006324 	.word	0x08006324
 8001208:	08006328 	.word	0x08006328
 800120c:	0800632c 	.word	0x0800632c
 8001210:	08006330 	.word	0x08006330
 8001214:	20000010 	.word	0x20000010
 8001218:	08006334 	.word	0x08006334
 800121c:	200001e0 	.word	0x200001e0
 8001220:	08006340 	.word	0x08006340

08001224 <FN_RPM_PAGE>:
void FN_RPM_PAGE(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
	CurrentButton = 0;
 800122a:	4bb4      	ldr	r3, [pc, #720]	; (80014fc <FN_RPM_PAGE+0x2d8>)
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
	if (CurrentPage == RPM_PAGE)
 8001230:	4bb3      	ldr	r3, [pc, #716]	; (8001500 <FN_RPM_PAGE+0x2dc>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b15      	cmp	r3, #21
 8001236:	f040 815c 	bne.w	80014f2 <FN_RPM_PAGE+0x2ce>
			{
				HAL_Delay(500);
 800123a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800123e:	f000 fe01 	bl	8001e44 <HAL_Delay>

				if(RPM_Unit == 0)
 8001242:	4bb0      	ldr	r3, [pc, #704]	; (8001504 <FN_RPM_PAGE+0x2e0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d118      	bne.n	800127c <FN_RPM_PAGE+0x58>
				 {
					Nextion_Set_Value("c0", 1);
 800124a:	2101      	movs	r1, #1
 800124c:	48ae      	ldr	r0, [pc, #696]	; (8001508 <FN_RPM_PAGE+0x2e4>)
 800124e:	f000 fabb 	bl	80017c8 <Nextion_Set_Value>
					Nextion_Set_Value("c1", 0);
 8001252:	2100      	movs	r1, #0
 8001254:	48ad      	ldr	r0, [pc, #692]	; (800150c <FN_RPM_PAGE+0x2e8>)
 8001256:	f000 fab7 	bl	80017c8 <Nextion_Set_Value>
					Nextion_Set_Value("c2", 0);
 800125a:	2100      	movs	r1, #0
 800125c:	48ac      	ldr	r0, [pc, #688]	; (8001510 <FN_RPM_PAGE+0x2ec>)
 800125e:	f000 fab3 	bl	80017c8 <Nextion_Set_Value>
					Nextion_Set_Value("c3", 0);
 8001262:	2100      	movs	r1, #0
 8001264:	48ab      	ldr	r0, [pc, #684]	; (8001514 <FN_RPM_PAGE+0x2f0>)
 8001266:	f000 faaf 	bl	80017c8 <Nextion_Set_Value>
					Nextion_Set_Value("c4", 0);
 800126a:	2100      	movs	r1, #0
 800126c:	48aa      	ldr	r0, [pc, #680]	; (8001518 <FN_RPM_PAGE+0x2f4>)
 800126e:	f000 faab 	bl	80017c8 <Nextion_Set_Value>
					Nextion_Set_Value("c5", 0);
 8001272:	2100      	movs	r1, #0
 8001274:	48a9      	ldr	r0, [pc, #676]	; (800151c <FN_RPM_PAGE+0x2f8>)
 8001276:	f000 faa7 	bl	80017c8 <Nextion_Set_Value>
 800127a:	e038      	b.n	80012ee <FN_RPM_PAGE+0xca>

				 }else if(RPM_Unit == 1)
 800127c:	4ba1      	ldr	r3, [pc, #644]	; (8001504 <FN_RPM_PAGE+0x2e0>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d118      	bne.n	80012b6 <FN_RPM_PAGE+0x92>
				 {
					Nextion_Set_Value("c0", 0);
 8001284:	2100      	movs	r1, #0
 8001286:	48a0      	ldr	r0, [pc, #640]	; (8001508 <FN_RPM_PAGE+0x2e4>)
 8001288:	f000 fa9e 	bl	80017c8 <Nextion_Set_Value>
					Nextion_Set_Value("c1", 1);
 800128c:	2101      	movs	r1, #1
 800128e:	489f      	ldr	r0, [pc, #636]	; (800150c <FN_RPM_PAGE+0x2e8>)
 8001290:	f000 fa9a 	bl	80017c8 <Nextion_Set_Value>
					Nextion_Set_Value("c2", 0);
 8001294:	2100      	movs	r1, #0
 8001296:	489e      	ldr	r0, [pc, #632]	; (8001510 <FN_RPM_PAGE+0x2ec>)
 8001298:	f000 fa96 	bl	80017c8 <Nextion_Set_Value>
					Nextion_Set_Value("c3", 0);
 800129c:	2100      	movs	r1, #0
 800129e:	489d      	ldr	r0, [pc, #628]	; (8001514 <FN_RPM_PAGE+0x2f0>)
 80012a0:	f000 fa92 	bl	80017c8 <Nextion_Set_Value>
					Nextion_Set_Value("c4", 0);
 80012a4:	2100      	movs	r1, #0
 80012a6:	489c      	ldr	r0, [pc, #624]	; (8001518 <FN_RPM_PAGE+0x2f4>)
 80012a8:	f000 fa8e 	bl	80017c8 <Nextion_Set_Value>
					Nextion_Set_Value("c5", 0);
 80012ac:	2100      	movs	r1, #0
 80012ae:	489b      	ldr	r0, [pc, #620]	; (800151c <FN_RPM_PAGE+0x2f8>)
 80012b0:	f000 fa8a 	bl	80017c8 <Nextion_Set_Value>
 80012b4:	e01b      	b.n	80012ee <FN_RPM_PAGE+0xca>

				 }else if(RPM_Unit == 2)
 80012b6:	4b93      	ldr	r3, [pc, #588]	; (8001504 <FN_RPM_PAGE+0x2e0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d117      	bne.n	80012ee <FN_RPM_PAGE+0xca>
				 {
					Nextion_Set_Value("c0", 0);
 80012be:	2100      	movs	r1, #0
 80012c0:	4891      	ldr	r0, [pc, #580]	; (8001508 <FN_RPM_PAGE+0x2e4>)
 80012c2:	f000 fa81 	bl	80017c8 <Nextion_Set_Value>
					Nextion_Set_Value("c1", 0);
 80012c6:	2100      	movs	r1, #0
 80012c8:	4890      	ldr	r0, [pc, #576]	; (800150c <FN_RPM_PAGE+0x2e8>)
 80012ca:	f000 fa7d 	bl	80017c8 <Nextion_Set_Value>
					Nextion_Set_Value("c2", 1);
 80012ce:	2101      	movs	r1, #1
 80012d0:	488f      	ldr	r0, [pc, #572]	; (8001510 <FN_RPM_PAGE+0x2ec>)
 80012d2:	f000 fa79 	bl	80017c8 <Nextion_Set_Value>
					Nextion_Set_Value("c3", 0);
 80012d6:	2100      	movs	r1, #0
 80012d8:	488e      	ldr	r0, [pc, #568]	; (8001514 <FN_RPM_PAGE+0x2f0>)
 80012da:	f000 fa75 	bl	80017c8 <Nextion_Set_Value>
					Nextion_Set_Value("c4", 0);
 80012de:	2100      	movs	r1, #0
 80012e0:	488d      	ldr	r0, [pc, #564]	; (8001518 <FN_RPM_PAGE+0x2f4>)
 80012e2:	f000 fa71 	bl	80017c8 <Nextion_Set_Value>
					Nextion_Set_Value("c5", 0);
 80012e6:	2100      	movs	r1, #0
 80012e8:	488c      	ldr	r0, [pc, #560]	; (800151c <FN_RPM_PAGE+0x2f8>)
 80012ea:	f000 fa6d 	bl	80017c8 <Nextion_Set_Value>
				 }

				  if(RPM_Unit == 3)
 80012ee:	4b85      	ldr	r3, [pc, #532]	; (8001504 <FN_RPM_PAGE+0x2e0>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b03      	cmp	r3, #3
 80012f4:	d118      	bne.n	8001328 <FN_RPM_PAGE+0x104>
				 {
					Nextion_Set_Value("c0", 0);
 80012f6:	2100      	movs	r1, #0
 80012f8:	4883      	ldr	r0, [pc, #524]	; (8001508 <FN_RPM_PAGE+0x2e4>)
 80012fa:	f000 fa65 	bl	80017c8 <Nextion_Set_Value>
					Nextion_Set_Value("c1", 0);
 80012fe:	2100      	movs	r1, #0
 8001300:	4882      	ldr	r0, [pc, #520]	; (800150c <FN_RPM_PAGE+0x2e8>)
 8001302:	f000 fa61 	bl	80017c8 <Nextion_Set_Value>
					Nextion_Set_Value("c2", 0);
 8001306:	2100      	movs	r1, #0
 8001308:	4881      	ldr	r0, [pc, #516]	; (8001510 <FN_RPM_PAGE+0x2ec>)
 800130a:	f000 fa5d 	bl	80017c8 <Nextion_Set_Value>
					Nextion_Set_Value("c3", 1);
 800130e:	2101      	movs	r1, #1
 8001310:	4880      	ldr	r0, [pc, #512]	; (8001514 <FN_RPM_PAGE+0x2f0>)
 8001312:	f000 fa59 	bl	80017c8 <Nextion_Set_Value>
					Nextion_Set_Value("c4", 0);
 8001316:	2100      	movs	r1, #0
 8001318:	487f      	ldr	r0, [pc, #508]	; (8001518 <FN_RPM_PAGE+0x2f4>)
 800131a:	f000 fa55 	bl	80017c8 <Nextion_Set_Value>
					Nextion_Set_Value("c5", 0);
 800131e:	2100      	movs	r1, #0
 8001320:	487e      	ldr	r0, [pc, #504]	; (800151c <FN_RPM_PAGE+0x2f8>)
 8001322:	f000 fa51 	bl	80017c8 <Nextion_Set_Value>
 8001326:	e0df      	b.n	80014e8 <FN_RPM_PAGE+0x2c4>

				 }else if(RPM_Unit == 4)
 8001328:	4b76      	ldr	r3, [pc, #472]	; (8001504 <FN_RPM_PAGE+0x2e0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b04      	cmp	r3, #4
 800132e:	d118      	bne.n	8001362 <FN_RPM_PAGE+0x13e>
				 {
					Nextion_Set_Value("c0", 0);
 8001330:	2100      	movs	r1, #0
 8001332:	4875      	ldr	r0, [pc, #468]	; (8001508 <FN_RPM_PAGE+0x2e4>)
 8001334:	f000 fa48 	bl	80017c8 <Nextion_Set_Value>
					Nextion_Set_Value("c1", 0);
 8001338:	2100      	movs	r1, #0
 800133a:	4874      	ldr	r0, [pc, #464]	; (800150c <FN_RPM_PAGE+0x2e8>)
 800133c:	f000 fa44 	bl	80017c8 <Nextion_Set_Value>
					Nextion_Set_Value("c2", 0);
 8001340:	2100      	movs	r1, #0
 8001342:	4873      	ldr	r0, [pc, #460]	; (8001510 <FN_RPM_PAGE+0x2ec>)
 8001344:	f000 fa40 	bl	80017c8 <Nextion_Set_Value>
					Nextion_Set_Value("c3", 0);
 8001348:	2100      	movs	r1, #0
 800134a:	4872      	ldr	r0, [pc, #456]	; (8001514 <FN_RPM_PAGE+0x2f0>)
 800134c:	f000 fa3c 	bl	80017c8 <Nextion_Set_Value>
					Nextion_Set_Value("c4", 1);
 8001350:	2101      	movs	r1, #1
 8001352:	4871      	ldr	r0, [pc, #452]	; (8001518 <FN_RPM_PAGE+0x2f4>)
 8001354:	f000 fa38 	bl	80017c8 <Nextion_Set_Value>
					Nextion_Set_Value("c5", 0);
 8001358:	2100      	movs	r1, #0
 800135a:	4870      	ldr	r0, [pc, #448]	; (800151c <FN_RPM_PAGE+0x2f8>)
 800135c:	f000 fa34 	bl	80017c8 <Nextion_Set_Value>
 8001360:	e0c2      	b.n	80014e8 <FN_RPM_PAGE+0x2c4>

				 }else if(RPM_Unit == 5)
 8001362:	4b68      	ldr	r3, [pc, #416]	; (8001504 <FN_RPM_PAGE+0x2e0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b05      	cmp	r3, #5
 8001368:	f040 80be 	bne.w	80014e8 <FN_RPM_PAGE+0x2c4>
				 {
					Nextion_Set_Value("c0", 0);
 800136c:	2100      	movs	r1, #0
 800136e:	4866      	ldr	r0, [pc, #408]	; (8001508 <FN_RPM_PAGE+0x2e4>)
 8001370:	f000 fa2a 	bl	80017c8 <Nextion_Set_Value>
					Nextion_Set_Value("c1", 0);
 8001374:	2100      	movs	r1, #0
 8001376:	4865      	ldr	r0, [pc, #404]	; (800150c <FN_RPM_PAGE+0x2e8>)
 8001378:	f000 fa26 	bl	80017c8 <Nextion_Set_Value>
					Nextion_Set_Value("c2", 0);
 800137c:	2100      	movs	r1, #0
 800137e:	4864      	ldr	r0, [pc, #400]	; (8001510 <FN_RPM_PAGE+0x2ec>)
 8001380:	f000 fa22 	bl	80017c8 <Nextion_Set_Value>
					Nextion_Set_Value("c3", 0);
 8001384:	2100      	movs	r1, #0
 8001386:	4863      	ldr	r0, [pc, #396]	; (8001514 <FN_RPM_PAGE+0x2f0>)
 8001388:	f000 fa1e 	bl	80017c8 <Nextion_Set_Value>
					Nextion_Set_Value("c4", 0);
 800138c:	2100      	movs	r1, #0
 800138e:	4862      	ldr	r0, [pc, #392]	; (8001518 <FN_RPM_PAGE+0x2f4>)
 8001390:	f000 fa1a 	bl	80017c8 <Nextion_Set_Value>
					Nextion_Set_Value("c5", 1);
 8001394:	2101      	movs	r1, #1
 8001396:	4861      	ldr	r0, [pc, #388]	; (800151c <FN_RPM_PAGE+0x2f8>)
 8001398:	f000 fa16 	bl	80017c8 <Nextion_Set_Value>
				 }

				  while(CurrentPage == RPM_PAGE){
 800139c:	e0a4      	b.n	80014e8 <FN_RPM_PAGE+0x2c4>

					HAL_Delay(300);
 800139e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80013a2:	f000 fd4f 	bl	8001e44 <HAL_Delay>

					if (CurrentButton == DEFAULT_BUTTON) //
 80013a6:	4b55      	ldr	r3, [pc, #340]	; (80014fc <FN_RPM_PAGE+0x2d8>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d126      	bne.n	80013fc <FN_RPM_PAGE+0x1d8>
					{

					Nextion_Set_Value("c0", 1);
 80013ae:	2101      	movs	r1, #1
 80013b0:	4855      	ldr	r0, [pc, #340]	; (8001508 <FN_RPM_PAGE+0x2e4>)
 80013b2:	f000 fa09 	bl	80017c8 <Nextion_Set_Value>
					Nextion_Set_Value("c1", 0);
 80013b6:	2100      	movs	r1, #0
 80013b8:	4854      	ldr	r0, [pc, #336]	; (800150c <FN_RPM_PAGE+0x2e8>)
 80013ba:	f000 fa05 	bl	80017c8 <Nextion_Set_Value>
					Nextion_Set_Value("c2", 0);
 80013be:	2100      	movs	r1, #0
 80013c0:	4853      	ldr	r0, [pc, #332]	; (8001510 <FN_RPM_PAGE+0x2ec>)
 80013c2:	f000 fa01 	bl	80017c8 <Nextion_Set_Value>
					Nextion_Set_Value("c3", 0);
 80013c6:	2100      	movs	r1, #0
 80013c8:	4852      	ldr	r0, [pc, #328]	; (8001514 <FN_RPM_PAGE+0x2f0>)
 80013ca:	f000 f9fd 	bl	80017c8 <Nextion_Set_Value>
					Nextion_Set_Value("c4", 0);
 80013ce:	2100      	movs	r1, #0
 80013d0:	4851      	ldr	r0, [pc, #324]	; (8001518 <FN_RPM_PAGE+0x2f4>)
 80013d2:	f000 f9f9 	bl	80017c8 <Nextion_Set_Value>
					Nextion_Set_Value("c5", 0);
 80013d6:	2100      	movs	r1, #0
 80013d8:	4850      	ldr	r0, [pc, #320]	; (800151c <FN_RPM_PAGE+0x2f8>)
 80013da:	f000 f9f5 	bl	80017c8 <Nextion_Set_Value>

					RPM_Unit = Fac_RPM_Unit;
 80013de:	4b50      	ldr	r3, [pc, #320]	; (8001520 <FN_RPM_PAGE+0x2fc>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a48      	ldr	r2, [pc, #288]	; (8001504 <FN_RPM_PAGE+0x2e0>)
 80013e4:	6013      	str	r3, [r2, #0]

					Flash_Write_All();
 80013e6:	f7ff fc71 	bl	8000ccc <Flash_Write_All>
					HAL_Delay(100);
 80013ea:	2064      	movs	r0, #100	; 0x64
 80013ec:	f000 fd2a 	bl	8001e44 <HAL_Delay>
					Flash_Read_All();
 80013f0:	f7ff fc96 	bl	8000d20 <Flash_Read_All>
					CurrentButton = 0;
 80013f4:	4b41      	ldr	r3, [pc, #260]	; (80014fc <FN_RPM_PAGE+0x2d8>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
 80013fa:	e075      	b.n	80014e8 <FN_RPM_PAGE+0x2c4>

					}
					else if (CurrentButton == SAVE_BUTTON) //
 80013fc:	4b3f      	ldr	r3, [pc, #252]	; (80014fc <FN_RPM_PAGE+0x2d8>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b03      	cmp	r3, #3
 8001402:	d171      	bne.n	80014e8 <FN_RPM_PAGE+0x2c4>
					{
					Nextion_Send_Command("tsw 255,0");
 8001404:	4847      	ldr	r0, [pc, #284]	; (8001524 <FN_RPM_PAGE+0x300>)
 8001406:	f000 fa35 	bl	8001874 <Nextion_Send_Command>
					HAL_Delay(200);
 800140a:	20c8      	movs	r0, #200	; 0xc8
 800140c:	f000 fd1a 	bl	8001e44 <HAL_Delay>
					Nextion_Get_Value("c0");
 8001410:	483d      	ldr	r0, [pc, #244]	; (8001508 <FN_RPM_PAGE+0x2e4>)
 8001412:	f000 f9ff 	bl	8001814 <Nextion_Get_Value>
					HAL_Delay(200);
 8001416:	20c8      	movs	r0, #200	; 0xc8
 8001418:	f000 fd14 	bl	8001e44 <HAL_Delay>
					uint8_t c0 = Next_Number_Value;
 800141c:	4b42      	ldr	r3, [pc, #264]	; (8001528 <FN_RPM_PAGE+0x304>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	71fb      	strb	r3, [r7, #7]

					Nextion_Get_Value("c1");
 8001422:	483a      	ldr	r0, [pc, #232]	; (800150c <FN_RPM_PAGE+0x2e8>)
 8001424:	f000 f9f6 	bl	8001814 <Nextion_Get_Value>
					HAL_Delay(200);
 8001428:	20c8      	movs	r0, #200	; 0xc8
 800142a:	f000 fd0b 	bl	8001e44 <HAL_Delay>
					uint8_t c1 = Next_Number_Value;
 800142e:	4b3e      	ldr	r3, [pc, #248]	; (8001528 <FN_RPM_PAGE+0x304>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	71bb      	strb	r3, [r7, #6]

					Nextion_Get_Value("c2");
 8001434:	4836      	ldr	r0, [pc, #216]	; (8001510 <FN_RPM_PAGE+0x2ec>)
 8001436:	f000 f9ed 	bl	8001814 <Nextion_Get_Value>
					HAL_Delay(200);
 800143a:	20c8      	movs	r0, #200	; 0xc8
 800143c:	f000 fd02 	bl	8001e44 <HAL_Delay>
					uint8_t c2 = Next_Number_Value;
 8001440:	4b39      	ldr	r3, [pc, #228]	; (8001528 <FN_RPM_PAGE+0x304>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	717b      	strb	r3, [r7, #5]

					Nextion_Get_Value("c3");
 8001446:	4833      	ldr	r0, [pc, #204]	; (8001514 <FN_RPM_PAGE+0x2f0>)
 8001448:	f000 f9e4 	bl	8001814 <Nextion_Get_Value>
					HAL_Delay(200);
 800144c:	20c8      	movs	r0, #200	; 0xc8
 800144e:	f000 fcf9 	bl	8001e44 <HAL_Delay>
					uint8_t c3 = Next_Number_Value;
 8001452:	4b35      	ldr	r3, [pc, #212]	; (8001528 <FN_RPM_PAGE+0x304>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	713b      	strb	r3, [r7, #4]

					Nextion_Get_Value("c4");
 8001458:	482f      	ldr	r0, [pc, #188]	; (8001518 <FN_RPM_PAGE+0x2f4>)
 800145a:	f000 f9db 	bl	8001814 <Nextion_Get_Value>
					HAL_Delay(200);
 800145e:	20c8      	movs	r0, #200	; 0xc8
 8001460:	f000 fcf0 	bl	8001e44 <HAL_Delay>
					uint8_t c4 = Next_Number_Value;
 8001464:	4b30      	ldr	r3, [pc, #192]	; (8001528 <FN_RPM_PAGE+0x304>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	70fb      	strb	r3, [r7, #3]

					Nextion_Get_Value("c5");
 800146a:	482c      	ldr	r0, [pc, #176]	; (800151c <FN_RPM_PAGE+0x2f8>)
 800146c:	f000 f9d2 	bl	8001814 <Nextion_Get_Value>
					HAL_Delay(200);
 8001470:	20c8      	movs	r0, #200	; 0xc8
 8001472:	f000 fce7 	bl	8001e44 <HAL_Delay>
					uint8_t c5 = Next_Number_Value;
 8001476:	4b2c      	ldr	r3, [pc, #176]	; (8001528 <FN_RPM_PAGE+0x304>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	70bb      	strb	r3, [r7, #2]

					if(c0 == 1)
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d103      	bne.n	800148a <FN_RPM_PAGE+0x266>
					{
						RPM_Unit = 0;
 8001482:	4b20      	ldr	r3, [pc, #128]	; (8001504 <FN_RPM_PAGE+0x2e0>)
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	e021      	b.n	80014ce <FN_RPM_PAGE+0x2aa>
					}
					else if(c1 == 1)
 800148a:	79bb      	ldrb	r3, [r7, #6]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d103      	bne.n	8001498 <FN_RPM_PAGE+0x274>
					{
						RPM_Unit = 1;
 8001490:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <FN_RPM_PAGE+0x2e0>)
 8001492:	2201      	movs	r2, #1
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	e01a      	b.n	80014ce <FN_RPM_PAGE+0x2aa>
					}
					else if(c2 == 1)
 8001498:	797b      	ldrb	r3, [r7, #5]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d103      	bne.n	80014a6 <FN_RPM_PAGE+0x282>
					{
						RPM_Unit = 2;
 800149e:	4b19      	ldr	r3, [pc, #100]	; (8001504 <FN_RPM_PAGE+0x2e0>)
 80014a0:	2202      	movs	r2, #2
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	e013      	b.n	80014ce <FN_RPM_PAGE+0x2aa>
					}else if(c3 == 1)
 80014a6:	793b      	ldrb	r3, [r7, #4]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d103      	bne.n	80014b4 <FN_RPM_PAGE+0x290>
					{
						RPM_Unit = 3;
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <FN_RPM_PAGE+0x2e0>)
 80014ae:	2203      	movs	r2, #3
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	e00c      	b.n	80014ce <FN_RPM_PAGE+0x2aa>
					}
					else if(c4 == 1)
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d103      	bne.n	80014c2 <FN_RPM_PAGE+0x29e>
					{
						RPM_Unit = 4;
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <FN_RPM_PAGE+0x2e0>)
 80014bc:	2204      	movs	r2, #4
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	e005      	b.n	80014ce <FN_RPM_PAGE+0x2aa>
					}
					else if(c5 == 1)
 80014c2:	78bb      	ldrb	r3, [r7, #2]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d102      	bne.n	80014ce <FN_RPM_PAGE+0x2aa>
					{
						RPM_Unit = 5;
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <FN_RPM_PAGE+0x2e0>)
 80014ca:	2205      	movs	r2, #5
 80014cc:	601a      	str	r2, [r3, #0]
					}
					Flash_Write_All();
 80014ce:	f7ff fbfd 	bl	8000ccc <Flash_Write_All>
					HAL_Delay(100);
 80014d2:	2064      	movs	r0, #100	; 0x64
 80014d4:	f000 fcb6 	bl	8001e44 <HAL_Delay>
					Flash_Read_All();
 80014d8:	f7ff fc22 	bl	8000d20 <Flash_Read_All>
					Nextion_Send_Command("tsw 255,255");
 80014dc:	4813      	ldr	r0, [pc, #76]	; (800152c <FN_RPM_PAGE+0x308>)
 80014de:	f000 f9c9 	bl	8001874 <Nextion_Send_Command>
					CurrentButton = 0;
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <FN_RPM_PAGE+0x2d8>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
				  while(CurrentPage == RPM_PAGE){
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <FN_RPM_PAGE+0x2dc>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b15      	cmp	r3, #21
 80014ee:	f43f af56 	beq.w	800139e <FN_RPM_PAGE+0x17a>
			}else {
			}



}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000199 	.word	0x20000199
 8001500:	20000198 	.word	0x20000198
 8001504:	20000188 	.word	0x20000188
 8001508:	0800631c 	.word	0x0800631c
 800150c:	08006320 	.word	0x08006320
 8001510:	08006324 	.word	0x08006324
 8001514:	08006328 	.word	0x08006328
 8001518:	0800632c 	.word	0x0800632c
 800151c:	08006330 	.word	0x08006330
 8001520:	2000000c 	.word	0x2000000c
 8001524:	08006334 	.word	0x08006334
 8001528:	200001e0 	.word	0x200001e0
 800152c:	08006340 	.word	0x08006340

08001530 <Clear_rx_buffer>:


void Clear_rx_buffer(void)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
	for(int i = 0; i < 50; i++)
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	e007      	b.n	800154c <Clear_rx_buffer+0x1c>
	  	  rx_buffer[i] = '\0';
 800153c:	4a08      	ldr	r2, [pc, #32]	; (8001560 <Clear_rx_buffer+0x30>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	2200      	movs	r2, #0
 8001544:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 50; i++)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3301      	adds	r3, #1
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b31      	cmp	r3, #49	; 0x31
 8001550:	ddf4      	ble.n	800153c <Clear_rx_buffer+0xc>
}
 8001552:	bf00      	nop
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	2000019c 	.word	0x2000019c

08001564 <nextion_command_control>:

void nextion_command_control()
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
	if (rx_buffer[0] == EVENT_TOUCH_HEAD) { // 0X65 BUTON
 8001568:	4b49      	ldr	r3, [pc, #292]	; (8001690 <nextion_command_control+0x12c>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b65      	cmp	r3, #101	; 0x65
 800156e:	d156      	bne.n	800161e <nextion_command_control+0xba>


		if (rx_buffer[1] == INIT_PAGE) {
 8001570:	4b47      	ldr	r3, [pc, #284]	; (8001690 <nextion_command_control+0x12c>)
 8001572:	785b      	ldrb	r3, [r3, #1]
 8001574:	2b00      	cmp	r3, #0
 8001576:	f000 8086 	beq.w	8001686 <nextion_command_control+0x122>
		}else if (rx_buffer[1] == MAIN_PAGE) {
 800157a:	4b45      	ldr	r3, [pc, #276]	; (8001690 <nextion_command_control+0x12c>)
 800157c:	785b      	ldrb	r3, [r3, #1]
 800157e:	2b13      	cmp	r3, #19
 8001580:	d115      	bne.n	80015ae <nextion_command_control+0x4a>
			if (rx_buffer[2] == TORQUE_BUTTON) {
 8001582:	4b43      	ldr	r3, [pc, #268]	; (8001690 <nextion_command_control+0x12c>)
 8001584:	789b      	ldrb	r3, [r3, #2]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d106      	bne.n	8001598 <nextion_command_control+0x34>
				CurrentPage = TORQUE_PAGE;
 800158a:	4b42      	ldr	r3, [pc, #264]	; (8001694 <nextion_command_control+0x130>)
 800158c:	2214      	movs	r2, #20
 800158e:	701a      	strb	r2, [r3, #0]
				CurrentButton = TORQUE_BUTTON;
 8001590:	4b41      	ldr	r3, [pc, #260]	; (8001698 <nextion_command_control+0x134>)
 8001592:	2201      	movs	r2, #1
 8001594:	701a      	strb	r2, [r3, #0]
	}else if (rx_buffer[0] == INVALID_CMD) {
	}else if (rx_buffer[0] == INVALID_VARIABLE) {
	}else {  
	}
	
}
 8001596:	e076      	b.n	8001686 <nextion_command_control+0x122>
			}else if (rx_buffer[2] == RPM_BUTTON) {
 8001598:	4b3d      	ldr	r3, [pc, #244]	; (8001690 <nextion_command_control+0x12c>)
 800159a:	789b      	ldrb	r3, [r3, #2]
 800159c:	2b02      	cmp	r3, #2
 800159e:	d172      	bne.n	8001686 <nextion_command_control+0x122>
				CurrentPage = RPM_PAGE;
 80015a0:	4b3c      	ldr	r3, [pc, #240]	; (8001694 <nextion_command_control+0x130>)
 80015a2:	2215      	movs	r2, #21
 80015a4:	701a      	strb	r2, [r3, #0]
				CurrentButton = RPM_BUTTON;
 80015a6:	4b3c      	ldr	r3, [pc, #240]	; (8001698 <nextion_command_control+0x134>)
 80015a8:	2202      	movs	r2, #2
 80015aa:	701a      	strb	r2, [r3, #0]
}
 80015ac:	e06b      	b.n	8001686 <nextion_command_control+0x122>
		}else if (rx_buffer[1] == TORQUE_PAGE) {
 80015ae:	4b38      	ldr	r3, [pc, #224]	; (8001690 <nextion_command_control+0x12c>)
 80015b0:	785b      	ldrb	r3, [r3, #1]
 80015b2:	2b14      	cmp	r3, #20
 80015b4:	d117      	bne.n	80015e6 <nextion_command_control+0x82>
			if (rx_buffer[2] == MENU_BUTTON) {
 80015b6:	4b36      	ldr	r3, [pc, #216]	; (8001690 <nextion_command_control+0x12c>)
 80015b8:	789b      	ldrb	r3, [r3, #2]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d103      	bne.n	80015c6 <nextion_command_control+0x62>
				 CurrentPage = MAIN_PAGE;
 80015be:	4b35      	ldr	r3, [pc, #212]	; (8001694 <nextion_command_control+0x130>)
 80015c0:	2213      	movs	r2, #19
 80015c2:	701a      	strb	r2, [r3, #0]
}
 80015c4:	e05f      	b.n	8001686 <nextion_command_control+0x122>
			}else if (rx_buffer[2] == DEFAULT_BUTTON) {
 80015c6:	4b32      	ldr	r3, [pc, #200]	; (8001690 <nextion_command_control+0x12c>)
 80015c8:	789b      	ldrb	r3, [r3, #2]
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d103      	bne.n	80015d6 <nextion_command_control+0x72>
				 CurrentButton = DEFAULT_BUTTON;
 80015ce:	4b32      	ldr	r3, [pc, #200]	; (8001698 <nextion_command_control+0x134>)
 80015d0:	2202      	movs	r2, #2
 80015d2:	701a      	strb	r2, [r3, #0]
}
 80015d4:	e057      	b.n	8001686 <nextion_command_control+0x122>
			}else if (rx_buffer[2] == SAVE_BUTTON) {
 80015d6:	4b2e      	ldr	r3, [pc, #184]	; (8001690 <nextion_command_control+0x12c>)
 80015d8:	789b      	ldrb	r3, [r3, #2]
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d153      	bne.n	8001686 <nextion_command_control+0x122>
				 CurrentButton = SAVE_BUTTON;
 80015de:	4b2e      	ldr	r3, [pc, #184]	; (8001698 <nextion_command_control+0x134>)
 80015e0:	2203      	movs	r2, #3
 80015e2:	701a      	strb	r2, [r3, #0]
}
 80015e4:	e04f      	b.n	8001686 <nextion_command_control+0x122>
		}else if (rx_buffer[1] == RPM_PAGE) {
 80015e6:	4b2a      	ldr	r3, [pc, #168]	; (8001690 <nextion_command_control+0x12c>)
 80015e8:	785b      	ldrb	r3, [r3, #1]
 80015ea:	2b15      	cmp	r3, #21
 80015ec:	d14b      	bne.n	8001686 <nextion_command_control+0x122>
			if (rx_buffer[2] == MENU_BUTTON) {
 80015ee:	4b28      	ldr	r3, [pc, #160]	; (8001690 <nextion_command_control+0x12c>)
 80015f0:	789b      	ldrb	r3, [r3, #2]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d103      	bne.n	80015fe <nextion_command_control+0x9a>
				CurrentPage = MAIN_PAGE;
 80015f6:	4b27      	ldr	r3, [pc, #156]	; (8001694 <nextion_command_control+0x130>)
 80015f8:	2213      	movs	r2, #19
 80015fa:	701a      	strb	r2, [r3, #0]
}
 80015fc:	e043      	b.n	8001686 <nextion_command_control+0x122>
			}else if (rx_buffer[2] == DEFAULT_BUTTON) {
 80015fe:	4b24      	ldr	r3, [pc, #144]	; (8001690 <nextion_command_control+0x12c>)
 8001600:	789b      	ldrb	r3, [r3, #2]
 8001602:	2b02      	cmp	r3, #2
 8001604:	d103      	bne.n	800160e <nextion_command_control+0xaa>
				 CurrentButton = DEFAULT_BUTTON;
 8001606:	4b24      	ldr	r3, [pc, #144]	; (8001698 <nextion_command_control+0x134>)
 8001608:	2202      	movs	r2, #2
 800160a:	701a      	strb	r2, [r3, #0]
}
 800160c:	e03b      	b.n	8001686 <nextion_command_control+0x122>
			}else if (rx_buffer[2] == SAVE_BUTTON) {
 800160e:	4b20      	ldr	r3, [pc, #128]	; (8001690 <nextion_command_control+0x12c>)
 8001610:	789b      	ldrb	r3, [r3, #2]
 8001612:	2b03      	cmp	r3, #3
 8001614:	d137      	bne.n	8001686 <nextion_command_control+0x122>
				 CurrentButton = SAVE_BUTTON;
 8001616:	4b20      	ldr	r3, [pc, #128]	; (8001698 <nextion_command_control+0x134>)
 8001618:	2203      	movs	r2, #3
 800161a:	701a      	strb	r2, [r3, #0]
}
 800161c:	e033      	b.n	8001686 <nextion_command_control+0x122>
	}else if (rx_buffer[0] == STRING_HEAD) {
 800161e:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <nextion_command_control+0x12c>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b70      	cmp	r3, #112	; 0x70
 8001624:	d02f      	beq.n	8001686 <nextion_command_control+0x122>
	}else if (rx_buffer[0] == NUMBER_HEAD) {
 8001626:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <nextion_command_control+0x12c>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b71      	cmp	r3, #113	; 0x71
 800162c:	d124      	bne.n	8001678 <nextion_command_control+0x114>
		numberHead=true;
 800162e:	4b1b      	ldr	r3, [pc, #108]	; (800169c <nextion_command_control+0x138>)
 8001630:	2201      	movs	r2, #1
 8001632:	701a      	strb	r2, [r3, #0]
		if (rx_buffer[0] == NUMBER_HEAD
 8001634:	4b16      	ldr	r3, [pc, #88]	; (8001690 <nextion_command_control+0x12c>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b71      	cmp	r3, #113	; 0x71
 800163a:	d124      	bne.n	8001686 <nextion_command_control+0x122>
				&& rx_buffer[5] == 0xFF
 800163c:	4b14      	ldr	r3, [pc, #80]	; (8001690 <nextion_command_control+0x12c>)
 800163e:	795b      	ldrb	r3, [r3, #5]
 8001640:	2bff      	cmp	r3, #255	; 0xff
 8001642:	d120      	bne.n	8001686 <nextion_command_control+0x122>
				&& rx_buffer[6] == 0xFF
 8001644:	4b12      	ldr	r3, [pc, #72]	; (8001690 <nextion_command_control+0x12c>)
 8001646:	799b      	ldrb	r3, [r3, #6]
 8001648:	2bff      	cmp	r3, #255	; 0xff
 800164a:	d11c      	bne.n	8001686 <nextion_command_control+0x122>
				&& rx_buffer[7] == 0xFF
 800164c:	4b10      	ldr	r3, [pc, #64]	; (8001690 <nextion_command_control+0x12c>)
 800164e:	79db      	ldrb	r3, [r3, #7]
 8001650:	2bff      	cmp	r3, #255	; 0xff
 8001652:	d118      	bne.n	8001686 <nextion_command_control+0x122>
			Next_Number_Value = (rx_buffer[4] << 24) | (rx_buffer[3] << 16) | (rx_buffer[2] << 8) | (rx_buffer[1]);
 8001654:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <nextion_command_control+0x12c>)
 8001656:	791b      	ldrb	r3, [r3, #4]
 8001658:	061a      	lsls	r2, r3, #24
 800165a:	4b0d      	ldr	r3, [pc, #52]	; (8001690 <nextion_command_control+0x12c>)
 800165c:	78db      	ldrb	r3, [r3, #3]
 800165e:	041b      	lsls	r3, r3, #16
 8001660:	431a      	orrs	r2, r3
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <nextion_command_control+0x12c>)
 8001664:	789b      	ldrb	r3, [r3, #2]
 8001666:	021b      	lsls	r3, r3, #8
 8001668:	4313      	orrs	r3, r2
 800166a:	4a09      	ldr	r2, [pc, #36]	; (8001690 <nextion_command_control+0x12c>)
 800166c:	7852      	ldrb	r2, [r2, #1]
 800166e:	4313      	orrs	r3, r2
 8001670:	461a      	mov	r2, r3
 8001672:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <nextion_command_control+0x13c>)
 8001674:	601a      	str	r2, [r3, #0]
}
 8001676:	e006      	b.n	8001686 <nextion_command_control+0x122>
	}else if (rx_buffer[0] == CMD_FINISHED) {
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <nextion_command_control+0x12c>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d002      	beq.n	8001686 <nextion_command_control+0x122>
	}else if (rx_buffer[0] == INVALID_CMD) {
 8001680:	4b03      	ldr	r3, [pc, #12]	; (8001690 <nextion_command_control+0x12c>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	2000019c 	.word	0x2000019c
 8001694:	20000198 	.word	0x20000198
 8001698:	20000199 	.word	0x20000199
 800169c:	200001f9 	.word	0x200001f9
 80016a0:	200001e0 	.word	0x200001e0

080016a4 <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	
	//HAL_UART_Receive_IT (&huart6, (uint8_t *)reading_buffer, 1);
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6 ){
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a34      	ldr	r2, [pc, #208]	; (8001798 <HAL_UART_RxCpltCallback+0xe0>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d134      	bne.n	8001734 <HAL_UART_RxCpltCallback+0x7c>
		rx_buffer[count] = reading_buffer[0];
 80016ca:	4b34      	ldr	r3, [pc, #208]	; (800179c <HAL_UART_RxCpltCallback+0xe4>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a34      	ldr	r2, [pc, #208]	; (80017a0 <HAL_UART_RxCpltCallback+0xe8>)
 80016d0:	7811      	ldrb	r1, [r2, #0]
 80016d2:	4a34      	ldr	r2, [pc, #208]	; (80017a4 <HAL_UART_RxCpltCallback+0xec>)
 80016d4:	54d1      	strb	r1, [r2, r3]
		if (rx_buffer[count] == 0xff) {
 80016d6:	4b31      	ldr	r3, [pc, #196]	; (800179c <HAL_UART_RxCpltCallback+0xe4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a32      	ldr	r2, [pc, #200]	; (80017a4 <HAL_UART_RxCpltCallback+0xec>)
 80016dc:	5cd3      	ldrb	r3, [r2, r3]
 80016de:	2bff      	cmp	r3, #255	; 0xff
 80016e0:	d123      	bne.n	800172a <HAL_UART_RxCpltCallback+0x72>
			if (rx_buffer[count-1] == 0xff) {
 80016e2:	4b2e      	ldr	r3, [pc, #184]	; (800179c <HAL_UART_RxCpltCallback+0xe4>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	4a2e      	ldr	r2, [pc, #184]	; (80017a4 <HAL_UART_RxCpltCallback+0xec>)
 80016ea:	5cd3      	ldrb	r3, [r2, r3]
 80016ec:	2bff      	cmp	r3, #255	; 0xff
 80016ee:	d116      	bne.n	800171e <HAL_UART_RxCpltCallback+0x66>
				if (rx_buffer[count-2] == 0xff) {
 80016f0:	4b2a      	ldr	r3, [pc, #168]	; (800179c <HAL_UART_RxCpltCallback+0xe4>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	3b02      	subs	r3, #2
 80016f6:	4a2b      	ldr	r2, [pc, #172]	; (80017a4 <HAL_UART_RxCpltCallback+0xec>)
 80016f8:	5cd3      	ldrb	r3, [r2, r3]
 80016fa:	2bff      	cmp	r3, #255	; 0xff
 80016fc:	d109      	bne.n	8001712 <HAL_UART_RxCpltCallback+0x5a>
					count=0;
 80016fe:	4b27      	ldr	r3, [pc, #156]	; (800179c <HAL_UART_RxCpltCallback+0xe4>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
					countReceive=0;
 8001704:	4b28      	ldr	r3, [pc, #160]	; (80017a8 <HAL_UART_RxCpltCallback+0xf0>)
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
					nextion_command_ready = true;
 800170a:	4b28      	ldr	r3, [pc, #160]	; (80017ac <HAL_UART_RxCpltCallback+0xf4>)
 800170c:	2201      	movs	r2, #1
 800170e:	701a      	strb	r2, [r3, #0]
 8001710:	e010      	b.n	8001734 <HAL_UART_RxCpltCallback+0x7c>
				}else {
					count++;
 8001712:	4b22      	ldr	r3, [pc, #136]	; (800179c <HAL_UART_RxCpltCallback+0xe4>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	3301      	adds	r3, #1
 8001718:	4a20      	ldr	r2, [pc, #128]	; (800179c <HAL_UART_RxCpltCallback+0xe4>)
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	e00a      	b.n	8001734 <HAL_UART_RxCpltCallback+0x7c>
				}
			}else {
				count++;
 800171e:	4b1f      	ldr	r3, [pc, #124]	; (800179c <HAL_UART_RxCpltCallback+0xe4>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	3301      	adds	r3, #1
 8001724:	4a1d      	ldr	r2, [pc, #116]	; (800179c <HAL_UART_RxCpltCallback+0xe4>)
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	e004      	b.n	8001734 <HAL_UART_RxCpltCallback+0x7c>
			}
		}else {
			count++;
 800172a:	4b1c      	ldr	r3, [pc, #112]	; (800179c <HAL_UART_RxCpltCallback+0xe4>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	3301      	adds	r3, #1
 8001730:	4a1a      	ldr	r2, [pc, #104]	; (800179c <HAL_UART_RxCpltCallback+0xe4>)
 8001732:	6013      	str	r3, [r2, #0]
		}
	}

	if(huart->Instance == USART6 && nextion_command_ready == true){
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a17      	ldr	r2, [pc, #92]	; (8001798 <HAL_UART_RxCpltCallback+0xe0>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d123      	bne.n	8001786 <HAL_UART_RxCpltCallback+0xce>
 800173e:	4b1b      	ldr	r3, [pc, #108]	; (80017ac <HAL_UART_RxCpltCallback+0xf4>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d01f      	beq.n	8001786 <HAL_UART_RxCpltCallback+0xce>
		__HAL_UART_DISABLE_IT(&huart6, UART_IT_RXNE);
 8001746:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <HAL_UART_RxCpltCallback+0xf8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <HAL_UART_RxCpltCallback+0xf8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 0220 	bic.w	r2, r2, #32
 8001754:	60da      	str	r2, [r3, #12]
			UartReady = RESET;
 8001756:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <HAL_UART_RxCpltCallback+0xfc>)
 8001758:	2200      	movs	r2, #0
 800175a:	701a      	strb	r2, [r3, #0]
			nextion_command_control();
 800175c:	f7ff ff02 	bl	8001564 <nextion_command_control>
		usartReceiveITEnable = 0;
 8001760:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <HAL_UART_RxCpltCallback+0x100>)
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
		nextion_command_ready = false;
 8001766:	4b11      	ldr	r3, [pc, #68]	; (80017ac <HAL_UART_RxCpltCallback+0xf4>)
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
		Clear_rx_buffer();
 800176c:	f7ff fee0 	bl	8001530 <Clear_rx_buffer>

		//__NOP();
		__HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <HAL_UART_RxCpltCallback+0xf8>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	68da      	ldr	r2, [r3, #12]
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <HAL_UART_RxCpltCallback+0xf8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f042 0220 	orr.w	r2, r2, #32
 800177e:	60da      	str	r2, [r3, #12]
		UartReady = SET;
 8001780:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <HAL_UART_RxCpltCallback+0xfc>)
 8001782:	2201      	movs	r2, #1
 8001784:	701a      	strb	r2, [r3, #0]
	* ff bitiş kodları
	* ff bitiş kodları			  
	*/
	//Clear_rx_buffer();
	//HAL_UART_Receive_IT (&huart3, rx_buffer, 7);
	HAL_UART_Receive_IT (&huart6, (uint8_t *)reading_buffer, 1);
 8001786:	2201      	movs	r2, #1
 8001788:	4905      	ldr	r1, [pc, #20]	; (80017a0 <HAL_UART_RxCpltCallback+0xe8>)
 800178a:	4809      	ldr	r0, [pc, #36]	; (80017b0 <HAL_UART_RxCpltCallback+0xf8>)
 800178c:	f003 f97a 	bl	8004a84 <HAL_UART_Receive_IT>
}
 8001790:	bf00      	nop
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40011400 	.word	0x40011400
 800179c:	200001f4 	.word	0x200001f4
 80017a0:	200001d0 	.word	0x200001d0
 80017a4:	2000019c 	.word	0x2000019c
 80017a8:	20000194 	.word	0x20000194
 80017ac:	200001f8 	.word	0x200001f8
 80017b0:	20000144 	.word	0x20000144
 80017b4:	200000b0 	.word	0x200000b0
 80017b8:	200001dc 	.word	0x200001dc

080017bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c0:	b672      	cpsid	i
}
 80017c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <Error_Handler+0x8>
	...

080017c8 <Nextion_Set_Value>:
}
/*
 * Nextion_Set_Value("n0", 150);
 */
void Nextion_Set_Value(char *object_name, int32_t number)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08a      	sub	sp, #40	; 0x28
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
	char buf[30] = { 0 };
 80017d2:	2300      	movs	r3, #0
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	f107 030c 	add.w	r3, r7, #12
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
 80017e4:	611a      	str	r2, [r3, #16]
 80017e6:	615a      	str	r2, [r3, #20]
 80017e8:	831a      	strh	r2, [r3, #24]
	sprintf(buf, "%s.val=%ld", object_name, number);
 80017ea:	f107 0008 	add.w	r0, r7, #8
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	4907      	ldr	r1, [pc, #28]	; (8001810 <Nextion_Set_Value+0x48>)
 80017f4:	f004 f906 	bl	8005a04 <siprintf>
	Nextion_Send_Command(buf);
 80017f8:	f107 0308 	add.w	r3, r7, #8
 80017fc:	4618      	mov	r0, r3
 80017fe:	f000 f839 	bl	8001874 <Nextion_Send_Command>
	HAL_Delay(15);
 8001802:	200f      	movs	r0, #15
 8001804:	f000 fb1e 	bl	8001e44 <HAL_Delay>
}
 8001808:	bf00      	nop
 800180a:	3728      	adds	r7, #40	; 0x28
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	08006358 	.word	0x08006358

08001814 <Nextion_Get_Value>:

/*
 * Nextion_Get_Value("n0");
 */
void Nextion_Get_Value(char *object_name)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08c      	sub	sp, #48	; 0x30
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	char buf[30] = { 0 };
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	f107 0310 	add.w	r3, r7, #16
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
 8001830:	615a      	str	r2, [r3, #20]
 8001832:	831a      	strh	r2, [r3, #24]
	int countDelay = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
	sprintf(buf, "get %s.val", object_name);
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	490c      	ldr	r1, [pc, #48]	; (8001870 <Nextion_Get_Value+0x5c>)
 8001840:	4618      	mov	r0, r3
 8001842:	f004 f8df 	bl	8005a04 <siprintf>
	Nextion_Send_Command(buf);
 8001846:	f107 030c 	add.w	r3, r7, #12
 800184a:	4618      	mov	r0, r3
 800184c:	f000 f812 	bl	8001874 <Nextion_Send_Command>
//	UART1_Write(0xFF);
//	UART1_Write(0xFF);
	// i=0;

	//Delay_ms(30);
	while (countDelay< 20)
 8001850:	e005      	b.n	800185e <Nextion_Get_Value+0x4a>
	{
			HAL_Delay(10);
 8001852:	200a      	movs	r0, #10
 8001854:	f000 faf6 	bl	8001e44 <HAL_Delay>
			countDelay++;
 8001858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185a:	3301      	adds	r3, #1
 800185c:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (countDelay< 20)
 800185e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001860:	2b13      	cmp	r3, #19
 8001862:	ddf6      	ble.n	8001852 <Nextion_Get_Value+0x3e>
	}
}
 8001864:	bf00      	nop
 8001866:	bf00      	nop
 8001868:	3730      	adds	r7, #48	; 0x30
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	08006364 	.word	0x08006364

08001874 <Nextion_Send_Command>:
/*
 *
 * Nextion_Send_Command("page 3");
 */
void Nextion_Send_Command(char *command)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08e      	sub	sp, #56	; 0x38
 8001878:	af02      	add	r7, sp, #8
 800187a:	6078      	str	r0, [r7, #4]
	char buf[30] = { 0 };
 800187c:	2300      	movs	r3, #0
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	f107 030c 	add.w	r3, r7, #12
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
 8001890:	615a      	str	r2, [r3, #20]
 8001892:	831a      	strh	r2, [r3, #24]
	char sps = 0xFF;
 8001894:	23ff      	movs	r3, #255	; 0xff
 8001896:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	int SizeBuf = sprintf(buf, "%s%c%c%c", command, sps, sps, sps);
 800189a:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 800189e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018a2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80018a6:	f107 0008 	add.w	r0, r7, #8
 80018aa:	9201      	str	r2, [sp, #4]
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	460b      	mov	r3, r1
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	490a      	ldr	r1, [pc, #40]	; (80018dc <Nextion_Send_Command+0x68>)
 80018b4:	f004 f8a6 	bl	8005a04 <siprintf>
 80018b8:	62b8      	str	r0, [r7, #40]	; 0x28
	//HAL_UART_Transmit(&huart3, (uint8_t*) &buf, SizeBuf, NextionTimeOutMs);
	HAL_UART_Transmit(&huart6, (uint8_t*) &buf, SizeBuf, NextionTimeOutMs);
 80018ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018bc:	b29a      	uxth	r2, r3
 80018be:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <Nextion_Send_Command+0x6c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f107 0108 	add.w	r1, r7, #8
 80018c6:	4807      	ldr	r0, [pc, #28]	; (80018e4 <Nextion_Send_Command+0x70>)
 80018c8:	f003 f84a 	bl	8004960 <HAL_UART_Transmit>
	HAL_Delay(10);																
 80018cc:	200a      	movs	r0, #10
 80018ce:	f000 fab9 	bl	8001e44 <HAL_Delay>
}
 80018d2:	bf00      	nop
 80018d4:	3730      	adds	r7, #48	; 0x30
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	08006370 	.word	0x08006370
 80018e0:	20000020 	.word	0x20000020
 80018e4:	20000144 	.word	0x20000144

080018e8 <Nextion_Page>:
	Nextion_Send_Command(buf);
}


void Nextion_Page(uint8_t page_name)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08a      	sub	sp, #40	; 0x28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
	char buf[30] = { 0 };
 80018f2:	2300      	movs	r3, #0
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	f107 030c 	add.w	r3, r7, #12
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
 8001904:	611a      	str	r2, [r3, #16]
 8001906:	615a      	str	r2, [r3, #20]
 8001908:	831a      	strh	r2, [r3, #24]
	sprintf(buf, "page %d", page_name);
 800190a:	79fa      	ldrb	r2, [r7, #7]
 800190c:	f107 0308 	add.w	r3, r7, #8
 8001910:	4907      	ldr	r1, [pc, #28]	; (8001930 <Nextion_Page+0x48>)
 8001912:	4618      	mov	r0, r3
 8001914:	f004 f876 	bl	8005a04 <siprintf>
	Nextion_Send_Command(buf);
 8001918:	f107 0308 	add.w	r3, r7, #8
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff ffa9 	bl	8001874 <Nextion_Send_Command>
	HAL_Delay(100);
 8001922:	2064      	movs	r0, #100	; 0x64
 8001924:	f000 fa8e 	bl	8001e44 <HAL_Delay>
}
 8001928:	bf00      	nop
 800192a:	3728      	adds	r7, #40	; 0x28
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	08006398 	.word	0x08006398

08001934 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <HAL_MspInit+0x4c>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	4a0f      	ldr	r2, [pc, #60]	; (8001980 <HAL_MspInit+0x4c>)
 8001944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001948:	6453      	str	r3, [r2, #68]	; 0x44
 800194a:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <HAL_MspInit+0x4c>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	603b      	str	r3, [r7, #0]
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_MspInit+0x4c>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	4a08      	ldr	r2, [pc, #32]	; (8001980 <HAL_MspInit+0x4c>)
 8001960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001964:	6413      	str	r3, [r2, #64]	; 0x40
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_MspInit+0x4c>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800

08001984 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	; 0x28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a27      	ldr	r2, [pc, #156]	; (8001a40 <HAL_TIM_Base_MspInit+0xbc>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d134      	bne.n	8001a10 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	4b26      	ldr	r3, [pc, #152]	; (8001a44 <HAL_TIM_Base_MspInit+0xc0>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	4a25      	ldr	r2, [pc, #148]	; (8001a44 <HAL_TIM_Base_MspInit+0xc0>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6453      	str	r3, [r2, #68]	; 0x44
 80019b6:	4b23      	ldr	r3, [pc, #140]	; (8001a44 <HAL_TIM_Base_MspInit+0xc0>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	4b1f      	ldr	r3, [pc, #124]	; (8001a44 <HAL_TIM_Base_MspInit+0xc0>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a1e      	ldr	r2, [pc, #120]	; (8001a44 <HAL_TIM_Base_MspInit+0xc0>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b1c      	ldr	r3, [pc, #112]	; (8001a44 <HAL_TIM_Base_MspInit+0xc0>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA6     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019de:	2340      	movs	r3, #64	; 0x40
 80019e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e2:	2302      	movs	r3, #2
 80019e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	2300      	movs	r3, #0
 80019ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019ee:	2301      	movs	r3, #1
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	4619      	mov	r1, r3
 80019f8:	4813      	ldr	r0, [pc, #76]	; (8001a48 <HAL_TIM_Base_MspInit+0xc4>)
 80019fa:	f000 fde9 	bl	80025d0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2100      	movs	r1, #0
 8001a02:	2018      	movs	r0, #24
 8001a04:	f000 fb1d 	bl	8002042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001a08:	2018      	movs	r0, #24
 8001a0a:	f000 fb36 	bl	800207a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a0e:	e012      	b.n	8001a36 <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM4)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a0d      	ldr	r2, [pc, #52]	; (8001a4c <HAL_TIM_Base_MspInit+0xc8>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d10d      	bne.n	8001a36 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <HAL_TIM_Base_MspInit+0xc0>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	4a08      	ldr	r2, [pc, #32]	; (8001a44 <HAL_TIM_Base_MspInit+0xc0>)
 8001a24:	f043 0304 	orr.w	r3, r3, #4
 8001a28:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_TIM_Base_MspInit+0xc0>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	f003 0304 	and.w	r3, r3, #4
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	68bb      	ldr	r3, [r7, #8]
}
 8001a36:	bf00      	nop
 8001a38:	3728      	adds	r7, #40	; 0x28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40010000 	.word	0x40010000
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40020000 	.word	0x40020000
 8001a4c:	40000800 	.word	0x40000800

08001a50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a34      	ldr	r2, [pc, #208]	; (8001b40 <HAL_TIM_MspPostInit+0xf0>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d13d      	bne.n	8001aee <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	4b33      	ldr	r3, [pc, #204]	; (8001b44 <HAL_TIM_MspPostInit+0xf4>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a32      	ldr	r2, [pc, #200]	; (8001b44 <HAL_TIM_MspPostInit+0xf4>)
 8001a7c:	f043 0302 	orr.w	r3, r3, #2
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b30      	ldr	r3, [pc, #192]	; (8001b44 <HAL_TIM_MspPostInit+0xf4>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	4b2c      	ldr	r3, [pc, #176]	; (8001b44 <HAL_TIM_MspPostInit+0xf4>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a2b      	ldr	r2, [pc, #172]	; (8001b44 <HAL_TIM_MspPostInit+0xf4>)
 8001a98:	f043 0310 	orr.w	r3, r3, #16
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b29      	ldr	r3, [pc, #164]	; (8001b44 <HAL_TIM_MspPostInit+0xf4>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0310 	and.w	r3, r3, #16
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001aba:	2301      	movs	r3, #1
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4820      	ldr	r0, [pc, #128]	; (8001b48 <HAL_TIM_MspPostInit+0xf8>)
 8001ac6:	f000 fd83 	bl	80025d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001aca:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001adc:	2301      	movs	r3, #1
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4819      	ldr	r0, [pc, #100]	; (8001b4c <HAL_TIM_MspPostInit+0xfc>)
 8001ae8:	f000 fd72 	bl	80025d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001aec:	e023      	b.n	8001b36 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a17      	ldr	r2, [pc, #92]	; (8001b50 <HAL_TIM_MspPostInit+0x100>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d11e      	bne.n	8001b36 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af8:	2300      	movs	r3, #0
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <HAL_TIM_MspPostInit+0xf4>)
 8001afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b00:	4a10      	ldr	r2, [pc, #64]	; (8001b44 <HAL_TIM_MspPostInit+0xf4>)
 8001b02:	f043 0308 	orr.w	r3, r3, #8
 8001b06:	6313      	str	r3, [r2, #48]	; 0x30
 8001b08:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <HAL_TIM_MspPostInit+0xf4>)
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2300      	movs	r3, #0
 8001b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b26:	2302      	movs	r3, #2
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b2a:	f107 0314 	add.w	r3, r7, #20
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4808      	ldr	r0, [pc, #32]	; (8001b54 <HAL_TIM_MspPostInit+0x104>)
 8001b32:	f000 fd4d 	bl	80025d0 <HAL_GPIO_Init>
}
 8001b36:	bf00      	nop
 8001b38:	3728      	adds	r7, #40	; 0x28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40010000 	.word	0x40010000
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40020400 	.word	0x40020400
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40000800 	.word	0x40000800
 8001b54:	40020c00 	.word	0x40020c00

08001b58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08a      	sub	sp, #40	; 0x28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a19      	ldr	r2, [pc, #100]	; (8001bdc <HAL_UART_MspInit+0x84>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d12b      	bne.n	8001bd2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <HAL_UART_MspInit+0x88>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	4a17      	ldr	r2, [pc, #92]	; (8001be0 <HAL_UART_MspInit+0x88>)
 8001b84:	f043 0320 	orr.w	r3, r3, #32
 8001b88:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <HAL_UART_MspInit+0x88>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	f003 0320 	and.w	r3, r3, #32
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <HAL_UART_MspInit+0x88>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	4a10      	ldr	r2, [pc, #64]	; (8001be0 <HAL_UART_MspInit+0x88>)
 8001ba0:	f043 0304 	orr.w	r3, r3, #4
 8001ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <HAL_UART_MspInit+0x88>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	f003 0304 	and.w	r3, r3, #4
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bb2:	23c0      	movs	r3, #192	; 0xc0
 8001bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001bc2:	2308      	movs	r3, #8
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4805      	ldr	r0, [pc, #20]	; (8001be4 <HAL_UART_MspInit+0x8c>)
 8001bce:	f000 fcff 	bl	80025d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001bd2:	bf00      	nop
 8001bd4:	3728      	adds	r7, #40	; 0x28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40011400 	.word	0x40011400
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40020800 	.word	0x40020800

08001be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bec:	e7fe      	b.n	8001bec <NMI_Handler+0x4>

08001bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf2:	e7fe      	b.n	8001bf2 <HardFault_Handler+0x4>

08001bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <MemManage_Handler+0x4>

08001bfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bfe:	e7fe      	b.n	8001bfe <BusFault_Handler+0x4>

08001c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c04:	e7fe      	b.n	8001c04 <UsageFault_Handler+0x4>

08001c06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c34:	f000 f8e6 	bl	8001e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001c42:	f001 fdfb 	bl	800383c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200000b4 	.word	0x200000b4

08001c50 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001c54:	4806      	ldr	r0, [pc, #24]	; (8001c70 <USART6_IRQHandler+0x20>)
 8001c56:	f002 ff45 	bl	8004ae4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
  usartReceiveITEnable = 1;
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <USART6_IRQHandler+0x24>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]
  countReceive++;
 8001c60:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <USART6_IRQHandler+0x28>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	3301      	adds	r3, #1
 8001c66:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <USART6_IRQHandler+0x28>)
 8001c68:	6013      	str	r3, [r2, #0]
  /* USER CODE END USART6_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000144 	.word	0x20000144
 8001c74:	200001dc 	.word	0x200001dc
 8001c78:	20000194 	.word	0x20000194

08001c7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c84:	4a14      	ldr	r2, [pc, #80]	; (8001cd8 <_sbrk+0x5c>)
 8001c86:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <_sbrk+0x60>)
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c90:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <_sbrk+0x64>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d102      	bne.n	8001c9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c98:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <_sbrk+0x64>)
 8001c9a:	4a12      	ldr	r2, [pc, #72]	; (8001ce4 <_sbrk+0x68>)
 8001c9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c9e:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <_sbrk+0x64>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d207      	bcs.n	8001cbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cac:	f003 fe78 	bl	80059a0 <__errno>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	220c      	movs	r2, #12
 8001cb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cba:	e009      	b.n	8001cd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cbc:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <_sbrk+0x64>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cc2:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <_sbrk+0x64>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4413      	add	r3, r2
 8001cca:	4a05      	ldr	r2, [pc, #20]	; (8001ce0 <_sbrk+0x64>)
 8001ccc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cce:	68fb      	ldr	r3, [r7, #12]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20020000 	.word	0x20020000
 8001cdc:	00004000 	.word	0x00004000
 8001ce0:	20000208 	.word	0x20000208
 8001ce4:	20000240 	.word	0x20000240

08001ce8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <SystemInit+0x20>)
 8001cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf2:	4a05      	ldr	r2, [pc, #20]	; (8001d08 <SystemInit+0x20>)
 8001cf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d10:	480d      	ldr	r0, [pc, #52]	; (8001d48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d12:	490e      	ldr	r1, [pc, #56]	; (8001d4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d14:	4a0e      	ldr	r2, [pc, #56]	; (8001d50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d18:	e002      	b.n	8001d20 <LoopCopyDataInit>

08001d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d1e:	3304      	adds	r3, #4

08001d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d24:	d3f9      	bcc.n	8001d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d26:	4a0b      	ldr	r2, [pc, #44]	; (8001d54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d28:	4c0b      	ldr	r4, [pc, #44]	; (8001d58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d2c:	e001      	b.n	8001d32 <LoopFillZerobss>

08001d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d30:	3204      	adds	r2, #4

08001d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d34:	d3fb      	bcc.n	8001d2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d36:	f7ff ffd7 	bl	8001ce8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d3a:	f003 fe37 	bl	80059ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d3e:	f7fe fd25 	bl	800078c <main>
  bx  lr    
 8001d42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d4c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001d50:	08006474 	.word	0x08006474
  ldr r2, =_sbss
 8001d54:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001d58:	20000240 	.word	0x20000240

08001d5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d5c:	e7fe      	b.n	8001d5c <ADC_IRQHandler>
	...

08001d60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d64:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <HAL_Init+0x40>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a0d      	ldr	r2, [pc, #52]	; (8001da0 <HAL_Init+0x40>)
 8001d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d70:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <HAL_Init+0x40>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <HAL_Init+0x40>)
 8001d76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d7c:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <HAL_Init+0x40>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a07      	ldr	r2, [pc, #28]	; (8001da0 <HAL_Init+0x40>)
 8001d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d88:	2003      	movs	r0, #3
 8001d8a:	f000 f94f 	bl	800202c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d8e:	200f      	movs	r0, #15
 8001d90:	f000 f808 	bl	8001da4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d94:	f7ff fdce 	bl	8001934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40023c00 	.word	0x40023c00

08001da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dac:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <HAL_InitTick+0x54>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <HAL_InitTick+0x58>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	4619      	mov	r1, r3
 8001db6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 f967 	bl	8002096 <HAL_SYSTICK_Config>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e00e      	b.n	8001df0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b0f      	cmp	r3, #15
 8001dd6:	d80a      	bhi.n	8001dee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8001de0:	f000 f92f 	bl	8002042 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001de4:	4a06      	ldr	r2, [pc, #24]	; (8001e00 <HAL_InitTick+0x5c>)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
 8001dec:	e000      	b.n	8001df0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000024 	.word	0x20000024
 8001dfc:	2000002c 	.word	0x2000002c
 8001e00:	20000028 	.word	0x20000028

08001e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_IncTick+0x20>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_IncTick+0x24>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4413      	add	r3, r2
 8001e14:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <HAL_IncTick+0x24>)
 8001e16:	6013      	str	r3, [r2, #0]
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	2000002c 	.word	0x2000002c
 8001e28:	2000020c 	.word	0x2000020c

08001e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e30:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <HAL_GetTick+0x14>)
 8001e32:	681b      	ldr	r3, [r3, #0]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	2000020c 	.word	0x2000020c

08001e44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e4c:	f7ff ffee 	bl	8001e2c <HAL_GetTick>
 8001e50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5c:	d005      	beq.n	8001e6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <HAL_Delay+0x44>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4413      	add	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e6a:	bf00      	nop
 8001e6c:	f7ff ffde 	bl	8001e2c <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d8f7      	bhi.n	8001e6c <HAL_Delay+0x28>
  {
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	bf00      	nop
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	2000002c 	.word	0x2000002c

08001e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ebe:	4a04      	ldr	r2, [pc, #16]	; (8001ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	60d3      	str	r3, [r2, #12]
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed8:	4b04      	ldr	r3, [pc, #16]	; (8001eec <__NVIC_GetPriorityGrouping+0x18>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	0a1b      	lsrs	r3, r3, #8
 8001ede:	f003 0307 	and.w	r3, r3, #7
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	db0b      	blt.n	8001f1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	f003 021f 	and.w	r2, r3, #31
 8001f08:	4907      	ldr	r1, [pc, #28]	; (8001f28 <__NVIC_EnableIRQ+0x38>)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	095b      	lsrs	r3, r3, #5
 8001f10:	2001      	movs	r0, #1
 8001f12:	fa00 f202 	lsl.w	r2, r0, r2
 8001f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	e000e100 	.word	0xe000e100

08001f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	6039      	str	r1, [r7, #0]
 8001f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	db0a      	blt.n	8001f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	490c      	ldr	r1, [pc, #48]	; (8001f78 <__NVIC_SetPriority+0x4c>)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	0112      	lsls	r2, r2, #4
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	440b      	add	r3, r1
 8001f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f54:	e00a      	b.n	8001f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4908      	ldr	r1, [pc, #32]	; (8001f7c <__NVIC_SetPriority+0x50>)
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	3b04      	subs	r3, #4
 8001f64:	0112      	lsls	r2, r2, #4
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	440b      	add	r3, r1
 8001f6a:	761a      	strb	r2, [r3, #24]
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000e100 	.word	0xe000e100
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b089      	sub	sp, #36	; 0x24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f1c3 0307 	rsb	r3, r3, #7
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	bf28      	it	cs
 8001f9e:	2304      	movcs	r3, #4
 8001fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	2b06      	cmp	r3, #6
 8001fa8:	d902      	bls.n	8001fb0 <NVIC_EncodePriority+0x30>
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3b03      	subs	r3, #3
 8001fae:	e000      	b.n	8001fb2 <NVIC_EncodePriority+0x32>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43da      	mvns	r2, r3
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd2:	43d9      	mvns	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd8:	4313      	orrs	r3, r2
         );
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3724      	adds	r7, #36	; 0x24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
	...

08001fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ff8:	d301      	bcc.n	8001ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e00f      	b.n	800201e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <SysTick_Config+0x40>)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3b01      	subs	r3, #1
 8002004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002006:	210f      	movs	r1, #15
 8002008:	f04f 30ff 	mov.w	r0, #4294967295
 800200c:	f7ff ff8e 	bl	8001f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002010:	4b05      	ldr	r3, [pc, #20]	; (8002028 <SysTick_Config+0x40>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002016:	4b04      	ldr	r3, [pc, #16]	; (8002028 <SysTick_Config+0x40>)
 8002018:	2207      	movs	r2, #7
 800201a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	e000e010 	.word	0xe000e010

0800202c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff ff29 	bl	8001e8c <__NVIC_SetPriorityGrouping>
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002042:	b580      	push	{r7, lr}
 8002044:	b086      	sub	sp, #24
 8002046:	af00      	add	r7, sp, #0
 8002048:	4603      	mov	r3, r0
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	607a      	str	r2, [r7, #4]
 800204e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002054:	f7ff ff3e 	bl	8001ed4 <__NVIC_GetPriorityGrouping>
 8002058:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	68b9      	ldr	r1, [r7, #8]
 800205e:	6978      	ldr	r0, [r7, #20]
 8002060:	f7ff ff8e 	bl	8001f80 <NVIC_EncodePriority>
 8002064:	4602      	mov	r2, r0
 8002066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800206a:	4611      	mov	r1, r2
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff ff5d 	bl	8001f2c <__NVIC_SetPriority>
}
 8002072:	bf00      	nop
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	4603      	mov	r3, r0
 8002082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff ff31 	bl	8001ef0 <__NVIC_EnableIRQ>
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff ffa2 	bl	8001fe8 <SysTick_Config>
 80020a4:	4603      	mov	r3, r0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b084      	sub	sp, #16
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020bc:	f7ff feb6 	bl	8001e2c <HAL_GetTick>
 80020c0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d008      	beq.n	80020e0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2280      	movs	r2, #128	; 0x80
 80020d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e052      	b.n	8002186 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0216 	bic.w	r2, r2, #22
 80020ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	695a      	ldr	r2, [r3, #20]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020fe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002104:	2b00      	cmp	r3, #0
 8002106:	d103      	bne.n	8002110 <HAL_DMA_Abort+0x62>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800210c:	2b00      	cmp	r3, #0
 800210e:	d007      	beq.n	8002120 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 0208 	bic.w	r2, r2, #8
 800211e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0201 	bic.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002130:	e013      	b.n	800215a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002132:	f7ff fe7b 	bl	8001e2c <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b05      	cmp	r3, #5
 800213e:	d90c      	bls.n	800215a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2220      	movs	r2, #32
 8002144:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2203      	movs	r2, #3
 800214a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e015      	b.n	8002186 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1e4      	bne.n	8002132 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216c:	223f      	movs	r2, #63	; 0x3f
 800216e:	409a      	lsls	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d004      	beq.n	80021ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2280      	movs	r2, #128	; 0x80
 80021a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e00c      	b.n	80021c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2205      	movs	r2, #5
 80021b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0201 	bic.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
	...

080021d4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80021e6:	4b23      	ldr	r3, [pc, #140]	; (8002274 <HAL_FLASH_Program+0xa0>)
 80021e8:	7e1b      	ldrb	r3, [r3, #24]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d101      	bne.n	80021f2 <HAL_FLASH_Program+0x1e>
 80021ee:	2302      	movs	r3, #2
 80021f0:	e03b      	b.n	800226a <HAL_FLASH_Program+0x96>
 80021f2:	4b20      	ldr	r3, [pc, #128]	; (8002274 <HAL_FLASH_Program+0xa0>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80021fc:	f000 f870 	bl	80022e0 <FLASH_WaitForLastOperation>
 8002200:	4603      	mov	r3, r0
 8002202:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002204:	7dfb      	ldrb	r3, [r7, #23]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d12b      	bne.n	8002262 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d105      	bne.n	800221c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002210:	783b      	ldrb	r3, [r7, #0]
 8002212:	4619      	mov	r1, r3
 8002214:	68b8      	ldr	r0, [r7, #8]
 8002216:	f000 f91b 	bl	8002450 <FLASH_Program_Byte>
 800221a:	e016      	b.n	800224a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d105      	bne.n	800222e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002222:	883b      	ldrh	r3, [r7, #0]
 8002224:	4619      	mov	r1, r3
 8002226:	68b8      	ldr	r0, [r7, #8]
 8002228:	f000 f8ee 	bl	8002408 <FLASH_Program_HalfWord>
 800222c:	e00d      	b.n	800224a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2b02      	cmp	r3, #2
 8002232:	d105      	bne.n	8002240 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	4619      	mov	r1, r3
 8002238:	68b8      	ldr	r0, [r7, #8]
 800223a:	f000 f8c3 	bl	80023c4 <FLASH_Program_Word>
 800223e:	e004      	b.n	800224a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002240:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002244:	68b8      	ldr	r0, [r7, #8]
 8002246:	f000 f88b 	bl	8002360 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800224a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800224e:	f000 f847 	bl	80022e0 <FLASH_WaitForLastOperation>
 8002252:	4603      	mov	r3, r0
 8002254:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <HAL_FLASH_Program+0xa4>)
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	4a07      	ldr	r2, [pc, #28]	; (8002278 <HAL_FLASH_Program+0xa4>)
 800225c:	f023 0301 	bic.w	r3, r3, #1
 8002260:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002262:	4b04      	ldr	r3, [pc, #16]	; (8002274 <HAL_FLASH_Program+0xa0>)
 8002264:	2200      	movs	r2, #0
 8002266:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002268:	7dfb      	ldrb	r3, [r7, #23]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000210 	.word	0x20000210
 8002278:	40023c00 	.word	0x40023c00

0800227c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002286:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <HAL_FLASH_Unlock+0x38>)
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	2b00      	cmp	r3, #0
 800228c:	da0b      	bge.n	80022a6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800228e:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <HAL_FLASH_Unlock+0x38>)
 8002290:	4a09      	ldr	r2, [pc, #36]	; (80022b8 <HAL_FLASH_Unlock+0x3c>)
 8002292:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002294:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <HAL_FLASH_Unlock+0x38>)
 8002296:	4a09      	ldr	r2, [pc, #36]	; (80022bc <HAL_FLASH_Unlock+0x40>)
 8002298:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800229a:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <HAL_FLASH_Unlock+0x38>)
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	da01      	bge.n	80022a6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80022a6:	79fb      	ldrb	r3, [r7, #7]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	40023c00 	.word	0x40023c00
 80022b8:	45670123 	.word	0x45670123
 80022bc:	cdef89ab 	.word	0xcdef89ab

080022c0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80022c4:	4b05      	ldr	r3, [pc, #20]	; (80022dc <HAL_FLASH_Lock+0x1c>)
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	4a04      	ldr	r2, [pc, #16]	; (80022dc <HAL_FLASH_Lock+0x1c>)
 80022ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022ce:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	40023c00 	.word	0x40023c00

080022e0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80022ec:	4b1a      	ldr	r3, [pc, #104]	; (8002358 <FLASH_WaitForLastOperation+0x78>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80022f2:	f7ff fd9b 	bl	8001e2c <HAL_GetTick>
 80022f6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80022f8:	e010      	b.n	800231c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002300:	d00c      	beq.n	800231c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d007      	beq.n	8002318 <FLASH_WaitForLastOperation+0x38>
 8002308:	f7ff fd90 	bl	8001e2c <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	429a      	cmp	r2, r3
 8002316:	d201      	bcs.n	800231c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e019      	b.n	8002350 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800231c:	4b0f      	ldr	r3, [pc, #60]	; (800235c <FLASH_WaitForLastOperation+0x7c>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1e8      	bne.n	80022fa <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <FLASH_WaitForLastOperation+0x7c>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b00      	cmp	r3, #0
 8002332:	d002      	beq.n	800233a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002334:	4b09      	ldr	r3, [pc, #36]	; (800235c <FLASH_WaitForLastOperation+0x7c>)
 8002336:	2201      	movs	r2, #1
 8002338:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800233a:	4b08      	ldr	r3, [pc, #32]	; (800235c <FLASH_WaitForLastOperation+0x7c>)
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002346:	f000 f8a5 	bl	8002494 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800234e:	2300      	movs	r3, #0
  
}  
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	20000210 	.word	0x20000210
 800235c:	40023c00 	.word	0x40023c00

08002360 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800236c:	4b14      	ldr	r3, [pc, #80]	; (80023c0 <FLASH_Program_DoubleWord+0x60>)
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	4a13      	ldr	r2, [pc, #76]	; (80023c0 <FLASH_Program_DoubleWord+0x60>)
 8002372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002376:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002378:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <FLASH_Program_DoubleWord+0x60>)
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	4a10      	ldr	r2, [pc, #64]	; (80023c0 <FLASH_Program_DoubleWord+0x60>)
 800237e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002382:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002384:	4b0e      	ldr	r3, [pc, #56]	; (80023c0 <FLASH_Program_DoubleWord+0x60>)
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	4a0d      	ldr	r2, [pc, #52]	; (80023c0 <FLASH_Program_DoubleWord+0x60>)
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8002396:	f3bf 8f6f 	isb	sy
}
 800239a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800239c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	f04f 0300 	mov.w	r3, #0
 80023a8:	000a      	movs	r2, r1
 80023aa:	2300      	movs	r3, #0
 80023ac:	68f9      	ldr	r1, [r7, #12]
 80023ae:	3104      	adds	r1, #4
 80023b0:	4613      	mov	r3, r2
 80023b2:	600b      	str	r3, [r1, #0]
}
 80023b4:	bf00      	nop
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	40023c00 	.word	0x40023c00

080023c4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80023ce:	4b0d      	ldr	r3, [pc, #52]	; (8002404 <FLASH_Program_Word+0x40>)
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	4a0c      	ldr	r2, [pc, #48]	; (8002404 <FLASH_Program_Word+0x40>)
 80023d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023d8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80023da:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <FLASH_Program_Word+0x40>)
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	4a09      	ldr	r2, [pc, #36]	; (8002404 <FLASH_Program_Word+0x40>)
 80023e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023e4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80023e6:	4b07      	ldr	r3, [pc, #28]	; (8002404 <FLASH_Program_Word+0x40>)
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	4a06      	ldr	r2, [pc, #24]	; (8002404 <FLASH_Program_Word+0x40>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	601a      	str	r2, [r3, #0]
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	40023c00 	.word	0x40023c00

08002408 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002414:	4b0d      	ldr	r3, [pc, #52]	; (800244c <FLASH_Program_HalfWord+0x44>)
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	4a0c      	ldr	r2, [pc, #48]	; (800244c <FLASH_Program_HalfWord+0x44>)
 800241a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800241e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002420:	4b0a      	ldr	r3, [pc, #40]	; (800244c <FLASH_Program_HalfWord+0x44>)
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	4a09      	ldr	r2, [pc, #36]	; (800244c <FLASH_Program_HalfWord+0x44>)
 8002426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800242a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800242c:	4b07      	ldr	r3, [pc, #28]	; (800244c <FLASH_Program_HalfWord+0x44>)
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	4a06      	ldr	r2, [pc, #24]	; (800244c <FLASH_Program_HalfWord+0x44>)
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	887a      	ldrh	r2, [r7, #2]
 800243c:	801a      	strh	r2, [r3, #0]
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40023c00 	.word	0x40023c00

08002450 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <FLASH_Program_Byte+0x40>)
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	4a0b      	ldr	r2, [pc, #44]	; (8002490 <FLASH_Program_Byte+0x40>)
 8002462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002466:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002468:	4b09      	ldr	r3, [pc, #36]	; (8002490 <FLASH_Program_Byte+0x40>)
 800246a:	4a09      	ldr	r2, [pc, #36]	; (8002490 <FLASH_Program_Byte+0x40>)
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002470:	4b07      	ldr	r3, [pc, #28]	; (8002490 <FLASH_Program_Byte+0x40>)
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	4a06      	ldr	r2, [pc, #24]	; (8002490 <FLASH_Program_Byte+0x40>)
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	78fa      	ldrb	r2, [r7, #3]
 8002480:	701a      	strb	r2, [r3, #0]
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40023c00 	.word	0x40023c00

08002494 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002498:	4b27      	ldr	r3, [pc, #156]	; (8002538 <FLASH_SetErrorCode+0xa4>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f003 0310 	and.w	r3, r3, #16
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d008      	beq.n	80024b6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80024a4:	4b25      	ldr	r3, [pc, #148]	; (800253c <FLASH_SetErrorCode+0xa8>)
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	f043 0310 	orr.w	r3, r3, #16
 80024ac:	4a23      	ldr	r2, [pc, #140]	; (800253c <FLASH_SetErrorCode+0xa8>)
 80024ae:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80024b0:	4b21      	ldr	r3, [pc, #132]	; (8002538 <FLASH_SetErrorCode+0xa4>)
 80024b2:	2210      	movs	r2, #16
 80024b4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80024b6:	4b20      	ldr	r3, [pc, #128]	; (8002538 <FLASH_SetErrorCode+0xa4>)
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	f003 0320 	and.w	r3, r3, #32
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d008      	beq.n	80024d4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80024c2:	4b1e      	ldr	r3, [pc, #120]	; (800253c <FLASH_SetErrorCode+0xa8>)
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	f043 0308 	orr.w	r3, r3, #8
 80024ca:	4a1c      	ldr	r2, [pc, #112]	; (800253c <FLASH_SetErrorCode+0xa8>)
 80024cc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80024ce:	4b1a      	ldr	r3, [pc, #104]	; (8002538 <FLASH_SetErrorCode+0xa4>)
 80024d0:	2220      	movs	r2, #32
 80024d2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80024d4:	4b18      	ldr	r3, [pc, #96]	; (8002538 <FLASH_SetErrorCode+0xa4>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80024e0:	4b16      	ldr	r3, [pc, #88]	; (800253c <FLASH_SetErrorCode+0xa8>)
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	f043 0304 	orr.w	r3, r3, #4
 80024e8:	4a14      	ldr	r2, [pc, #80]	; (800253c <FLASH_SetErrorCode+0xa8>)
 80024ea:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80024ec:	4b12      	ldr	r3, [pc, #72]	; (8002538 <FLASH_SetErrorCode+0xa4>)
 80024ee:	2240      	movs	r2, #64	; 0x40
 80024f0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80024f2:	4b11      	ldr	r3, [pc, #68]	; (8002538 <FLASH_SetErrorCode+0xa4>)
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d008      	beq.n	8002510 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80024fe:	4b0f      	ldr	r3, [pc, #60]	; (800253c <FLASH_SetErrorCode+0xa8>)
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	f043 0302 	orr.w	r3, r3, #2
 8002506:	4a0d      	ldr	r2, [pc, #52]	; (800253c <FLASH_SetErrorCode+0xa8>)
 8002508:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800250a:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <FLASH_SetErrorCode+0xa4>)
 800250c:	2280      	movs	r2, #128	; 0x80
 800250e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002510:	4b09      	ldr	r3, [pc, #36]	; (8002538 <FLASH_SetErrorCode+0xa4>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d008      	beq.n	800252e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800251c:	4b07      	ldr	r3, [pc, #28]	; (800253c <FLASH_SetErrorCode+0xa8>)
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	f043 0320 	orr.w	r3, r3, #32
 8002524:	4a05      	ldr	r2, [pc, #20]	; (800253c <FLASH_SetErrorCode+0xa8>)
 8002526:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002528:	4b03      	ldr	r3, [pc, #12]	; (8002538 <FLASH_SetErrorCode+0xa4>)
 800252a:	2202      	movs	r2, #2
 800252c:	60da      	str	r2, [r3, #12]
  }
}
 800252e:	bf00      	nop
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	40023c00 	.word	0x40023c00
 800253c:	20000210 	.word	0x20000210

08002540 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002550:	78fb      	ldrb	r3, [r7, #3]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d102      	bne.n	800255c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	e010      	b.n	800257e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800255c:	78fb      	ldrb	r3, [r7, #3]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d103      	bne.n	800256a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002562:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	e009      	b.n	800257e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800256a:	78fb      	ldrb	r3, [r7, #3]
 800256c:	2b02      	cmp	r3, #2
 800256e:	d103      	bne.n	8002578 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	e002      	b.n	800257e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002578:	f44f 7340 	mov.w	r3, #768	; 0x300
 800257c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800257e:	4b13      	ldr	r3, [pc, #76]	; (80025cc <FLASH_Erase_Sector+0x8c>)
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	4a12      	ldr	r2, [pc, #72]	; (80025cc <FLASH_Erase_Sector+0x8c>)
 8002584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002588:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800258a:	4b10      	ldr	r3, [pc, #64]	; (80025cc <FLASH_Erase_Sector+0x8c>)
 800258c:	691a      	ldr	r2, [r3, #16]
 800258e:	490f      	ldr	r1, [pc, #60]	; (80025cc <FLASH_Erase_Sector+0x8c>)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4313      	orrs	r3, r2
 8002594:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002596:	4b0d      	ldr	r3, [pc, #52]	; (80025cc <FLASH_Erase_Sector+0x8c>)
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	4a0c      	ldr	r2, [pc, #48]	; (80025cc <FLASH_Erase_Sector+0x8c>)
 800259c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80025a0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80025a2:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <FLASH_Erase_Sector+0x8c>)
 80025a4:	691a      	ldr	r2, [r3, #16]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4313      	orrs	r3, r2
 80025ac:	4a07      	ldr	r2, [pc, #28]	; (80025cc <FLASH_Erase_Sector+0x8c>)
 80025ae:	f043 0302 	orr.w	r3, r3, #2
 80025b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80025b4:	4b05      	ldr	r3, [pc, #20]	; (80025cc <FLASH_Erase_Sector+0x8c>)
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	4a04      	ldr	r2, [pc, #16]	; (80025cc <FLASH_Erase_Sector+0x8c>)
 80025ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025be:	6113      	str	r3, [r2, #16]
}
 80025c0:	bf00      	nop
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	40023c00 	.word	0x40023c00

080025d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b089      	sub	sp, #36	; 0x24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025de:	2300      	movs	r3, #0
 80025e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025e6:	2300      	movs	r3, #0
 80025e8:	61fb      	str	r3, [r7, #28]
 80025ea:	e16b      	b.n	80028c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025ec:	2201      	movs	r2, #1
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	4013      	ands	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	429a      	cmp	r2, r3
 8002606:	f040 815a 	bne.w	80028be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	2b01      	cmp	r3, #1
 8002614:	d005      	beq.n	8002622 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800261e:	2b02      	cmp	r3, #2
 8002620:	d130      	bne.n	8002684 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	2203      	movs	r2, #3
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43db      	mvns	r3, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4013      	ands	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4313      	orrs	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002658:	2201      	movs	r2, #1
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	091b      	lsrs	r3, r3, #4
 800266e:	f003 0201 	and.w	r2, r3, #1
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	2b03      	cmp	r3, #3
 800268e:	d017      	beq.n	80026c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	2203      	movs	r2, #3
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d123      	bne.n	8002714 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	08da      	lsrs	r2, r3, #3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3208      	adds	r2, #8
 80026d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	220f      	movs	r2, #15
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	691a      	ldr	r2, [r3, #16]
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	08da      	lsrs	r2, r3, #3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3208      	adds	r2, #8
 800270e:	69b9      	ldr	r1, [r7, #24]
 8002710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	2203      	movs	r2, #3
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 0203 	and.w	r2, r3, #3
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4313      	orrs	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 80b4 	beq.w	80028be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	4b60      	ldr	r3, [pc, #384]	; (80028dc <HAL_GPIO_Init+0x30c>)
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	4a5f      	ldr	r2, [pc, #380]	; (80028dc <HAL_GPIO_Init+0x30c>)
 8002760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002764:	6453      	str	r3, [r2, #68]	; 0x44
 8002766:	4b5d      	ldr	r3, [pc, #372]	; (80028dc <HAL_GPIO_Init+0x30c>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002772:	4a5b      	ldr	r2, [pc, #364]	; (80028e0 <HAL_GPIO_Init+0x310>)
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	089b      	lsrs	r3, r3, #2
 8002778:	3302      	adds	r3, #2
 800277a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800277e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	220f      	movs	r2, #15
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43db      	mvns	r3, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4013      	ands	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a52      	ldr	r2, [pc, #328]	; (80028e4 <HAL_GPIO_Init+0x314>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d02b      	beq.n	80027f6 <HAL_GPIO_Init+0x226>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a51      	ldr	r2, [pc, #324]	; (80028e8 <HAL_GPIO_Init+0x318>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d025      	beq.n	80027f2 <HAL_GPIO_Init+0x222>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a50      	ldr	r2, [pc, #320]	; (80028ec <HAL_GPIO_Init+0x31c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d01f      	beq.n	80027ee <HAL_GPIO_Init+0x21e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a4f      	ldr	r2, [pc, #316]	; (80028f0 <HAL_GPIO_Init+0x320>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d019      	beq.n	80027ea <HAL_GPIO_Init+0x21a>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a4e      	ldr	r2, [pc, #312]	; (80028f4 <HAL_GPIO_Init+0x324>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d013      	beq.n	80027e6 <HAL_GPIO_Init+0x216>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a4d      	ldr	r2, [pc, #308]	; (80028f8 <HAL_GPIO_Init+0x328>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d00d      	beq.n	80027e2 <HAL_GPIO_Init+0x212>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a4c      	ldr	r2, [pc, #304]	; (80028fc <HAL_GPIO_Init+0x32c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d007      	beq.n	80027de <HAL_GPIO_Init+0x20e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a4b      	ldr	r2, [pc, #300]	; (8002900 <HAL_GPIO_Init+0x330>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d101      	bne.n	80027da <HAL_GPIO_Init+0x20a>
 80027d6:	2307      	movs	r3, #7
 80027d8:	e00e      	b.n	80027f8 <HAL_GPIO_Init+0x228>
 80027da:	2308      	movs	r3, #8
 80027dc:	e00c      	b.n	80027f8 <HAL_GPIO_Init+0x228>
 80027de:	2306      	movs	r3, #6
 80027e0:	e00a      	b.n	80027f8 <HAL_GPIO_Init+0x228>
 80027e2:	2305      	movs	r3, #5
 80027e4:	e008      	b.n	80027f8 <HAL_GPIO_Init+0x228>
 80027e6:	2304      	movs	r3, #4
 80027e8:	e006      	b.n	80027f8 <HAL_GPIO_Init+0x228>
 80027ea:	2303      	movs	r3, #3
 80027ec:	e004      	b.n	80027f8 <HAL_GPIO_Init+0x228>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e002      	b.n	80027f8 <HAL_GPIO_Init+0x228>
 80027f2:	2301      	movs	r3, #1
 80027f4:	e000      	b.n	80027f8 <HAL_GPIO_Init+0x228>
 80027f6:	2300      	movs	r3, #0
 80027f8:	69fa      	ldr	r2, [r7, #28]
 80027fa:	f002 0203 	and.w	r2, r2, #3
 80027fe:	0092      	lsls	r2, r2, #2
 8002800:	4093      	lsls	r3, r2
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002808:	4935      	ldr	r1, [pc, #212]	; (80028e0 <HAL_GPIO_Init+0x310>)
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	089b      	lsrs	r3, r3, #2
 800280e:	3302      	adds	r3, #2
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002816:	4b3b      	ldr	r3, [pc, #236]	; (8002904 <HAL_GPIO_Init+0x334>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	43db      	mvns	r3, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4013      	ands	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	4313      	orrs	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800283a:	4a32      	ldr	r2, [pc, #200]	; (8002904 <HAL_GPIO_Init+0x334>)
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002840:	4b30      	ldr	r3, [pc, #192]	; (8002904 <HAL_GPIO_Init+0x334>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	4313      	orrs	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002864:	4a27      	ldr	r2, [pc, #156]	; (8002904 <HAL_GPIO_Init+0x334>)
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800286a:	4b26      	ldr	r3, [pc, #152]	; (8002904 <HAL_GPIO_Init+0x334>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	43db      	mvns	r3, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4013      	ands	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800288e:	4a1d      	ldr	r2, [pc, #116]	; (8002904 <HAL_GPIO_Init+0x334>)
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002894:	4b1b      	ldr	r3, [pc, #108]	; (8002904 <HAL_GPIO_Init+0x334>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	43db      	mvns	r3, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028b8:	4a12      	ldr	r2, [pc, #72]	; (8002904 <HAL_GPIO_Init+0x334>)
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	3301      	adds	r3, #1
 80028c2:	61fb      	str	r3, [r7, #28]
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	2b0f      	cmp	r3, #15
 80028c8:	f67f ae90 	bls.w	80025ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028cc:	bf00      	nop
 80028ce:	bf00      	nop
 80028d0:	3724      	adds	r7, #36	; 0x24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40013800 	.word	0x40013800
 80028e4:	40020000 	.word	0x40020000
 80028e8:	40020400 	.word	0x40020400
 80028ec:	40020800 	.word	0x40020800
 80028f0:	40020c00 	.word	0x40020c00
 80028f4:	40021000 	.word	0x40021000
 80028f8:	40021400 	.word	0x40021400
 80028fc:	40021800 	.word	0x40021800
 8002900:	40021c00 	.word	0x40021c00
 8002904:	40013c00 	.word	0x40013c00

08002908 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e267      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d075      	beq.n	8002a12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002926:	4b88      	ldr	r3, [pc, #544]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	2b04      	cmp	r3, #4
 8002930:	d00c      	beq.n	800294c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002932:	4b85      	ldr	r3, [pc, #532]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800293a:	2b08      	cmp	r3, #8
 800293c:	d112      	bne.n	8002964 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800293e:	4b82      	ldr	r3, [pc, #520]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002946:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800294a:	d10b      	bne.n	8002964 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800294c:	4b7e      	ldr	r3, [pc, #504]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d05b      	beq.n	8002a10 <HAL_RCC_OscConfig+0x108>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d157      	bne.n	8002a10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e242      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800296c:	d106      	bne.n	800297c <HAL_RCC_OscConfig+0x74>
 800296e:	4b76      	ldr	r3, [pc, #472]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a75      	ldr	r2, [pc, #468]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	e01d      	b.n	80029b8 <HAL_RCC_OscConfig+0xb0>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002984:	d10c      	bne.n	80029a0 <HAL_RCC_OscConfig+0x98>
 8002986:	4b70      	ldr	r3, [pc, #448]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a6f      	ldr	r2, [pc, #444]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 800298c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	4b6d      	ldr	r3, [pc, #436]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a6c      	ldr	r2, [pc, #432]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	e00b      	b.n	80029b8 <HAL_RCC_OscConfig+0xb0>
 80029a0:	4b69      	ldr	r3, [pc, #420]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a68      	ldr	r2, [pc, #416]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	4b66      	ldr	r3, [pc, #408]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a65      	ldr	r2, [pc, #404]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d013      	beq.n	80029e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c0:	f7ff fa34 	bl	8001e2c <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c8:	f7ff fa30 	bl	8001e2c <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b64      	cmp	r3, #100	; 0x64
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e207      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029da:	4b5b      	ldr	r3, [pc, #364]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0xc0>
 80029e6:	e014      	b.n	8002a12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e8:	f7ff fa20 	bl	8001e2c <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f0:	f7ff fa1c 	bl	8001e2c <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b64      	cmp	r3, #100	; 0x64
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e1f3      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a02:	4b51      	ldr	r3, [pc, #324]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0xe8>
 8002a0e:	e000      	b.n	8002a12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d063      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a1e:	4b4a      	ldr	r3, [pc, #296]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00b      	beq.n	8002a42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a2a:	4b47      	ldr	r3, [pc, #284]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d11c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a36:	4b44      	ldr	r3, [pc, #272]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d116      	bne.n	8002a70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a42:	4b41      	ldr	r3, [pc, #260]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d005      	beq.n	8002a5a <HAL_RCC_OscConfig+0x152>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d001      	beq.n	8002a5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e1c7      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5a:	4b3b      	ldr	r3, [pc, #236]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4937      	ldr	r1, [pc, #220]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a6e:	e03a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d020      	beq.n	8002aba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a78:	4b34      	ldr	r3, [pc, #208]	; (8002b4c <HAL_RCC_OscConfig+0x244>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7e:	f7ff f9d5 	bl	8001e2c <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a86:	f7ff f9d1 	bl	8001e2c <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e1a8      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a98:	4b2b      	ldr	r3, [pc, #172]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0f0      	beq.n	8002a86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa4:	4b28      	ldr	r3, [pc, #160]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4925      	ldr	r1, [pc, #148]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	600b      	str	r3, [r1, #0]
 8002ab8:	e015      	b.n	8002ae6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aba:	4b24      	ldr	r3, [pc, #144]	; (8002b4c <HAL_RCC_OscConfig+0x244>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac0:	f7ff f9b4 	bl	8001e2c <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ac8:	f7ff f9b0 	bl	8001e2c <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e187      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ada:	4b1b      	ldr	r3, [pc, #108]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f0      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d036      	beq.n	8002b60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d016      	beq.n	8002b28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002afa:	4b15      	ldr	r3, [pc, #84]	; (8002b50 <HAL_RCC_OscConfig+0x248>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b00:	f7ff f994 	bl	8001e2c <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b08:	f7ff f990 	bl	8001e2c <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e167      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b1a:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0x200>
 8002b26:	e01b      	b.n	8002b60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b28:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <HAL_RCC_OscConfig+0x248>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b2e:	f7ff f97d 	bl	8001e2c <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b34:	e00e      	b.n	8002b54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b36:	f7ff f979 	bl	8001e2c <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d907      	bls.n	8002b54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e150      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	42470000 	.word	0x42470000
 8002b50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b54:	4b88      	ldr	r3, [pc, #544]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1ea      	bne.n	8002b36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 8097 	beq.w	8002c9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b72:	4b81      	ldr	r3, [pc, #516]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10f      	bne.n	8002b9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	4b7d      	ldr	r3, [pc, #500]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	4a7c      	ldr	r2, [pc, #496]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8e:	4b7a      	ldr	r3, [pc, #488]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b96:	60bb      	str	r3, [r7, #8]
 8002b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9e:	4b77      	ldr	r3, [pc, #476]	; (8002d7c <HAL_RCC_OscConfig+0x474>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d118      	bne.n	8002bdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002baa:	4b74      	ldr	r3, [pc, #464]	; (8002d7c <HAL_RCC_OscConfig+0x474>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a73      	ldr	r2, [pc, #460]	; (8002d7c <HAL_RCC_OscConfig+0x474>)
 8002bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bb6:	f7ff f939 	bl	8001e2c <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bbe:	f7ff f935 	bl	8001e2c <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e10c      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd0:	4b6a      	ldr	r3, [pc, #424]	; (8002d7c <HAL_RCC_OscConfig+0x474>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0f0      	beq.n	8002bbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d106      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x2ea>
 8002be4:	4b64      	ldr	r3, [pc, #400]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be8:	4a63      	ldr	r2, [pc, #396]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf0:	e01c      	b.n	8002c2c <HAL_RCC_OscConfig+0x324>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2b05      	cmp	r3, #5
 8002bf8:	d10c      	bne.n	8002c14 <HAL_RCC_OscConfig+0x30c>
 8002bfa:	4b5f      	ldr	r3, [pc, #380]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfe:	4a5e      	ldr	r2, [pc, #376]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c00:	f043 0304 	orr.w	r3, r3, #4
 8002c04:	6713      	str	r3, [r2, #112]	; 0x70
 8002c06:	4b5c      	ldr	r3, [pc, #368]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0a:	4a5b      	ldr	r2, [pc, #364]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	6713      	str	r3, [r2, #112]	; 0x70
 8002c12:	e00b      	b.n	8002c2c <HAL_RCC_OscConfig+0x324>
 8002c14:	4b58      	ldr	r3, [pc, #352]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c18:	4a57      	ldr	r2, [pc, #348]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c1a:	f023 0301 	bic.w	r3, r3, #1
 8002c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c20:	4b55      	ldr	r3, [pc, #340]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c24:	4a54      	ldr	r2, [pc, #336]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c26:	f023 0304 	bic.w	r3, r3, #4
 8002c2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d015      	beq.n	8002c60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c34:	f7ff f8fa 	bl	8001e2c <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3a:	e00a      	b.n	8002c52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c3c:	f7ff f8f6 	bl	8001e2c <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e0cb      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c52:	4b49      	ldr	r3, [pc, #292]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0ee      	beq.n	8002c3c <HAL_RCC_OscConfig+0x334>
 8002c5e:	e014      	b.n	8002c8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c60:	f7ff f8e4 	bl	8001e2c <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c66:	e00a      	b.n	8002c7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c68:	f7ff f8e0 	bl	8001e2c <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e0b5      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c7e:	4b3e      	ldr	r3, [pc, #248]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1ee      	bne.n	8002c68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c8a:	7dfb      	ldrb	r3, [r7, #23]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d105      	bne.n	8002c9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c90:	4b39      	ldr	r3, [pc, #228]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	4a38      	ldr	r2, [pc, #224]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 80a1 	beq.w	8002de8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ca6:	4b34      	ldr	r3, [pc, #208]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d05c      	beq.n	8002d6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d141      	bne.n	8002d3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cba:	4b31      	ldr	r3, [pc, #196]	; (8002d80 <HAL_RCC_OscConfig+0x478>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc0:	f7ff f8b4 	bl	8001e2c <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc8:	f7ff f8b0 	bl	8001e2c <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e087      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cda:	4b27      	ldr	r3, [pc, #156]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69da      	ldr	r2, [r3, #28]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf4:	019b      	lsls	r3, r3, #6
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfc:	085b      	lsrs	r3, r3, #1
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	041b      	lsls	r3, r3, #16
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	061b      	lsls	r3, r3, #24
 8002d0a:	491b      	ldr	r1, [pc, #108]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d10:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <HAL_RCC_OscConfig+0x478>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d16:	f7ff f889 	bl	8001e2c <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d1e:	f7ff f885 	bl	8001e2c <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e05c      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d30:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f0      	beq.n	8002d1e <HAL_RCC_OscConfig+0x416>
 8002d3c:	e054      	b.n	8002de8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3e:	4b10      	ldr	r3, [pc, #64]	; (8002d80 <HAL_RCC_OscConfig+0x478>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d44:	f7ff f872 	bl	8001e2c <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4c:	f7ff f86e 	bl	8001e2c <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e045      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d5e:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x444>
 8002d6a:	e03d      	b.n	8002de8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d107      	bne.n	8002d84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e038      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	40007000 	.word	0x40007000
 8002d80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d84:	4b1b      	ldr	r3, [pc, #108]	; (8002df4 <HAL_RCC_OscConfig+0x4ec>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d028      	beq.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d121      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d11a      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002db4:	4013      	ands	r3, r2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d111      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dca:	085b      	lsrs	r3, r3, #1
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d107      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d001      	beq.n	8002de8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e000      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40023800 	.word	0x40023800

08002df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0cc      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e0c:	4b68      	ldr	r3, [pc, #416]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d90c      	bls.n	8002e34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1a:	4b65      	ldr	r3, [pc, #404]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e22:	4b63      	ldr	r3, [pc, #396]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d001      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e0b8      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d020      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e4c:	4b59      	ldr	r3, [pc, #356]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	4a58      	ldr	r2, [pc, #352]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d005      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e64:	4b53      	ldr	r3, [pc, #332]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	4a52      	ldr	r2, [pc, #328]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e70:	4b50      	ldr	r3, [pc, #320]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	494d      	ldr	r1, [pc, #308]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d044      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d107      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e96:	4b47      	ldr	r3, [pc, #284]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d119      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e07f      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d003      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d107      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eb6:	4b3f      	ldr	r3, [pc, #252]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d109      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e06f      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec6:	4b3b      	ldr	r3, [pc, #236]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e067      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ed6:	4b37      	ldr	r3, [pc, #220]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f023 0203 	bic.w	r2, r3, #3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	4934      	ldr	r1, [pc, #208]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ee8:	f7fe ffa0 	bl	8001e2c <HAL_GetTick>
 8002eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eee:	e00a      	b.n	8002f06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef0:	f7fe ff9c 	bl	8001e2c <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e04f      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f06:	4b2b      	ldr	r3, [pc, #172]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 020c 	and.w	r2, r3, #12
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d1eb      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f18:	4b25      	ldr	r3, [pc, #148]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d20c      	bcs.n	8002f40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f26:	4b22      	ldr	r3, [pc, #136]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2e:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e032      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f4c:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	4916      	ldr	r1, [pc, #88]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d009      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f6a:	4b12      	ldr	r3, [pc, #72]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	490e      	ldr	r1, [pc, #56]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f7e:	f000 f821 	bl	8002fc4 <HAL_RCC_GetSysClockFreq>
 8002f82:	4602      	mov	r2, r0
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	490a      	ldr	r1, [pc, #40]	; (8002fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f90:	5ccb      	ldrb	r3, [r1, r3]
 8002f92:	fa22 f303 	lsr.w	r3, r2, r3
 8002f96:	4a09      	ldr	r2, [pc, #36]	; (8002fbc <HAL_RCC_ClockConfig+0x1c4>)
 8002f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f9a:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fe ff00 	bl	8001da4 <HAL_InitTick>

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40023c00 	.word	0x40023c00
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	08006418 	.word	0x08006418
 8002fbc:	20000024 	.word	0x20000024
 8002fc0:	20000028 	.word	0x20000028

08002fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fc8:	b094      	sub	sp, #80	; 0x50
 8002fca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	647b      	str	r3, [r7, #68]	; 0x44
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fdc:	4b79      	ldr	r3, [pc, #484]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 030c 	and.w	r3, r3, #12
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	d00d      	beq.n	8003004 <HAL_RCC_GetSysClockFreq+0x40>
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	f200 80e1 	bhi.w	80031b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d003      	beq.n	8002ffe <HAL_RCC_GetSysClockFreq+0x3a>
 8002ff6:	e0db      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ff8:	4b73      	ldr	r3, [pc, #460]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ffa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ffc:	e0db      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ffe:	4b73      	ldr	r3, [pc, #460]	; (80031cc <HAL_RCC_GetSysClockFreq+0x208>)
 8003000:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003002:	e0d8      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003004:	4b6f      	ldr	r3, [pc, #444]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800300c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800300e:	4b6d      	ldr	r3, [pc, #436]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d063      	beq.n	80030e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800301a:	4b6a      	ldr	r3, [pc, #424]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	099b      	lsrs	r3, r3, #6
 8003020:	2200      	movs	r2, #0
 8003022:	63bb      	str	r3, [r7, #56]	; 0x38
 8003024:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800302c:	633b      	str	r3, [r7, #48]	; 0x30
 800302e:	2300      	movs	r3, #0
 8003030:	637b      	str	r3, [r7, #52]	; 0x34
 8003032:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003036:	4622      	mov	r2, r4
 8003038:	462b      	mov	r3, r5
 800303a:	f04f 0000 	mov.w	r0, #0
 800303e:	f04f 0100 	mov.w	r1, #0
 8003042:	0159      	lsls	r1, r3, #5
 8003044:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003048:	0150      	lsls	r0, r2, #5
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4621      	mov	r1, r4
 8003050:	1a51      	subs	r1, r2, r1
 8003052:	6139      	str	r1, [r7, #16]
 8003054:	4629      	mov	r1, r5
 8003056:	eb63 0301 	sbc.w	r3, r3, r1
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	f04f 0200 	mov.w	r2, #0
 8003060:	f04f 0300 	mov.w	r3, #0
 8003064:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003068:	4659      	mov	r1, fp
 800306a:	018b      	lsls	r3, r1, #6
 800306c:	4651      	mov	r1, sl
 800306e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003072:	4651      	mov	r1, sl
 8003074:	018a      	lsls	r2, r1, #6
 8003076:	4651      	mov	r1, sl
 8003078:	ebb2 0801 	subs.w	r8, r2, r1
 800307c:	4659      	mov	r1, fp
 800307e:	eb63 0901 	sbc.w	r9, r3, r1
 8003082:	f04f 0200 	mov.w	r2, #0
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800308e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003092:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003096:	4690      	mov	r8, r2
 8003098:	4699      	mov	r9, r3
 800309a:	4623      	mov	r3, r4
 800309c:	eb18 0303 	adds.w	r3, r8, r3
 80030a0:	60bb      	str	r3, [r7, #8]
 80030a2:	462b      	mov	r3, r5
 80030a4:	eb49 0303 	adc.w	r3, r9, r3
 80030a8:	60fb      	str	r3, [r7, #12]
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80030b6:	4629      	mov	r1, r5
 80030b8:	024b      	lsls	r3, r1, #9
 80030ba:	4621      	mov	r1, r4
 80030bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030c0:	4621      	mov	r1, r4
 80030c2:	024a      	lsls	r2, r1, #9
 80030c4:	4610      	mov	r0, r2
 80030c6:	4619      	mov	r1, r3
 80030c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030ca:	2200      	movs	r2, #0
 80030cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030d4:	f7fd f8cc 	bl	8000270 <__aeabi_uldivmod>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4613      	mov	r3, r2
 80030de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030e0:	e058      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030e2:	4b38      	ldr	r3, [pc, #224]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	099b      	lsrs	r3, r3, #6
 80030e8:	2200      	movs	r2, #0
 80030ea:	4618      	mov	r0, r3
 80030ec:	4611      	mov	r1, r2
 80030ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030f2:	623b      	str	r3, [r7, #32]
 80030f4:	2300      	movs	r3, #0
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
 80030f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030fc:	4642      	mov	r2, r8
 80030fe:	464b      	mov	r3, r9
 8003100:	f04f 0000 	mov.w	r0, #0
 8003104:	f04f 0100 	mov.w	r1, #0
 8003108:	0159      	lsls	r1, r3, #5
 800310a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800310e:	0150      	lsls	r0, r2, #5
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	4641      	mov	r1, r8
 8003116:	ebb2 0a01 	subs.w	sl, r2, r1
 800311a:	4649      	mov	r1, r9
 800311c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800312c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003130:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003134:	ebb2 040a 	subs.w	r4, r2, sl
 8003138:	eb63 050b 	sbc.w	r5, r3, fp
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	f04f 0300 	mov.w	r3, #0
 8003144:	00eb      	lsls	r3, r5, #3
 8003146:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800314a:	00e2      	lsls	r2, r4, #3
 800314c:	4614      	mov	r4, r2
 800314e:	461d      	mov	r5, r3
 8003150:	4643      	mov	r3, r8
 8003152:	18e3      	adds	r3, r4, r3
 8003154:	603b      	str	r3, [r7, #0]
 8003156:	464b      	mov	r3, r9
 8003158:	eb45 0303 	adc.w	r3, r5, r3
 800315c:	607b      	str	r3, [r7, #4]
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	e9d7 4500 	ldrd	r4, r5, [r7]
 800316a:	4629      	mov	r1, r5
 800316c:	028b      	lsls	r3, r1, #10
 800316e:	4621      	mov	r1, r4
 8003170:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003174:	4621      	mov	r1, r4
 8003176:	028a      	lsls	r2, r1, #10
 8003178:	4610      	mov	r0, r2
 800317a:	4619      	mov	r1, r3
 800317c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800317e:	2200      	movs	r2, #0
 8003180:	61bb      	str	r3, [r7, #24]
 8003182:	61fa      	str	r2, [r7, #28]
 8003184:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003188:	f7fd f872 	bl	8000270 <__aeabi_uldivmod>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4613      	mov	r3, r2
 8003192:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003194:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	0c1b      	lsrs	r3, r3, #16
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	3301      	adds	r3, #1
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80031a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031ae:	e002      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80031b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3750      	adds	r7, #80	; 0x50
 80031bc:	46bd      	mov	sp, r7
 80031be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031c2:	bf00      	nop
 80031c4:	40023800 	.word	0x40023800
 80031c8:	00f42400 	.word	0x00f42400
 80031cc:	007a1200 	.word	0x007a1200

080031d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031d4:	4b03      	ldr	r3, [pc, #12]	; (80031e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031d6:	681b      	ldr	r3, [r3, #0]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	20000024 	.word	0x20000024

080031e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031ec:	f7ff fff0 	bl	80031d0 <HAL_RCC_GetHCLKFreq>
 80031f0:	4602      	mov	r2, r0
 80031f2:	4b05      	ldr	r3, [pc, #20]	; (8003208 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	0a9b      	lsrs	r3, r3, #10
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	4903      	ldr	r1, [pc, #12]	; (800320c <HAL_RCC_GetPCLK1Freq+0x24>)
 80031fe:	5ccb      	ldrb	r3, [r1, r3]
 8003200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003204:	4618      	mov	r0, r3
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40023800 	.word	0x40023800
 800320c:	08006428 	.word	0x08006428

08003210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003214:	f7ff ffdc 	bl	80031d0 <HAL_RCC_GetHCLKFreq>
 8003218:	4602      	mov	r2, r0
 800321a:	4b05      	ldr	r3, [pc, #20]	; (8003230 <HAL_RCC_GetPCLK2Freq+0x20>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	0b5b      	lsrs	r3, r3, #13
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	4903      	ldr	r1, [pc, #12]	; (8003234 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003226:	5ccb      	ldrb	r3, [r1, r3]
 8003228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800322c:	4618      	mov	r0, r3
 800322e:	bd80      	pop	{r7, pc}
 8003230:	40023800 	.word	0x40023800
 8003234:	08006428 	.word	0x08006428

08003238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e041      	b.n	80032ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d106      	bne.n	8003264 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7fe fb90 	bl	8001984 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3304      	adds	r3, #4
 8003274:	4619      	mov	r1, r3
 8003276:	4610      	mov	r0, r2
 8003278:	f000 fe00 	bl	8003e7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b082      	sub	sp, #8
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e041      	b.n	800336c <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d106      	bne.n	8003302 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 f839 	bl	8003374 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2202      	movs	r2, #2
 8003306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3304      	adds	r3, #4
 8003312:	4619      	mov	r1, r3
 8003314:	4610      	mov	r0, r2
 8003316:	f000 fdb1 	bl	8003e7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d109      	bne.n	80033ac <HAL_TIM_OC_Start+0x24>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	bf14      	ite	ne
 80033a4:	2301      	movne	r3, #1
 80033a6:	2300      	moveq	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	e022      	b.n	80033f2 <HAL_TIM_OC_Start+0x6a>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d109      	bne.n	80033c6 <HAL_TIM_OC_Start+0x3e>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	bf14      	ite	ne
 80033be:	2301      	movne	r3, #1
 80033c0:	2300      	moveq	r3, #0
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	e015      	b.n	80033f2 <HAL_TIM_OC_Start+0x6a>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	d109      	bne.n	80033e0 <HAL_TIM_OC_Start+0x58>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	bf14      	ite	ne
 80033d8:	2301      	movne	r3, #1
 80033da:	2300      	moveq	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	e008      	b.n	80033f2 <HAL_TIM_OC_Start+0x6a>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	bf14      	ite	ne
 80033ec:	2301      	movne	r3, #1
 80033ee:	2300      	moveq	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e07c      	b.n	80034f4 <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d104      	bne.n	800340a <HAL_TIM_OC_Start+0x82>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003408:	e013      	b.n	8003432 <HAL_TIM_OC_Start+0xaa>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b04      	cmp	r3, #4
 800340e:	d104      	bne.n	800341a <HAL_TIM_OC_Start+0x92>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003418:	e00b      	b.n	8003432 <HAL_TIM_OC_Start+0xaa>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2b08      	cmp	r3, #8
 800341e:	d104      	bne.n	800342a <HAL_TIM_OC_Start+0xa2>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2202      	movs	r2, #2
 8003424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003428:	e003      	b.n	8003432 <HAL_TIM_OC_Start+0xaa>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2202      	movs	r2, #2
 800342e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2201      	movs	r2, #1
 8003438:	6839      	ldr	r1, [r7, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f001 f808 	bl	8004450 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a2d      	ldr	r2, [pc, #180]	; (80034fc <HAL_TIM_OC_Start+0x174>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d004      	beq.n	8003454 <HAL_TIM_OC_Start+0xcc>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a2c      	ldr	r2, [pc, #176]	; (8003500 <HAL_TIM_OC_Start+0x178>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d101      	bne.n	8003458 <HAL_TIM_OC_Start+0xd0>
 8003454:	2301      	movs	r3, #1
 8003456:	e000      	b.n	800345a <HAL_TIM_OC_Start+0xd2>
 8003458:	2300      	movs	r3, #0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d007      	beq.n	800346e <HAL_TIM_OC_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800346c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a22      	ldr	r2, [pc, #136]	; (80034fc <HAL_TIM_OC_Start+0x174>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d022      	beq.n	80034be <HAL_TIM_OC_Start+0x136>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003480:	d01d      	beq.n	80034be <HAL_TIM_OC_Start+0x136>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a1f      	ldr	r2, [pc, #124]	; (8003504 <HAL_TIM_OC_Start+0x17c>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d018      	beq.n	80034be <HAL_TIM_OC_Start+0x136>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a1d      	ldr	r2, [pc, #116]	; (8003508 <HAL_TIM_OC_Start+0x180>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d013      	beq.n	80034be <HAL_TIM_OC_Start+0x136>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a1c      	ldr	r2, [pc, #112]	; (800350c <HAL_TIM_OC_Start+0x184>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d00e      	beq.n	80034be <HAL_TIM_OC_Start+0x136>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a16      	ldr	r2, [pc, #88]	; (8003500 <HAL_TIM_OC_Start+0x178>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d009      	beq.n	80034be <HAL_TIM_OC_Start+0x136>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a18      	ldr	r2, [pc, #96]	; (8003510 <HAL_TIM_OC_Start+0x188>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d004      	beq.n	80034be <HAL_TIM_OC_Start+0x136>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a16      	ldr	r2, [pc, #88]	; (8003514 <HAL_TIM_OC_Start+0x18c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d111      	bne.n	80034e2 <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2b06      	cmp	r3, #6
 80034ce:	d010      	beq.n	80034f2 <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0201 	orr.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e0:	e007      	b.n	80034f2 <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f042 0201 	orr.w	r2, r2, #1
 80034f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40010000 	.word	0x40010000
 8003500:	40010400 	.word	0x40010400
 8003504:	40000400 	.word	0x40000400
 8003508:	40000800 	.word	0x40000800
 800350c:	40000c00 	.word	0x40000c00
 8003510:	40014000 	.word	0x40014000
 8003514:	40001800 	.word	0x40001800

08003518 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2200      	movs	r2, #0
 8003528:	6839      	ldr	r1, [r7, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f000 ff90 	bl	8004450 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a2e      	ldr	r2, [pc, #184]	; (80035f0 <HAL_TIM_OC_Stop+0xd8>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d004      	beq.n	8003544 <HAL_TIM_OC_Stop+0x2c>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a2d      	ldr	r2, [pc, #180]	; (80035f4 <HAL_TIM_OC_Stop+0xdc>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d101      	bne.n	8003548 <HAL_TIM_OC_Stop+0x30>
 8003544:	2301      	movs	r3, #1
 8003546:	e000      	b.n	800354a <HAL_TIM_OC_Stop+0x32>
 8003548:	2300      	movs	r3, #0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d017      	beq.n	800357e <HAL_TIM_OC_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6a1a      	ldr	r2, [r3, #32]
 8003554:	f241 1311 	movw	r3, #4369	; 0x1111
 8003558:	4013      	ands	r3, r2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10f      	bne.n	800357e <HAL_TIM_OC_Stop+0x66>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6a1a      	ldr	r2, [r3, #32]
 8003564:	f240 4344 	movw	r3, #1092	; 0x444
 8003568:	4013      	ands	r3, r2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d107      	bne.n	800357e <HAL_TIM_OC_Stop+0x66>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800357c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6a1a      	ldr	r2, [r3, #32]
 8003584:	f241 1311 	movw	r3, #4369	; 0x1111
 8003588:	4013      	ands	r3, r2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10f      	bne.n	80035ae <HAL_TIM_OC_Stop+0x96>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6a1a      	ldr	r2, [r3, #32]
 8003594:	f240 4344 	movw	r3, #1092	; 0x444
 8003598:	4013      	ands	r3, r2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d107      	bne.n	80035ae <HAL_TIM_OC_Stop+0x96>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 0201 	bic.w	r2, r2, #1
 80035ac:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d104      	bne.n	80035be <HAL_TIM_OC_Stop+0xa6>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035bc:	e013      	b.n	80035e6 <HAL_TIM_OC_Stop+0xce>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d104      	bne.n	80035ce <HAL_TIM_OC_Stop+0xb6>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035cc:	e00b      	b.n	80035e6 <HAL_TIM_OC_Stop+0xce>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d104      	bne.n	80035de <HAL_TIM_OC_Stop+0xc6>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035dc:	e003      	b.n	80035e6 <HAL_TIM_OC_Stop+0xce>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40010000 	.word	0x40010000
 80035f4:	40010400 	.word	0x40010400

080035f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e041      	b.n	800368e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d106      	bne.n	8003624 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f839 	bl	8003696 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3304      	adds	r3, #4
 8003634:	4619      	mov	r1, r3
 8003636:	4610      	mov	r0, r2
 8003638:	f000 fc20 	bl	8003e7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
	...

080036ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d109      	bne.n	80036d0 <HAL_TIM_PWM_Start+0x24>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	bf14      	ite	ne
 80036c8:	2301      	movne	r3, #1
 80036ca:	2300      	moveq	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	e022      	b.n	8003716 <HAL_TIM_PWM_Start+0x6a>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d109      	bne.n	80036ea <HAL_TIM_PWM_Start+0x3e>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b01      	cmp	r3, #1
 80036e0:	bf14      	ite	ne
 80036e2:	2301      	movne	r3, #1
 80036e4:	2300      	moveq	r3, #0
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	e015      	b.n	8003716 <HAL_TIM_PWM_Start+0x6a>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	d109      	bne.n	8003704 <HAL_TIM_PWM_Start+0x58>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	bf14      	ite	ne
 80036fc:	2301      	movne	r3, #1
 80036fe:	2300      	moveq	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	e008      	b.n	8003716 <HAL_TIM_PWM_Start+0x6a>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b01      	cmp	r3, #1
 800370e:	bf14      	ite	ne
 8003710:	2301      	movne	r3, #1
 8003712:	2300      	moveq	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e07c      	b.n	8003818 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d104      	bne.n	800372e <HAL_TIM_PWM_Start+0x82>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800372c:	e013      	b.n	8003756 <HAL_TIM_PWM_Start+0xaa>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b04      	cmp	r3, #4
 8003732:	d104      	bne.n	800373e <HAL_TIM_PWM_Start+0x92>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2202      	movs	r2, #2
 8003738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800373c:	e00b      	b.n	8003756 <HAL_TIM_PWM_Start+0xaa>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2b08      	cmp	r3, #8
 8003742:	d104      	bne.n	800374e <HAL_TIM_PWM_Start+0xa2>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2202      	movs	r2, #2
 8003748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800374c:	e003      	b.n	8003756 <HAL_TIM_PWM_Start+0xaa>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2202      	movs	r2, #2
 8003752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2201      	movs	r2, #1
 800375c:	6839      	ldr	r1, [r7, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f000 fe76 	bl	8004450 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a2d      	ldr	r2, [pc, #180]	; (8003820 <HAL_TIM_PWM_Start+0x174>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d004      	beq.n	8003778 <HAL_TIM_PWM_Start+0xcc>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a2c      	ldr	r2, [pc, #176]	; (8003824 <HAL_TIM_PWM_Start+0x178>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d101      	bne.n	800377c <HAL_TIM_PWM_Start+0xd0>
 8003778:	2301      	movs	r3, #1
 800377a:	e000      	b.n	800377e <HAL_TIM_PWM_Start+0xd2>
 800377c:	2300      	movs	r3, #0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d007      	beq.n	8003792 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003790:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a22      	ldr	r2, [pc, #136]	; (8003820 <HAL_TIM_PWM_Start+0x174>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d022      	beq.n	80037e2 <HAL_TIM_PWM_Start+0x136>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037a4:	d01d      	beq.n	80037e2 <HAL_TIM_PWM_Start+0x136>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a1f      	ldr	r2, [pc, #124]	; (8003828 <HAL_TIM_PWM_Start+0x17c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d018      	beq.n	80037e2 <HAL_TIM_PWM_Start+0x136>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a1d      	ldr	r2, [pc, #116]	; (800382c <HAL_TIM_PWM_Start+0x180>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d013      	beq.n	80037e2 <HAL_TIM_PWM_Start+0x136>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a1c      	ldr	r2, [pc, #112]	; (8003830 <HAL_TIM_PWM_Start+0x184>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d00e      	beq.n	80037e2 <HAL_TIM_PWM_Start+0x136>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a16      	ldr	r2, [pc, #88]	; (8003824 <HAL_TIM_PWM_Start+0x178>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d009      	beq.n	80037e2 <HAL_TIM_PWM_Start+0x136>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a18      	ldr	r2, [pc, #96]	; (8003834 <HAL_TIM_PWM_Start+0x188>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d004      	beq.n	80037e2 <HAL_TIM_PWM_Start+0x136>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a16      	ldr	r2, [pc, #88]	; (8003838 <HAL_TIM_PWM_Start+0x18c>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d111      	bne.n	8003806 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2b06      	cmp	r3, #6
 80037f2:	d010      	beq.n	8003816 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0201 	orr.w	r2, r2, #1
 8003802:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003804:	e007      	b.n	8003816 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f042 0201 	orr.w	r2, r2, #1
 8003814:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40010000 	.word	0x40010000
 8003824:	40010400 	.word	0x40010400
 8003828:	40000400 	.word	0x40000400
 800382c:	40000800 	.word	0x40000800
 8003830:	40000c00 	.word	0x40000c00
 8003834:	40014000 	.word	0x40014000
 8003838:	40001800 	.word	0x40001800

0800383c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b02      	cmp	r3, #2
 8003850:	d122      	bne.n	8003898 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b02      	cmp	r3, #2
 800385e:	d11b      	bne.n	8003898 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f06f 0202 	mvn.w	r2, #2
 8003868:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	f003 0303 	and.w	r3, r3, #3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 fadd 	bl	8003e3e <HAL_TIM_IC_CaptureCallback>
 8003884:	e005      	b.n	8003892 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 facf 	bl	8003e2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 fae0 	bl	8003e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	f003 0304 	and.w	r3, r3, #4
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d122      	bne.n	80038ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	d11b      	bne.n	80038ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f06f 0204 	mvn.w	r2, #4
 80038bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2202      	movs	r2, #2
 80038c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 fab3 	bl	8003e3e <HAL_TIM_IC_CaptureCallback>
 80038d8:	e005      	b.n	80038e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 faa5 	bl	8003e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 fab6 	bl	8003e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	2b08      	cmp	r3, #8
 80038f8:	d122      	bne.n	8003940 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f003 0308 	and.w	r3, r3, #8
 8003904:	2b08      	cmp	r3, #8
 8003906:	d11b      	bne.n	8003940 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f06f 0208 	mvn.w	r2, #8
 8003910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2204      	movs	r2, #4
 8003916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 fa89 	bl	8003e3e <HAL_TIM_IC_CaptureCallback>
 800392c:	e005      	b.n	800393a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 fa7b 	bl	8003e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 fa8c 	bl	8003e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f003 0310 	and.w	r3, r3, #16
 800394a:	2b10      	cmp	r3, #16
 800394c:	d122      	bne.n	8003994 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	f003 0310 	and.w	r3, r3, #16
 8003958:	2b10      	cmp	r3, #16
 800395a:	d11b      	bne.n	8003994 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f06f 0210 	mvn.w	r2, #16
 8003964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2208      	movs	r2, #8
 800396a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 fa5f 	bl	8003e3e <HAL_TIM_IC_CaptureCallback>
 8003980:	e005      	b.n	800398e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 fa51 	bl	8003e2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 fa62 	bl	8003e52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d10e      	bne.n	80039c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d107      	bne.n	80039c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f06f 0201 	mvn.w	r2, #1
 80039b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 fa2b 	bl	8003e16 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ca:	2b80      	cmp	r3, #128	; 0x80
 80039cc:	d10e      	bne.n	80039ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d8:	2b80      	cmp	r3, #128	; 0x80
 80039da:	d107      	bne.n	80039ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7fd f9c2 	bl	8000d70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f6:	2b40      	cmp	r3, #64	; 0x40
 80039f8:	d10e      	bne.n	8003a18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a04:	2b40      	cmp	r3, #64	; 0x40
 8003a06:	d107      	bne.n	8003a18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 fa27 	bl	8003e66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	f003 0320 	and.w	r3, r3, #32
 8003a22:	2b20      	cmp	r3, #32
 8003a24:	d10e      	bne.n	8003a44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f003 0320 	and.w	r3, r3, #32
 8003a30:	2b20      	cmp	r3, #32
 8003a32:	d107      	bne.n	8003a44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f06f 0220 	mvn.w	r2, #32
 8003a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 ff12 	bl	8004868 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a44:	bf00      	nop
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d101      	bne.n	8003a6a <HAL_TIM_OC_ConfigChannel+0x1e>
 8003a66:	2302      	movs	r3, #2
 8003a68:	e048      	b.n	8003afc <HAL_TIM_OC_ConfigChannel+0xb0>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2b0c      	cmp	r3, #12
 8003a76:	d839      	bhi.n	8003aec <HAL_TIM_OC_ConfigChannel+0xa0>
 8003a78:	a201      	add	r2, pc, #4	; (adr r2, 8003a80 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7e:	bf00      	nop
 8003a80:	08003ab5 	.word	0x08003ab5
 8003a84:	08003aed 	.word	0x08003aed
 8003a88:	08003aed 	.word	0x08003aed
 8003a8c:	08003aed 	.word	0x08003aed
 8003a90:	08003ac3 	.word	0x08003ac3
 8003a94:	08003aed 	.word	0x08003aed
 8003a98:	08003aed 	.word	0x08003aed
 8003a9c:	08003aed 	.word	0x08003aed
 8003aa0:	08003ad1 	.word	0x08003ad1
 8003aa4:	08003aed 	.word	0x08003aed
 8003aa8:	08003aed 	.word	0x08003aed
 8003aac:	08003aed 	.word	0x08003aed
 8003ab0:	08003adf 	.word	0x08003adf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68b9      	ldr	r1, [r7, #8]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 fa7e 	bl	8003fbc <TIM_OC1_SetConfig>
      break;
 8003ac0:	e017      	b.n	8003af2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68b9      	ldr	r1, [r7, #8]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 fae7 	bl	800409c <TIM_OC2_SetConfig>
      break;
 8003ace:	e010      	b.n	8003af2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68b9      	ldr	r1, [r7, #8]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 fb56 	bl	8004188 <TIM_OC3_SetConfig>
      break;
 8003adc:	e009      	b.n	8003af2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68b9      	ldr	r1, [r7, #8]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fbc3 	bl	8004270 <TIM_OC4_SetConfig>
      break;
 8003aea:	e002      	b.n	8003af2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	75fb      	strb	r3, [r7, #23]
      break;
 8003af0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b10:	2300      	movs	r3, #0
 8003b12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d101      	bne.n	8003b22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	e0ae      	b.n	8003c80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b0c      	cmp	r3, #12
 8003b2e:	f200 809f 	bhi.w	8003c70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b32:	a201      	add	r2, pc, #4	; (adr r2, 8003b38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b38:	08003b6d 	.word	0x08003b6d
 8003b3c:	08003c71 	.word	0x08003c71
 8003b40:	08003c71 	.word	0x08003c71
 8003b44:	08003c71 	.word	0x08003c71
 8003b48:	08003bad 	.word	0x08003bad
 8003b4c:	08003c71 	.word	0x08003c71
 8003b50:	08003c71 	.word	0x08003c71
 8003b54:	08003c71 	.word	0x08003c71
 8003b58:	08003bef 	.word	0x08003bef
 8003b5c:	08003c71 	.word	0x08003c71
 8003b60:	08003c71 	.word	0x08003c71
 8003b64:	08003c71 	.word	0x08003c71
 8003b68:	08003c2f 	.word	0x08003c2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68b9      	ldr	r1, [r7, #8]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 fa22 	bl	8003fbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699a      	ldr	r2, [r3, #24]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0208 	orr.w	r2, r2, #8
 8003b86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699a      	ldr	r2, [r3, #24]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 0204 	bic.w	r2, r2, #4
 8003b96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6999      	ldr	r1, [r3, #24]
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	691a      	ldr	r2, [r3, #16]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	619a      	str	r2, [r3, #24]
      break;
 8003baa:	e064      	b.n	8003c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68b9      	ldr	r1, [r7, #8]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 fa72 	bl	800409c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699a      	ldr	r2, [r3, #24]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	699a      	ldr	r2, [r3, #24]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6999      	ldr	r1, [r3, #24]
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	021a      	lsls	r2, r3, #8
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	619a      	str	r2, [r3, #24]
      break;
 8003bec:	e043      	b.n	8003c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68b9      	ldr	r1, [r7, #8]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 fac7 	bl	8004188 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	69da      	ldr	r2, [r3, #28]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f042 0208 	orr.w	r2, r2, #8
 8003c08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	69da      	ldr	r2, [r3, #28]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0204 	bic.w	r2, r2, #4
 8003c18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	69d9      	ldr	r1, [r3, #28]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	691a      	ldr	r2, [r3, #16]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	61da      	str	r2, [r3, #28]
      break;
 8003c2c:	e023      	b.n	8003c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68b9      	ldr	r1, [r7, #8]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 fb1b 	bl	8004270 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	69da      	ldr	r2, [r3, #28]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	69da      	ldr	r2, [r3, #28]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	69d9      	ldr	r1, [r3, #28]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	021a      	lsls	r2, r3, #8
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	61da      	str	r2, [r3, #28]
      break;
 8003c6e:	e002      	b.n	8003c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	75fb      	strb	r3, [r7, #23]
      break;
 8003c74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c92:	2300      	movs	r3, #0
 8003c94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <HAL_TIM_ConfigClockSource+0x1c>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e0b4      	b.n	8003e0e <HAL_TIM_ConfigClockSource+0x186>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cdc:	d03e      	beq.n	8003d5c <HAL_TIM_ConfigClockSource+0xd4>
 8003cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ce2:	f200 8087 	bhi.w	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cea:	f000 8086 	beq.w	8003dfa <HAL_TIM_ConfigClockSource+0x172>
 8003cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf2:	d87f      	bhi.n	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cf4:	2b70      	cmp	r3, #112	; 0x70
 8003cf6:	d01a      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0xa6>
 8003cf8:	2b70      	cmp	r3, #112	; 0x70
 8003cfa:	d87b      	bhi.n	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
 8003cfc:	2b60      	cmp	r3, #96	; 0x60
 8003cfe:	d050      	beq.n	8003da2 <HAL_TIM_ConfigClockSource+0x11a>
 8003d00:	2b60      	cmp	r3, #96	; 0x60
 8003d02:	d877      	bhi.n	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
 8003d04:	2b50      	cmp	r3, #80	; 0x50
 8003d06:	d03c      	beq.n	8003d82 <HAL_TIM_ConfigClockSource+0xfa>
 8003d08:	2b50      	cmp	r3, #80	; 0x50
 8003d0a:	d873      	bhi.n	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
 8003d0c:	2b40      	cmp	r3, #64	; 0x40
 8003d0e:	d058      	beq.n	8003dc2 <HAL_TIM_ConfigClockSource+0x13a>
 8003d10:	2b40      	cmp	r3, #64	; 0x40
 8003d12:	d86f      	bhi.n	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
 8003d14:	2b30      	cmp	r3, #48	; 0x30
 8003d16:	d064      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d18:	2b30      	cmp	r3, #48	; 0x30
 8003d1a:	d86b      	bhi.n	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
 8003d1c:	2b20      	cmp	r3, #32
 8003d1e:	d060      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d20:	2b20      	cmp	r3, #32
 8003d22:	d867      	bhi.n	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d05c      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d28:	2b10      	cmp	r3, #16
 8003d2a:	d05a      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0x15a>
 8003d2c:	e062      	b.n	8003df4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6818      	ldr	r0, [r3, #0]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	6899      	ldr	r1, [r3, #8]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	685a      	ldr	r2, [r3, #4]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	f000 fb67 	bl	8004410 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	609a      	str	r2, [r3, #8]
      break;
 8003d5a:	e04f      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6818      	ldr	r0, [r3, #0]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	6899      	ldr	r1, [r3, #8]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f000 fb50 	bl	8004410 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d7e:	609a      	str	r2, [r3, #8]
      break;
 8003d80:	e03c      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6818      	ldr	r0, [r3, #0]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	6859      	ldr	r1, [r3, #4]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f000 fac4 	bl	800431c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2150      	movs	r1, #80	; 0x50
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 fb1d 	bl	80043da <TIM_ITRx_SetConfig>
      break;
 8003da0:	e02c      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	6859      	ldr	r1, [r3, #4]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	461a      	mov	r2, r3
 8003db0:	f000 fae3 	bl	800437a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2160      	movs	r1, #96	; 0x60
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 fb0d 	bl	80043da <TIM_ITRx_SetConfig>
      break;
 8003dc0:	e01c      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6818      	ldr	r0, [r3, #0]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	6859      	ldr	r1, [r3, #4]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	f000 faa4 	bl	800431c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2140      	movs	r1, #64	; 0x40
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 fafd 	bl	80043da <TIM_ITRx_SetConfig>
      break;
 8003de0:	e00c      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4619      	mov	r1, r3
 8003dec:	4610      	mov	r0, r2
 8003dee:	f000 faf4 	bl	80043da <TIM_ITRx_SetConfig>
      break;
 8003df2:	e003      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	73fb      	strb	r3, [r7, #15]
      break;
 8003df8:	e000      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003dfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b083      	sub	sp, #12
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b083      	sub	sp, #12
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
	...

08003e7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a40      	ldr	r2, [pc, #256]	; (8003f90 <TIM_Base_SetConfig+0x114>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d013      	beq.n	8003ebc <TIM_Base_SetConfig+0x40>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e9a:	d00f      	beq.n	8003ebc <TIM_Base_SetConfig+0x40>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a3d      	ldr	r2, [pc, #244]	; (8003f94 <TIM_Base_SetConfig+0x118>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d00b      	beq.n	8003ebc <TIM_Base_SetConfig+0x40>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a3c      	ldr	r2, [pc, #240]	; (8003f98 <TIM_Base_SetConfig+0x11c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d007      	beq.n	8003ebc <TIM_Base_SetConfig+0x40>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a3b      	ldr	r2, [pc, #236]	; (8003f9c <TIM_Base_SetConfig+0x120>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d003      	beq.n	8003ebc <TIM_Base_SetConfig+0x40>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a3a      	ldr	r2, [pc, #232]	; (8003fa0 <TIM_Base_SetConfig+0x124>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d108      	bne.n	8003ece <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a2f      	ldr	r2, [pc, #188]	; (8003f90 <TIM_Base_SetConfig+0x114>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d02b      	beq.n	8003f2e <TIM_Base_SetConfig+0xb2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003edc:	d027      	beq.n	8003f2e <TIM_Base_SetConfig+0xb2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a2c      	ldr	r2, [pc, #176]	; (8003f94 <TIM_Base_SetConfig+0x118>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d023      	beq.n	8003f2e <TIM_Base_SetConfig+0xb2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a2b      	ldr	r2, [pc, #172]	; (8003f98 <TIM_Base_SetConfig+0x11c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d01f      	beq.n	8003f2e <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a2a      	ldr	r2, [pc, #168]	; (8003f9c <TIM_Base_SetConfig+0x120>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d01b      	beq.n	8003f2e <TIM_Base_SetConfig+0xb2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a29      	ldr	r2, [pc, #164]	; (8003fa0 <TIM_Base_SetConfig+0x124>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d017      	beq.n	8003f2e <TIM_Base_SetConfig+0xb2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a28      	ldr	r2, [pc, #160]	; (8003fa4 <TIM_Base_SetConfig+0x128>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d013      	beq.n	8003f2e <TIM_Base_SetConfig+0xb2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a27      	ldr	r2, [pc, #156]	; (8003fa8 <TIM_Base_SetConfig+0x12c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d00f      	beq.n	8003f2e <TIM_Base_SetConfig+0xb2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a26      	ldr	r2, [pc, #152]	; (8003fac <TIM_Base_SetConfig+0x130>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d00b      	beq.n	8003f2e <TIM_Base_SetConfig+0xb2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a25      	ldr	r2, [pc, #148]	; (8003fb0 <TIM_Base_SetConfig+0x134>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d007      	beq.n	8003f2e <TIM_Base_SetConfig+0xb2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a24      	ldr	r2, [pc, #144]	; (8003fb4 <TIM_Base_SetConfig+0x138>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d003      	beq.n	8003f2e <TIM_Base_SetConfig+0xb2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a23      	ldr	r2, [pc, #140]	; (8003fb8 <TIM_Base_SetConfig+0x13c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d108      	bne.n	8003f40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a0a      	ldr	r2, [pc, #40]	; (8003f90 <TIM_Base_SetConfig+0x114>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d003      	beq.n	8003f74 <TIM_Base_SetConfig+0xf8>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a0c      	ldr	r2, [pc, #48]	; (8003fa0 <TIM_Base_SetConfig+0x124>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d103      	bne.n	8003f7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	691a      	ldr	r2, [r3, #16]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	615a      	str	r2, [r3, #20]
}
 8003f82:	bf00      	nop
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	40010000 	.word	0x40010000
 8003f94:	40000400 	.word	0x40000400
 8003f98:	40000800 	.word	0x40000800
 8003f9c:	40000c00 	.word	0x40000c00
 8003fa0:	40010400 	.word	0x40010400
 8003fa4:	40014000 	.word	0x40014000
 8003fa8:	40014400 	.word	0x40014400
 8003fac:	40014800 	.word	0x40014800
 8003fb0:	40001800 	.word	0x40001800
 8003fb4:	40001c00 	.word	0x40001c00
 8003fb8:	40002000 	.word	0x40002000

08003fbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	f023 0201 	bic.w	r2, r3, #1
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f023 0303 	bic.w	r3, r3, #3
 8003ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f023 0302 	bic.w	r3, r3, #2
 8004004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	4313      	orrs	r3, r2
 800400e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a20      	ldr	r2, [pc, #128]	; (8004094 <TIM_OC1_SetConfig+0xd8>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d003      	beq.n	8004020 <TIM_OC1_SetConfig+0x64>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a1f      	ldr	r2, [pc, #124]	; (8004098 <TIM_OC1_SetConfig+0xdc>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d10c      	bne.n	800403a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f023 0308 	bic.w	r3, r3, #8
 8004026:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	4313      	orrs	r3, r2
 8004030:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f023 0304 	bic.w	r3, r3, #4
 8004038:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a15      	ldr	r2, [pc, #84]	; (8004094 <TIM_OC1_SetConfig+0xd8>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d003      	beq.n	800404a <TIM_OC1_SetConfig+0x8e>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a14      	ldr	r2, [pc, #80]	; (8004098 <TIM_OC1_SetConfig+0xdc>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d111      	bne.n	800406e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004050:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004058:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	4313      	orrs	r3, r2
 8004062:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4313      	orrs	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	621a      	str	r2, [r3, #32]
}
 8004088:	bf00      	nop
 800408a:	371c      	adds	r7, #28
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	40010000 	.word	0x40010000
 8004098:	40010400 	.word	0x40010400

0800409c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800409c:	b480      	push	{r7}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	f023 0210 	bic.w	r2, r3, #16
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	021b      	lsls	r3, r3, #8
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f023 0320 	bic.w	r3, r3, #32
 80040e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a22      	ldr	r2, [pc, #136]	; (8004180 <TIM_OC2_SetConfig+0xe4>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d003      	beq.n	8004104 <TIM_OC2_SetConfig+0x68>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a21      	ldr	r2, [pc, #132]	; (8004184 <TIM_OC2_SetConfig+0xe8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d10d      	bne.n	8004120 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800410a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	011b      	lsls	r3, r3, #4
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	4313      	orrs	r3, r2
 8004116:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800411e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a17      	ldr	r2, [pc, #92]	; (8004180 <TIM_OC2_SetConfig+0xe4>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d003      	beq.n	8004130 <TIM_OC2_SetConfig+0x94>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a16      	ldr	r2, [pc, #88]	; (8004184 <TIM_OC2_SetConfig+0xe8>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d113      	bne.n	8004158 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004136:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800413e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4313      	orrs	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	4313      	orrs	r3, r2
 8004156:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	621a      	str	r2, [r3, #32]
}
 8004172:	bf00      	nop
 8004174:	371c      	adds	r7, #28
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	40010000 	.word	0x40010000
 8004184:	40010400 	.word	0x40010400

08004188 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004188:	b480      	push	{r7}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0303 	bic.w	r3, r3, #3
 80041be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	021b      	lsls	r3, r3, #8
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	4313      	orrs	r3, r2
 80041dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a21      	ldr	r2, [pc, #132]	; (8004268 <TIM_OC3_SetConfig+0xe0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d003      	beq.n	80041ee <TIM_OC3_SetConfig+0x66>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a20      	ldr	r2, [pc, #128]	; (800426c <TIM_OC3_SetConfig+0xe4>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d10d      	bne.n	800420a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	021b      	lsls	r3, r3, #8
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	4313      	orrs	r3, r2
 8004200:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004208:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a16      	ldr	r2, [pc, #88]	; (8004268 <TIM_OC3_SetConfig+0xe0>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d003      	beq.n	800421a <TIM_OC3_SetConfig+0x92>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a15      	ldr	r2, [pc, #84]	; (800426c <TIM_OC3_SetConfig+0xe4>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d113      	bne.n	8004242 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	011b      	lsls	r3, r3, #4
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	4313      	orrs	r3, r2
 8004234:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	4313      	orrs	r3, r2
 8004240:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	621a      	str	r2, [r3, #32]
}
 800425c:	bf00      	nop
 800425e:	371c      	adds	r7, #28
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	40010000 	.word	0x40010000
 800426c:	40010400 	.word	0x40010400

08004270 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004270:	b480      	push	{r7}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800429e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	021b      	lsls	r3, r3, #8
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	031b      	lsls	r3, r3, #12
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a12      	ldr	r2, [pc, #72]	; (8004314 <TIM_OC4_SetConfig+0xa4>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d003      	beq.n	80042d8 <TIM_OC4_SetConfig+0x68>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a11      	ldr	r2, [pc, #68]	; (8004318 <TIM_OC4_SetConfig+0xa8>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d109      	bne.n	80042ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	019b      	lsls	r3, r3, #6
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	621a      	str	r2, [r3, #32]
}
 8004306:	bf00      	nop
 8004308:	371c      	adds	r7, #28
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	40010000 	.word	0x40010000
 8004318:	40010400 	.word	0x40010400

0800431c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	f023 0201 	bic.w	r2, r3, #1
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004346:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	4313      	orrs	r3, r2
 8004350:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f023 030a 	bic.w	r3, r3, #10
 8004358:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	4313      	orrs	r3, r2
 8004360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	621a      	str	r2, [r3, #32]
}
 800436e:	bf00      	nop
 8004370:	371c      	adds	r7, #28
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800437a:	b480      	push	{r7}
 800437c:	b087      	sub	sp, #28
 800437e:	af00      	add	r7, sp, #0
 8004380:	60f8      	str	r0, [r7, #12]
 8004382:	60b9      	str	r1, [r7, #8]
 8004384:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	f023 0210 	bic.w	r2, r3, #16
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	031b      	lsls	r3, r3, #12
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	4313      	orrs	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	621a      	str	r2, [r3, #32]
}
 80043ce:	bf00      	nop
 80043d0:	371c      	adds	r7, #28
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043da:	b480      	push	{r7}
 80043dc:	b085      	sub	sp, #20
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
 80043e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	f043 0307 	orr.w	r3, r3, #7
 80043fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	609a      	str	r2, [r3, #8]
}
 8004404:	bf00      	nop
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004410:	b480      	push	{r7}
 8004412:	b087      	sub	sp, #28
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
 800441c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800442a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	021a      	lsls	r2, r3, #8
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	431a      	orrs	r2, r3
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	4313      	orrs	r3, r2
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	4313      	orrs	r3, r2
 800443c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	609a      	str	r2, [r3, #8]
}
 8004444:	bf00      	nop
 8004446:	371c      	adds	r7, #28
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f003 031f 	and.w	r3, r3, #31
 8004462:	2201      	movs	r2, #1
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a1a      	ldr	r2, [r3, #32]
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	43db      	mvns	r3, r3
 8004472:	401a      	ands	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6a1a      	ldr	r2, [r3, #32]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	f003 031f 	and.w	r3, r3, #31
 8004482:	6879      	ldr	r1, [r7, #4]
 8004484:	fa01 f303 	lsl.w	r3, r1, r3
 8004488:	431a      	orrs	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	621a      	str	r2, [r3, #32]
}
 800448e:	bf00      	nop
 8004490:	371c      	adds	r7, #28
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
	...

0800449c <HAL_TIMEx_OCN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d109      	bne.n	80044c0 <HAL_TIMEx_OCN_Start+0x24>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	bf14      	ite	ne
 80044b8:	2301      	movne	r3, #1
 80044ba:	2300      	moveq	r3, #0
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	e022      	b.n	8004506 <HAL_TIMEx_OCN_Start+0x6a>
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	2b04      	cmp	r3, #4
 80044c4:	d109      	bne.n	80044da <HAL_TIMEx_OCN_Start+0x3e>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	bf14      	ite	ne
 80044d2:	2301      	movne	r3, #1
 80044d4:	2300      	moveq	r3, #0
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	e015      	b.n	8004506 <HAL_TIMEx_OCN_Start+0x6a>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d109      	bne.n	80044f4 <HAL_TIMEx_OCN_Start+0x58>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	bf14      	ite	ne
 80044ec:	2301      	movne	r3, #1
 80044ee:	2300      	moveq	r3, #0
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	e008      	b.n	8004506 <HAL_TIMEx_OCN_Start+0x6a>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	bf14      	ite	ne
 8004500:	2301      	movne	r3, #1
 8004502:	2300      	moveq	r3, #0
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <HAL_TIMEx_OCN_Start+0x72>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e06d      	b.n	80045ea <HAL_TIMEx_OCN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d104      	bne.n	800451e <HAL_TIMEx_OCN_Start+0x82>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800451c:	e013      	b.n	8004546 <HAL_TIMEx_OCN_Start+0xaa>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b04      	cmp	r3, #4
 8004522:	d104      	bne.n	800452e <HAL_TIMEx_OCN_Start+0x92>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800452c:	e00b      	b.n	8004546 <HAL_TIMEx_OCN_Start+0xaa>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2b08      	cmp	r3, #8
 8004532:	d104      	bne.n	800453e <HAL_TIMEx_OCN_Start+0xa2>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2202      	movs	r2, #2
 8004538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800453c:	e003      	b.n	8004546 <HAL_TIMEx_OCN_Start+0xaa>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2202      	movs	r2, #2
 8004542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2204      	movs	r2, #4
 800454c:	6839      	ldr	r1, [r7, #0]
 800454e:	4618      	mov	r0, r3
 8004550:	f000 f994 	bl	800487c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004562:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a22      	ldr	r2, [pc, #136]	; (80045f4 <HAL_TIMEx_OCN_Start+0x158>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d022      	beq.n	80045b4 <HAL_TIMEx_OCN_Start+0x118>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004576:	d01d      	beq.n	80045b4 <HAL_TIMEx_OCN_Start+0x118>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a1e      	ldr	r2, [pc, #120]	; (80045f8 <HAL_TIMEx_OCN_Start+0x15c>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d018      	beq.n	80045b4 <HAL_TIMEx_OCN_Start+0x118>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a1d      	ldr	r2, [pc, #116]	; (80045fc <HAL_TIMEx_OCN_Start+0x160>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d013      	beq.n	80045b4 <HAL_TIMEx_OCN_Start+0x118>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a1b      	ldr	r2, [pc, #108]	; (8004600 <HAL_TIMEx_OCN_Start+0x164>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d00e      	beq.n	80045b4 <HAL_TIMEx_OCN_Start+0x118>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a1a      	ldr	r2, [pc, #104]	; (8004604 <HAL_TIMEx_OCN_Start+0x168>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d009      	beq.n	80045b4 <HAL_TIMEx_OCN_Start+0x118>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a18      	ldr	r2, [pc, #96]	; (8004608 <HAL_TIMEx_OCN_Start+0x16c>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d004      	beq.n	80045b4 <HAL_TIMEx_OCN_Start+0x118>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a17      	ldr	r2, [pc, #92]	; (800460c <HAL_TIMEx_OCN_Start+0x170>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d111      	bne.n	80045d8 <HAL_TIMEx_OCN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2b06      	cmp	r3, #6
 80045c4:	d010      	beq.n	80045e8 <HAL_TIMEx_OCN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f042 0201 	orr.w	r2, r2, #1
 80045d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045d6:	e007      	b.n	80045e8 <HAL_TIMEx_OCN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0201 	orr.w	r2, r2, #1
 80045e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	40010000 	.word	0x40010000
 80045f8:	40000400 	.word	0x40000400
 80045fc:	40000800 	.word	0x40000800
 8004600:	40000c00 	.word	0x40000c00
 8004604:	40010400 	.word	0x40010400
 8004608:	40014000 	.word	0x40014000
 800460c:	40001800 	.word	0x40001800

08004610 <HAL_TIMEx_OCN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2200      	movs	r2, #0
 8004620:	6839      	ldr	r1, [r7, #0]
 8004622:	4618      	mov	r0, r3
 8004624:	f000 f92a 	bl	800487c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6a1a      	ldr	r2, [r3, #32]
 800462e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004632:	4013      	ands	r3, r2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10f      	bne.n	8004658 <HAL_TIMEx_OCN_Stop+0x48>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6a1a      	ldr	r2, [r3, #32]
 800463e:	f240 4344 	movw	r3, #1092	; 0x444
 8004642:	4013      	ands	r3, r2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d107      	bne.n	8004658 <HAL_TIMEx_OCN_Stop+0x48>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004656:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6a1a      	ldr	r2, [r3, #32]
 800465e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004662:	4013      	ands	r3, r2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10f      	bne.n	8004688 <HAL_TIMEx_OCN_Stop+0x78>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6a1a      	ldr	r2, [r3, #32]
 800466e:	f240 4344 	movw	r3, #1092	; 0x444
 8004672:	4013      	ands	r3, r2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d107      	bne.n	8004688 <HAL_TIMEx_OCN_Stop+0x78>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0201 	bic.w	r2, r2, #1
 8004686:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d104      	bne.n	8004698 <HAL_TIMEx_OCN_Stop+0x88>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004696:	e013      	b.n	80046c0 <HAL_TIMEx_OCN_Stop+0xb0>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b04      	cmp	r3, #4
 800469c:	d104      	bne.n	80046a8 <HAL_TIMEx_OCN_Stop+0x98>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046a6:	e00b      	b.n	80046c0 <HAL_TIMEx_OCN_Stop+0xb0>
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	2b08      	cmp	r3, #8
 80046ac:	d104      	bne.n	80046b8 <HAL_TIMEx_OCN_Stop+0xa8>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046b6:	e003      	b.n	80046c0 <HAL_TIMEx_OCN_Stop+0xb0>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d101      	bne.n	80046e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046e0:	2302      	movs	r3, #2
 80046e2:	e05a      	b.n	800479a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	4313      	orrs	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a21      	ldr	r2, [pc, #132]	; (80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d022      	beq.n	800476e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004730:	d01d      	beq.n	800476e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a1d      	ldr	r2, [pc, #116]	; (80047ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d018      	beq.n	800476e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a1b      	ldr	r2, [pc, #108]	; (80047b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d013      	beq.n	800476e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a1a      	ldr	r2, [pc, #104]	; (80047b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d00e      	beq.n	800476e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a18      	ldr	r2, [pc, #96]	; (80047b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d009      	beq.n	800476e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a17      	ldr	r2, [pc, #92]	; (80047bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d004      	beq.n	800476e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a15      	ldr	r2, [pc, #84]	; (80047c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d10c      	bne.n	8004788 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004774:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	4313      	orrs	r3, r2
 800477e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	40010000 	.word	0x40010000
 80047ac:	40000400 	.word	0x40000400
 80047b0:	40000800 	.word	0x40000800
 80047b4:	40000c00 	.word	0x40000c00
 80047b8:	40010400 	.word	0x40010400
 80047bc:	40014000 	.word	0x40014000
 80047c0:	40001800 	.word	0x40001800

080047c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d101      	bne.n	80047e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80047dc:	2302      	movs	r3, #2
 80047de:	e03d      	b.n	800485c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	4313      	orrs	r3, r2
 8004802:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	4313      	orrs	r3, r2
 8004810:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4313      	orrs	r3, r2
 800481e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	4313      	orrs	r3, r2
 800482c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	4313      	orrs	r3, r2
 800483a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	4313      	orrs	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800487c:	b480      	push	{r7}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	f003 031f 	and.w	r3, r3, #31
 800488e:	2204      	movs	r2, #4
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6a1a      	ldr	r2, [r3, #32]
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	43db      	mvns	r3, r3
 800489e:	401a      	ands	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6a1a      	ldr	r2, [r3, #32]
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	f003 031f 	and.w	r3, r3, #31
 80048ae:	6879      	ldr	r1, [r7, #4]
 80048b0:	fa01 f303 	lsl.w	r3, r1, r3
 80048b4:	431a      	orrs	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	621a      	str	r2, [r3, #32]
}
 80048ba:	bf00      	nop
 80048bc:	371c      	adds	r7, #28
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b082      	sub	sp, #8
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e03f      	b.n	8004958 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d106      	bne.n	80048f2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f7fd f933 	bl	8001b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2224      	movs	r2, #36	; 0x24
 80048f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004908:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 fdd4 	bl	80054b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	691a      	ldr	r2, [r3, #16]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800491e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	695a      	ldr	r2, [r3, #20]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800492e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68da      	ldr	r2, [r3, #12]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800493e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2220      	movs	r2, #32
 800494a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2220      	movs	r2, #32
 8004952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b08a      	sub	sp, #40	; 0x28
 8004964:	af02      	add	r7, sp, #8
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	603b      	str	r3, [r7, #0]
 800496c:	4613      	mov	r3, r2
 800496e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004970:	2300      	movs	r3, #0
 8004972:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b20      	cmp	r3, #32
 800497e:	d17c      	bne.n	8004a7a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <HAL_UART_Transmit+0x2c>
 8004986:	88fb      	ldrh	r3, [r7, #6]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e075      	b.n	8004a7c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004996:	2b01      	cmp	r3, #1
 8004998:	d101      	bne.n	800499e <HAL_UART_Transmit+0x3e>
 800499a:	2302      	movs	r3, #2
 800499c:	e06e      	b.n	8004a7c <HAL_UART_Transmit+0x11c>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2221      	movs	r2, #33	; 0x21
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049b4:	f7fd fa3a 	bl	8001e2c <HAL_GetTick>
 80049b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	88fa      	ldrh	r2, [r7, #6]
 80049be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	88fa      	ldrh	r2, [r7, #6]
 80049c4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ce:	d108      	bne.n	80049e2 <HAL_UART_Transmit+0x82>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d104      	bne.n	80049e2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80049d8:	2300      	movs	r3, #0
 80049da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	61bb      	str	r3, [r7, #24]
 80049e0:	e003      	b.n	80049ea <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049e6:	2300      	movs	r3, #0
 80049e8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80049f2:	e02a      	b.n	8004a4a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	2200      	movs	r2, #0
 80049fc:	2180      	movs	r1, #128	; 0x80
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 fb14 	bl	800502c <UART_WaitOnFlagUntilTimeout>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e036      	b.n	8004a7c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10b      	bne.n	8004a2c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a22:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	3302      	adds	r3, #2
 8004a28:	61bb      	str	r3, [r7, #24]
 8004a2a:	e007      	b.n	8004a3c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	781a      	ldrb	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	3b01      	subs	r3, #1
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1cf      	bne.n	80049f4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	2140      	movs	r1, #64	; 0x40
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f000 fae4 	bl	800502c <UART_WaitOnFlagUntilTimeout>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e006      	b.n	8004a7c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2220      	movs	r2, #32
 8004a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a76:	2300      	movs	r3, #0
 8004a78:	e000      	b.n	8004a7c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a7a:	2302      	movs	r3, #2
  }
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3720      	adds	r7, #32
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b20      	cmp	r3, #32
 8004a9c:	d11d      	bne.n	8004ada <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d002      	beq.n	8004aaa <HAL_UART_Receive_IT+0x26>
 8004aa4:	88fb      	ldrh	r3, [r7, #6]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e016      	b.n	8004adc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d101      	bne.n	8004abc <HAL_UART_Receive_IT+0x38>
 8004ab8:	2302      	movs	r3, #2
 8004aba:	e00f      	b.n	8004adc <HAL_UART_Receive_IT+0x58>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004aca:	88fb      	ldrh	r3, [r7, #6]
 8004acc:	461a      	mov	r2, r3
 8004ace:	68b9      	ldr	r1, [r7, #8]
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 fb19 	bl	8005108 <UART_Start_Receive_IT>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	e000      	b.n	8004adc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004ada:	2302      	movs	r3, #2
  }
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b0ba      	sub	sp, #232	; 0xe8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004b10:	2300      	movs	r3, #0
 8004b12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004b22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10f      	bne.n	8004b4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b2e:	f003 0320 	and.w	r3, r3, #32
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d009      	beq.n	8004b4a <HAL_UART_IRQHandler+0x66>
 8004b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b3a:	f003 0320 	and.w	r3, r3, #32
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 fbfd 	bl	8005342 <UART_Receive_IT>
      return;
 8004b48:	e256      	b.n	8004ff8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	f000 80de 	beq.w	8004d10 <HAL_UART_IRQHandler+0x22c>
 8004b54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d106      	bne.n	8004b6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b64:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 80d1 	beq.w	8004d10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00b      	beq.n	8004b92 <HAL_UART_IRQHandler+0xae>
 8004b7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d005      	beq.n	8004b92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	f043 0201 	orr.w	r2, r3, #1
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b96:	f003 0304 	and.w	r3, r3, #4
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00b      	beq.n	8004bb6 <HAL_UART_IRQHandler+0xd2>
 8004b9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d005      	beq.n	8004bb6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	f043 0202 	orr.w	r2, r3, #2
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00b      	beq.n	8004bda <HAL_UART_IRQHandler+0xf6>
 8004bc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d005      	beq.n	8004bda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	f043 0204 	orr.w	r2, r3, #4
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bde:	f003 0308 	and.w	r3, r3, #8
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d011      	beq.n	8004c0a <HAL_UART_IRQHandler+0x126>
 8004be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bea:	f003 0320 	and.w	r3, r3, #32
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d105      	bne.n	8004bfe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d005      	beq.n	8004c0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	f043 0208 	orr.w	r2, r3, #8
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 81ed 	beq.w	8004fee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c18:	f003 0320 	and.w	r3, r3, #32
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d008      	beq.n	8004c32 <HAL_UART_IRQHandler+0x14e>
 8004c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c24:	f003 0320 	and.w	r3, r3, #32
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d002      	beq.n	8004c32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fb88 	bl	8005342 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3c:	2b40      	cmp	r3, #64	; 0x40
 8004c3e:	bf0c      	ite	eq
 8004c40:	2301      	moveq	r3, #1
 8004c42:	2300      	movne	r3, #0
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	f003 0308 	and.w	r3, r3, #8
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d103      	bne.n	8004c5e <HAL_UART_IRQHandler+0x17a>
 8004c56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d04f      	beq.n	8004cfe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 fa90 	bl	8005184 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c6e:	2b40      	cmp	r3, #64	; 0x40
 8004c70:	d141      	bne.n	8004cf6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3314      	adds	r3, #20
 8004c78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c80:	e853 3f00 	ldrex	r3, [r3]
 8004c84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004c88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3314      	adds	r3, #20
 8004c9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004caa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004cae:	e841 2300 	strex	r3, r2, [r1]
 8004cb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004cb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1d9      	bne.n	8004c72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d013      	beq.n	8004cee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cca:	4a7d      	ldr	r2, [pc, #500]	; (8004ec0 <HAL_UART_IRQHandler+0x3dc>)
 8004ccc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fd fa5b 	bl	800218e <HAL_DMA_Abort_IT>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d016      	beq.n	8004d0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ce8:	4610      	mov	r0, r2
 8004cea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cec:	e00e      	b.n	8004d0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7fc fcd8 	bl	80016a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf4:	e00a      	b.n	8004d0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7fc fcd4 	bl	80016a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cfc:	e006      	b.n	8004d0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7fc fcd0 	bl	80016a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004d0a:	e170      	b.n	8004fee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d0c:	bf00      	nop
    return;
 8004d0e:	e16e      	b.n	8004fee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	f040 814a 	bne.w	8004fae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d1e:	f003 0310 	and.w	r3, r3, #16
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 8143 	beq.w	8004fae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d2c:	f003 0310 	and.w	r3, r3, #16
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 813c 	beq.w	8004fae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d36:	2300      	movs	r3, #0
 8004d38:	60bb      	str	r3, [r7, #8]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	60bb      	str	r3, [r7, #8]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	60bb      	str	r3, [r7, #8]
 8004d4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d56:	2b40      	cmp	r3, #64	; 0x40
 8004d58:	f040 80b4 	bne.w	8004ec4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 8140 	beq.w	8004ff2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	f080 8139 	bcs.w	8004ff2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d86:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d92:	f000 8088 	beq.w	8004ea6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	330c      	adds	r3, #12
 8004d9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004da4:	e853 3f00 	ldrex	r3, [r3]
 8004da8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004dac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004db4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	330c      	adds	r3, #12
 8004dbe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004dc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004dc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004dce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004dd2:	e841 2300 	strex	r3, r2, [r1]
 8004dd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004dda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1d9      	bne.n	8004d96 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	3314      	adds	r3, #20
 8004de8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dec:	e853 3f00 	ldrex	r3, [r3]
 8004df0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004df2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004df4:	f023 0301 	bic.w	r3, r3, #1
 8004df8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	3314      	adds	r3, #20
 8004e02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004e0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004e0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e12:	e841 2300 	strex	r3, r2, [r1]
 8004e16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004e18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1e1      	bne.n	8004de2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3314      	adds	r3, #20
 8004e24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e28:	e853 3f00 	ldrex	r3, [r3]
 8004e2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004e2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	3314      	adds	r3, #20
 8004e3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004e42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e4a:	e841 2300 	strex	r3, r2, [r1]
 8004e4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1e3      	bne.n	8004e1e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2220      	movs	r2, #32
 8004e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	330c      	adds	r3, #12
 8004e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e6e:	e853 3f00 	ldrex	r3, [r3]
 8004e72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e76:	f023 0310 	bic.w	r3, r3, #16
 8004e7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	330c      	adds	r3, #12
 8004e84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004e88:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e8a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e90:	e841 2300 	strex	r3, r2, [r1]
 8004e94:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1e3      	bne.n	8004e64 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fd f904 	bl	80020ae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f8ac 	bl	8005014 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ebc:	e099      	b.n	8004ff2 <HAL_UART_IRQHandler+0x50e>
 8004ebe:	bf00      	nop
 8004ec0:	0800524b 	.word	0x0800524b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f000 808b 	beq.w	8004ff6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004ee0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f000 8086 	beq.w	8004ff6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	330c      	adds	r3, #12
 8004ef0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef4:	e853 3f00 	ldrex	r3, [r3]
 8004ef8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004efc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	330c      	adds	r3, #12
 8004f0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004f0e:	647a      	str	r2, [r7, #68]	; 0x44
 8004f10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f16:	e841 2300 	strex	r3, r2, [r1]
 8004f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1e3      	bne.n	8004eea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	3314      	adds	r3, #20
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	e853 3f00 	ldrex	r3, [r3]
 8004f30:	623b      	str	r3, [r7, #32]
   return(result);
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	f023 0301 	bic.w	r3, r3, #1
 8004f38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	3314      	adds	r3, #20
 8004f42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004f46:	633a      	str	r2, [r7, #48]	; 0x30
 8004f48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f4e:	e841 2300 	strex	r3, r2, [r1]
 8004f52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1e3      	bne.n	8004f22 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	330c      	adds	r3, #12
 8004f6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	e853 3f00 	ldrex	r3, [r3]
 8004f76:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f023 0310 	bic.w	r3, r3, #16
 8004f7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	330c      	adds	r3, #12
 8004f88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004f8c:	61fa      	str	r2, [r7, #28]
 8004f8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f90:	69b9      	ldr	r1, [r7, #24]
 8004f92:	69fa      	ldr	r2, [r7, #28]
 8004f94:	e841 2300 	strex	r3, r2, [r1]
 8004f98:	617b      	str	r3, [r7, #20]
   return(result);
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1e3      	bne.n	8004f68 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004fa0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f834 	bl	8005014 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fac:	e023      	b.n	8004ff6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d009      	beq.n	8004fce <HAL_UART_IRQHandler+0x4ea>
 8004fba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d003      	beq.n	8004fce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f953 	bl	8005272 <UART_Transmit_IT>
    return;
 8004fcc:	e014      	b.n	8004ff8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00e      	beq.n	8004ff8 <HAL_UART_IRQHandler+0x514>
 8004fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d008      	beq.n	8004ff8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f993 	bl	8005312 <UART_EndTransmit_IT>
    return;
 8004fec:	e004      	b.n	8004ff8 <HAL_UART_IRQHandler+0x514>
    return;
 8004fee:	bf00      	nop
 8004ff0:	e002      	b.n	8004ff8 <HAL_UART_IRQHandler+0x514>
      return;
 8004ff2:	bf00      	nop
 8004ff4:	e000      	b.n	8004ff8 <HAL_UART_IRQHandler+0x514>
      return;
 8004ff6:	bf00      	nop
  }
}
 8004ff8:	37e8      	adds	r7, #232	; 0xe8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop

08005000 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	460b      	mov	r3, r1
 800501e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b090      	sub	sp, #64	; 0x40
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	603b      	str	r3, [r7, #0]
 8005038:	4613      	mov	r3, r2
 800503a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800503c:	e050      	b.n	80050e0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800503e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005044:	d04c      	beq.n	80050e0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005048:	2b00      	cmp	r3, #0
 800504a:	d007      	beq.n	800505c <UART_WaitOnFlagUntilTimeout+0x30>
 800504c:	f7fc feee 	bl	8001e2c <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005058:	429a      	cmp	r2, r3
 800505a:	d241      	bcs.n	80050e0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	330c      	adds	r3, #12
 8005062:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005066:	e853 3f00 	ldrex	r3, [r3]
 800506a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005072:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	330c      	adds	r3, #12
 800507a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800507c:	637a      	str	r2, [r7, #52]	; 0x34
 800507e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005080:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005082:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005084:	e841 2300 	strex	r3, r2, [r1]
 8005088:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800508a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1e5      	bne.n	800505c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	3314      	adds	r3, #20
 8005096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	e853 3f00 	ldrex	r3, [r3]
 800509e:	613b      	str	r3, [r7, #16]
   return(result);
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	f023 0301 	bic.w	r3, r3, #1
 80050a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	3314      	adds	r3, #20
 80050ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050b0:	623a      	str	r2, [r7, #32]
 80050b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b4:	69f9      	ldr	r1, [r7, #28]
 80050b6:	6a3a      	ldr	r2, [r7, #32]
 80050b8:	e841 2300 	strex	r3, r2, [r1]
 80050bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1e5      	bne.n	8005090 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2220      	movs	r2, #32
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2220      	movs	r2, #32
 80050d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e00f      	b.n	8005100 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	4013      	ands	r3, r2
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	bf0c      	ite	eq
 80050f0:	2301      	moveq	r3, #1
 80050f2:	2300      	movne	r3, #0
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	461a      	mov	r2, r3
 80050f8:	79fb      	ldrb	r3, [r7, #7]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d09f      	beq.n	800503e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3740      	adds	r7, #64	; 0x40
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	4613      	mov	r3, r2
 8005114:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	88fa      	ldrh	r2, [r7, #6]
 8005120:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	88fa      	ldrh	r2, [r7, #6]
 8005126:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2222      	movs	r2, #34	; 0x22
 8005132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d007      	beq.n	8005156 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68da      	ldr	r2, [r3, #12]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005154:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	695a      	ldr	r2, [r3, #20]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f042 0201 	orr.w	r2, r2, #1
 8005164:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f042 0220 	orr.w	r2, r2, #32
 8005174:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3714      	adds	r7, #20
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005184:	b480      	push	{r7}
 8005186:	b095      	sub	sp, #84	; 0x54
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	330c      	adds	r3, #12
 8005192:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005196:	e853 3f00 	ldrex	r3, [r3]
 800519a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800519c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	330c      	adds	r3, #12
 80051aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051ac:	643a      	str	r2, [r7, #64]	; 0x40
 80051ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80051b4:	e841 2300 	strex	r3, r2, [r1]
 80051b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80051ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1e5      	bne.n	800518c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3314      	adds	r3, #20
 80051c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c8:	6a3b      	ldr	r3, [r7, #32]
 80051ca:	e853 3f00 	ldrex	r3, [r3]
 80051ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	f023 0301 	bic.w	r3, r3, #1
 80051d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	3314      	adds	r3, #20
 80051de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051e8:	e841 2300 	strex	r3, r2, [r1]
 80051ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1e5      	bne.n	80051c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d119      	bne.n	8005230 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	330c      	adds	r3, #12
 8005202:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	e853 3f00 	ldrex	r3, [r3]
 800520a:	60bb      	str	r3, [r7, #8]
   return(result);
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	f023 0310 	bic.w	r3, r3, #16
 8005212:	647b      	str	r3, [r7, #68]	; 0x44
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	330c      	adds	r3, #12
 800521a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800521c:	61ba      	str	r2, [r7, #24]
 800521e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005220:	6979      	ldr	r1, [r7, #20]
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	e841 2300 	strex	r3, r2, [r1]
 8005228:	613b      	str	r3, [r7, #16]
   return(result);
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1e5      	bne.n	80051fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2220      	movs	r2, #32
 8005234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800523e:	bf00      	nop
 8005240:	3754      	adds	r7, #84	; 0x54
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b084      	sub	sp, #16
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005256:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f7fc fa1d 	bl	80016a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800526a:	bf00      	nop
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005272:	b480      	push	{r7}
 8005274:	b085      	sub	sp, #20
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b21      	cmp	r3, #33	; 0x21
 8005284:	d13e      	bne.n	8005304 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800528e:	d114      	bne.n	80052ba <UART_Transmit_IT+0x48>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d110      	bne.n	80052ba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a1b      	ldr	r3, [r3, #32]
 800529c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	881b      	ldrh	r3, [r3, #0]
 80052a2:	461a      	mov	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	1c9a      	adds	r2, r3, #2
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	621a      	str	r2, [r3, #32]
 80052b8:	e008      	b.n	80052cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	1c59      	adds	r1, r3, #1
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	6211      	str	r1, [r2, #32]
 80052c4:	781a      	ldrb	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	3b01      	subs	r3, #1
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	4619      	mov	r1, r3
 80052da:	84d1      	strh	r1, [r2, #38]	; 0x26
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10f      	bne.n	8005300 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68da      	ldr	r2, [r3, #12]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68da      	ldr	r2, [r3, #12]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005300:	2300      	movs	r3, #0
 8005302:	e000      	b.n	8005306 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005304:	2302      	movs	r3, #2
  }
}
 8005306:	4618      	mov	r0, r3
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b082      	sub	sp, #8
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68da      	ldr	r2, [r3, #12]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005328:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2220      	movs	r2, #32
 800532e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f7ff fe64 	bl	8005000 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b08c      	sub	sp, #48	; 0x30
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b22      	cmp	r3, #34	; 0x22
 8005354:	f040 80ab 	bne.w	80054ae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005360:	d117      	bne.n	8005392 <UART_Receive_IT+0x50>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d113      	bne.n	8005392 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800536a:	2300      	movs	r3, #0
 800536c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005372:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	b29b      	uxth	r3, r3
 800537c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005380:	b29a      	uxth	r2, r3
 8005382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005384:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538a:	1c9a      	adds	r2, r3, #2
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	629a      	str	r2, [r3, #40]	; 0x28
 8005390:	e026      	b.n	80053e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005396:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005398:	2300      	movs	r3, #0
 800539a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053a4:	d007      	beq.n	80053b6 <UART_Receive_IT+0x74>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10a      	bne.n	80053c4 <UART_Receive_IT+0x82>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d106      	bne.n	80053c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	b2da      	uxtb	r2, r3
 80053be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c0:	701a      	strb	r2, [r3, #0]
 80053c2:	e008      	b.n	80053d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053da:	1c5a      	adds	r2, r3, #1
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	3b01      	subs	r3, #1
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	4619      	mov	r1, r3
 80053ee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d15a      	bne.n	80054aa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68da      	ldr	r2, [r3, #12]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f022 0220 	bic.w	r2, r2, #32
 8005402:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005412:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	695a      	ldr	r2, [r3, #20]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 0201 	bic.w	r2, r2, #1
 8005422:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2220      	movs	r2, #32
 8005428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005430:	2b01      	cmp	r3, #1
 8005432:	d135      	bne.n	80054a0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	330c      	adds	r3, #12
 8005440:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	e853 3f00 	ldrex	r3, [r3]
 8005448:	613b      	str	r3, [r7, #16]
   return(result);
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	f023 0310 	bic.w	r3, r3, #16
 8005450:	627b      	str	r3, [r7, #36]	; 0x24
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	330c      	adds	r3, #12
 8005458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800545a:	623a      	str	r2, [r7, #32]
 800545c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545e:	69f9      	ldr	r1, [r7, #28]
 8005460:	6a3a      	ldr	r2, [r7, #32]
 8005462:	e841 2300 	strex	r3, r2, [r1]
 8005466:	61bb      	str	r3, [r7, #24]
   return(result);
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1e5      	bne.n	800543a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0310 	and.w	r3, r3, #16
 8005478:	2b10      	cmp	r3, #16
 800547a:	d10a      	bne.n	8005492 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800547c:	2300      	movs	r3, #0
 800547e:	60fb      	str	r3, [r7, #12]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	60fb      	str	r3, [r7, #12]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005496:	4619      	mov	r1, r3
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f7ff fdbb 	bl	8005014 <HAL_UARTEx_RxEventCallback>
 800549e:	e002      	b.n	80054a6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f7fc f909 	bl	80016b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80054a6:	2300      	movs	r3, #0
 80054a8:	e002      	b.n	80054b0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	e000      	b.n	80054b0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80054ae:	2302      	movs	r3, #2
  }
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3730      	adds	r7, #48	; 0x30
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054bc:	b0c0      	sub	sp, #256	; 0x100
 80054be:	af00      	add	r7, sp, #0
 80054c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80054d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d4:	68d9      	ldr	r1, [r3, #12]
 80054d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	ea40 0301 	orr.w	r3, r0, r1
 80054e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80054e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e6:	689a      	ldr	r2, [r3, #8]
 80054e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	431a      	orrs	r2, r3
 80054f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	431a      	orrs	r2, r3
 80054f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	4313      	orrs	r3, r2
 8005500:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005510:	f021 010c 	bic.w	r1, r1, #12
 8005514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800551e:	430b      	orrs	r3, r1
 8005520:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800552e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005532:	6999      	ldr	r1, [r3, #24]
 8005534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	ea40 0301 	orr.w	r3, r0, r1
 800553e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	4b8f      	ldr	r3, [pc, #572]	; (8005784 <UART_SetConfig+0x2cc>)
 8005548:	429a      	cmp	r2, r3
 800554a:	d005      	beq.n	8005558 <UART_SetConfig+0xa0>
 800554c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	4b8d      	ldr	r3, [pc, #564]	; (8005788 <UART_SetConfig+0x2d0>)
 8005554:	429a      	cmp	r2, r3
 8005556:	d104      	bne.n	8005562 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005558:	f7fd fe5a 	bl	8003210 <HAL_RCC_GetPCLK2Freq>
 800555c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005560:	e003      	b.n	800556a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005562:	f7fd fe41 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 8005566:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800556a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800556e:	69db      	ldr	r3, [r3, #28]
 8005570:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005574:	f040 810c 	bne.w	8005790 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005578:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800557c:	2200      	movs	r2, #0
 800557e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005582:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005586:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800558a:	4622      	mov	r2, r4
 800558c:	462b      	mov	r3, r5
 800558e:	1891      	adds	r1, r2, r2
 8005590:	65b9      	str	r1, [r7, #88]	; 0x58
 8005592:	415b      	adcs	r3, r3
 8005594:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005596:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800559a:	4621      	mov	r1, r4
 800559c:	eb12 0801 	adds.w	r8, r2, r1
 80055a0:	4629      	mov	r1, r5
 80055a2:	eb43 0901 	adc.w	r9, r3, r1
 80055a6:	f04f 0200 	mov.w	r2, #0
 80055aa:	f04f 0300 	mov.w	r3, #0
 80055ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055ba:	4690      	mov	r8, r2
 80055bc:	4699      	mov	r9, r3
 80055be:	4623      	mov	r3, r4
 80055c0:	eb18 0303 	adds.w	r3, r8, r3
 80055c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80055c8:	462b      	mov	r3, r5
 80055ca:	eb49 0303 	adc.w	r3, r9, r3
 80055ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80055d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80055de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80055e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80055e6:	460b      	mov	r3, r1
 80055e8:	18db      	adds	r3, r3, r3
 80055ea:	653b      	str	r3, [r7, #80]	; 0x50
 80055ec:	4613      	mov	r3, r2
 80055ee:	eb42 0303 	adc.w	r3, r2, r3
 80055f2:	657b      	str	r3, [r7, #84]	; 0x54
 80055f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80055f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80055fc:	f7fa fe38 	bl	8000270 <__aeabi_uldivmod>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	4b61      	ldr	r3, [pc, #388]	; (800578c <UART_SetConfig+0x2d4>)
 8005606:	fba3 2302 	umull	r2, r3, r3, r2
 800560a:	095b      	lsrs	r3, r3, #5
 800560c:	011c      	lsls	r4, r3, #4
 800560e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005612:	2200      	movs	r2, #0
 8005614:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005618:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800561c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005620:	4642      	mov	r2, r8
 8005622:	464b      	mov	r3, r9
 8005624:	1891      	adds	r1, r2, r2
 8005626:	64b9      	str	r1, [r7, #72]	; 0x48
 8005628:	415b      	adcs	r3, r3
 800562a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800562c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005630:	4641      	mov	r1, r8
 8005632:	eb12 0a01 	adds.w	sl, r2, r1
 8005636:	4649      	mov	r1, r9
 8005638:	eb43 0b01 	adc.w	fp, r3, r1
 800563c:	f04f 0200 	mov.w	r2, #0
 8005640:	f04f 0300 	mov.w	r3, #0
 8005644:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005648:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800564c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005650:	4692      	mov	sl, r2
 8005652:	469b      	mov	fp, r3
 8005654:	4643      	mov	r3, r8
 8005656:	eb1a 0303 	adds.w	r3, sl, r3
 800565a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800565e:	464b      	mov	r3, r9
 8005660:	eb4b 0303 	adc.w	r3, fp, r3
 8005664:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005674:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005678:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800567c:	460b      	mov	r3, r1
 800567e:	18db      	adds	r3, r3, r3
 8005680:	643b      	str	r3, [r7, #64]	; 0x40
 8005682:	4613      	mov	r3, r2
 8005684:	eb42 0303 	adc.w	r3, r2, r3
 8005688:	647b      	str	r3, [r7, #68]	; 0x44
 800568a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800568e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005692:	f7fa fded 	bl	8000270 <__aeabi_uldivmod>
 8005696:	4602      	mov	r2, r0
 8005698:	460b      	mov	r3, r1
 800569a:	4611      	mov	r1, r2
 800569c:	4b3b      	ldr	r3, [pc, #236]	; (800578c <UART_SetConfig+0x2d4>)
 800569e:	fba3 2301 	umull	r2, r3, r3, r1
 80056a2:	095b      	lsrs	r3, r3, #5
 80056a4:	2264      	movs	r2, #100	; 0x64
 80056a6:	fb02 f303 	mul.w	r3, r2, r3
 80056aa:	1acb      	subs	r3, r1, r3
 80056ac:	00db      	lsls	r3, r3, #3
 80056ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80056b2:	4b36      	ldr	r3, [pc, #216]	; (800578c <UART_SetConfig+0x2d4>)
 80056b4:	fba3 2302 	umull	r2, r3, r3, r2
 80056b8:	095b      	lsrs	r3, r3, #5
 80056ba:	005b      	lsls	r3, r3, #1
 80056bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056c0:	441c      	add	r4, r3
 80056c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056c6:	2200      	movs	r2, #0
 80056c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80056d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80056d4:	4642      	mov	r2, r8
 80056d6:	464b      	mov	r3, r9
 80056d8:	1891      	adds	r1, r2, r2
 80056da:	63b9      	str	r1, [r7, #56]	; 0x38
 80056dc:	415b      	adcs	r3, r3
 80056de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80056e4:	4641      	mov	r1, r8
 80056e6:	1851      	adds	r1, r2, r1
 80056e8:	6339      	str	r1, [r7, #48]	; 0x30
 80056ea:	4649      	mov	r1, r9
 80056ec:	414b      	adcs	r3, r1
 80056ee:	637b      	str	r3, [r7, #52]	; 0x34
 80056f0:	f04f 0200 	mov.w	r2, #0
 80056f4:	f04f 0300 	mov.w	r3, #0
 80056f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80056fc:	4659      	mov	r1, fp
 80056fe:	00cb      	lsls	r3, r1, #3
 8005700:	4651      	mov	r1, sl
 8005702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005706:	4651      	mov	r1, sl
 8005708:	00ca      	lsls	r2, r1, #3
 800570a:	4610      	mov	r0, r2
 800570c:	4619      	mov	r1, r3
 800570e:	4603      	mov	r3, r0
 8005710:	4642      	mov	r2, r8
 8005712:	189b      	adds	r3, r3, r2
 8005714:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005718:	464b      	mov	r3, r9
 800571a:	460a      	mov	r2, r1
 800571c:	eb42 0303 	adc.w	r3, r2, r3
 8005720:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005730:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005734:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005738:	460b      	mov	r3, r1
 800573a:	18db      	adds	r3, r3, r3
 800573c:	62bb      	str	r3, [r7, #40]	; 0x28
 800573e:	4613      	mov	r3, r2
 8005740:	eb42 0303 	adc.w	r3, r2, r3
 8005744:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005746:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800574a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800574e:	f7fa fd8f 	bl	8000270 <__aeabi_uldivmod>
 8005752:	4602      	mov	r2, r0
 8005754:	460b      	mov	r3, r1
 8005756:	4b0d      	ldr	r3, [pc, #52]	; (800578c <UART_SetConfig+0x2d4>)
 8005758:	fba3 1302 	umull	r1, r3, r3, r2
 800575c:	095b      	lsrs	r3, r3, #5
 800575e:	2164      	movs	r1, #100	; 0x64
 8005760:	fb01 f303 	mul.w	r3, r1, r3
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	3332      	adds	r3, #50	; 0x32
 800576a:	4a08      	ldr	r2, [pc, #32]	; (800578c <UART_SetConfig+0x2d4>)
 800576c:	fba2 2303 	umull	r2, r3, r2, r3
 8005770:	095b      	lsrs	r3, r3, #5
 8005772:	f003 0207 	and.w	r2, r3, #7
 8005776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4422      	add	r2, r4
 800577e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005780:	e105      	b.n	800598e <UART_SetConfig+0x4d6>
 8005782:	bf00      	nop
 8005784:	40011000 	.word	0x40011000
 8005788:	40011400 	.word	0x40011400
 800578c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005790:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005794:	2200      	movs	r2, #0
 8005796:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800579a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800579e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80057a2:	4642      	mov	r2, r8
 80057a4:	464b      	mov	r3, r9
 80057a6:	1891      	adds	r1, r2, r2
 80057a8:	6239      	str	r1, [r7, #32]
 80057aa:	415b      	adcs	r3, r3
 80057ac:	627b      	str	r3, [r7, #36]	; 0x24
 80057ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80057b2:	4641      	mov	r1, r8
 80057b4:	1854      	adds	r4, r2, r1
 80057b6:	4649      	mov	r1, r9
 80057b8:	eb43 0501 	adc.w	r5, r3, r1
 80057bc:	f04f 0200 	mov.w	r2, #0
 80057c0:	f04f 0300 	mov.w	r3, #0
 80057c4:	00eb      	lsls	r3, r5, #3
 80057c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057ca:	00e2      	lsls	r2, r4, #3
 80057cc:	4614      	mov	r4, r2
 80057ce:	461d      	mov	r5, r3
 80057d0:	4643      	mov	r3, r8
 80057d2:	18e3      	adds	r3, r4, r3
 80057d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80057d8:	464b      	mov	r3, r9
 80057da:	eb45 0303 	adc.w	r3, r5, r3
 80057de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80057e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80057ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80057f2:	f04f 0200 	mov.w	r2, #0
 80057f6:	f04f 0300 	mov.w	r3, #0
 80057fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80057fe:	4629      	mov	r1, r5
 8005800:	008b      	lsls	r3, r1, #2
 8005802:	4621      	mov	r1, r4
 8005804:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005808:	4621      	mov	r1, r4
 800580a:	008a      	lsls	r2, r1, #2
 800580c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005810:	f7fa fd2e 	bl	8000270 <__aeabi_uldivmod>
 8005814:	4602      	mov	r2, r0
 8005816:	460b      	mov	r3, r1
 8005818:	4b60      	ldr	r3, [pc, #384]	; (800599c <UART_SetConfig+0x4e4>)
 800581a:	fba3 2302 	umull	r2, r3, r3, r2
 800581e:	095b      	lsrs	r3, r3, #5
 8005820:	011c      	lsls	r4, r3, #4
 8005822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005826:	2200      	movs	r2, #0
 8005828:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800582c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005830:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005834:	4642      	mov	r2, r8
 8005836:	464b      	mov	r3, r9
 8005838:	1891      	adds	r1, r2, r2
 800583a:	61b9      	str	r1, [r7, #24]
 800583c:	415b      	adcs	r3, r3
 800583e:	61fb      	str	r3, [r7, #28]
 8005840:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005844:	4641      	mov	r1, r8
 8005846:	1851      	adds	r1, r2, r1
 8005848:	6139      	str	r1, [r7, #16]
 800584a:	4649      	mov	r1, r9
 800584c:	414b      	adcs	r3, r1
 800584e:	617b      	str	r3, [r7, #20]
 8005850:	f04f 0200 	mov.w	r2, #0
 8005854:	f04f 0300 	mov.w	r3, #0
 8005858:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800585c:	4659      	mov	r1, fp
 800585e:	00cb      	lsls	r3, r1, #3
 8005860:	4651      	mov	r1, sl
 8005862:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005866:	4651      	mov	r1, sl
 8005868:	00ca      	lsls	r2, r1, #3
 800586a:	4610      	mov	r0, r2
 800586c:	4619      	mov	r1, r3
 800586e:	4603      	mov	r3, r0
 8005870:	4642      	mov	r2, r8
 8005872:	189b      	adds	r3, r3, r2
 8005874:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005878:	464b      	mov	r3, r9
 800587a:	460a      	mov	r2, r1
 800587c:	eb42 0303 	adc.w	r3, r2, r3
 8005880:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	67bb      	str	r3, [r7, #120]	; 0x78
 800588e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005890:	f04f 0200 	mov.w	r2, #0
 8005894:	f04f 0300 	mov.w	r3, #0
 8005898:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800589c:	4649      	mov	r1, r9
 800589e:	008b      	lsls	r3, r1, #2
 80058a0:	4641      	mov	r1, r8
 80058a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058a6:	4641      	mov	r1, r8
 80058a8:	008a      	lsls	r2, r1, #2
 80058aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80058ae:	f7fa fcdf 	bl	8000270 <__aeabi_uldivmod>
 80058b2:	4602      	mov	r2, r0
 80058b4:	460b      	mov	r3, r1
 80058b6:	4b39      	ldr	r3, [pc, #228]	; (800599c <UART_SetConfig+0x4e4>)
 80058b8:	fba3 1302 	umull	r1, r3, r3, r2
 80058bc:	095b      	lsrs	r3, r3, #5
 80058be:	2164      	movs	r1, #100	; 0x64
 80058c0:	fb01 f303 	mul.w	r3, r1, r3
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	011b      	lsls	r3, r3, #4
 80058c8:	3332      	adds	r3, #50	; 0x32
 80058ca:	4a34      	ldr	r2, [pc, #208]	; (800599c <UART_SetConfig+0x4e4>)
 80058cc:	fba2 2303 	umull	r2, r3, r2, r3
 80058d0:	095b      	lsrs	r3, r3, #5
 80058d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058d6:	441c      	add	r4, r3
 80058d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058dc:	2200      	movs	r2, #0
 80058de:	673b      	str	r3, [r7, #112]	; 0x70
 80058e0:	677a      	str	r2, [r7, #116]	; 0x74
 80058e2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80058e6:	4642      	mov	r2, r8
 80058e8:	464b      	mov	r3, r9
 80058ea:	1891      	adds	r1, r2, r2
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	415b      	adcs	r3, r3
 80058f0:	60fb      	str	r3, [r7, #12]
 80058f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058f6:	4641      	mov	r1, r8
 80058f8:	1851      	adds	r1, r2, r1
 80058fa:	6039      	str	r1, [r7, #0]
 80058fc:	4649      	mov	r1, r9
 80058fe:	414b      	adcs	r3, r1
 8005900:	607b      	str	r3, [r7, #4]
 8005902:	f04f 0200 	mov.w	r2, #0
 8005906:	f04f 0300 	mov.w	r3, #0
 800590a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800590e:	4659      	mov	r1, fp
 8005910:	00cb      	lsls	r3, r1, #3
 8005912:	4651      	mov	r1, sl
 8005914:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005918:	4651      	mov	r1, sl
 800591a:	00ca      	lsls	r2, r1, #3
 800591c:	4610      	mov	r0, r2
 800591e:	4619      	mov	r1, r3
 8005920:	4603      	mov	r3, r0
 8005922:	4642      	mov	r2, r8
 8005924:	189b      	adds	r3, r3, r2
 8005926:	66bb      	str	r3, [r7, #104]	; 0x68
 8005928:	464b      	mov	r3, r9
 800592a:	460a      	mov	r2, r1
 800592c:	eb42 0303 	adc.w	r3, r2, r3
 8005930:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	663b      	str	r3, [r7, #96]	; 0x60
 800593c:	667a      	str	r2, [r7, #100]	; 0x64
 800593e:	f04f 0200 	mov.w	r2, #0
 8005942:	f04f 0300 	mov.w	r3, #0
 8005946:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800594a:	4649      	mov	r1, r9
 800594c:	008b      	lsls	r3, r1, #2
 800594e:	4641      	mov	r1, r8
 8005950:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005954:	4641      	mov	r1, r8
 8005956:	008a      	lsls	r2, r1, #2
 8005958:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800595c:	f7fa fc88 	bl	8000270 <__aeabi_uldivmod>
 8005960:	4602      	mov	r2, r0
 8005962:	460b      	mov	r3, r1
 8005964:	4b0d      	ldr	r3, [pc, #52]	; (800599c <UART_SetConfig+0x4e4>)
 8005966:	fba3 1302 	umull	r1, r3, r3, r2
 800596a:	095b      	lsrs	r3, r3, #5
 800596c:	2164      	movs	r1, #100	; 0x64
 800596e:	fb01 f303 	mul.w	r3, r1, r3
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	011b      	lsls	r3, r3, #4
 8005976:	3332      	adds	r3, #50	; 0x32
 8005978:	4a08      	ldr	r2, [pc, #32]	; (800599c <UART_SetConfig+0x4e4>)
 800597a:	fba2 2303 	umull	r2, r3, r2, r3
 800597e:	095b      	lsrs	r3, r3, #5
 8005980:	f003 020f 	and.w	r2, r3, #15
 8005984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4422      	add	r2, r4
 800598c:	609a      	str	r2, [r3, #8]
}
 800598e:	bf00      	nop
 8005990:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005994:	46bd      	mov	sp, r7
 8005996:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800599a:	bf00      	nop
 800599c:	51eb851f 	.word	0x51eb851f

080059a0 <__errno>:
 80059a0:	4b01      	ldr	r3, [pc, #4]	; (80059a8 <__errno+0x8>)
 80059a2:	6818      	ldr	r0, [r3, #0]
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	20000030 	.word	0x20000030

080059ac <__libc_init_array>:
 80059ac:	b570      	push	{r4, r5, r6, lr}
 80059ae:	4d0d      	ldr	r5, [pc, #52]	; (80059e4 <__libc_init_array+0x38>)
 80059b0:	4c0d      	ldr	r4, [pc, #52]	; (80059e8 <__libc_init_array+0x3c>)
 80059b2:	1b64      	subs	r4, r4, r5
 80059b4:	10a4      	asrs	r4, r4, #2
 80059b6:	2600      	movs	r6, #0
 80059b8:	42a6      	cmp	r6, r4
 80059ba:	d109      	bne.n	80059d0 <__libc_init_array+0x24>
 80059bc:	4d0b      	ldr	r5, [pc, #44]	; (80059ec <__libc_init_array+0x40>)
 80059be:	4c0c      	ldr	r4, [pc, #48]	; (80059f0 <__libc_init_array+0x44>)
 80059c0:	f000 fc8e 	bl	80062e0 <_init>
 80059c4:	1b64      	subs	r4, r4, r5
 80059c6:	10a4      	asrs	r4, r4, #2
 80059c8:	2600      	movs	r6, #0
 80059ca:	42a6      	cmp	r6, r4
 80059cc:	d105      	bne.n	80059da <__libc_init_array+0x2e>
 80059ce:	bd70      	pop	{r4, r5, r6, pc}
 80059d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80059d4:	4798      	blx	r3
 80059d6:	3601      	adds	r6, #1
 80059d8:	e7ee      	b.n	80059b8 <__libc_init_array+0xc>
 80059da:	f855 3b04 	ldr.w	r3, [r5], #4
 80059de:	4798      	blx	r3
 80059e0:	3601      	adds	r6, #1
 80059e2:	e7f2      	b.n	80059ca <__libc_init_array+0x1e>
 80059e4:	0800646c 	.word	0x0800646c
 80059e8:	0800646c 	.word	0x0800646c
 80059ec:	0800646c 	.word	0x0800646c
 80059f0:	08006470 	.word	0x08006470

080059f4 <memset>:
 80059f4:	4402      	add	r2, r0
 80059f6:	4603      	mov	r3, r0
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d100      	bne.n	80059fe <memset+0xa>
 80059fc:	4770      	bx	lr
 80059fe:	f803 1b01 	strb.w	r1, [r3], #1
 8005a02:	e7f9      	b.n	80059f8 <memset+0x4>

08005a04 <siprintf>:
 8005a04:	b40e      	push	{r1, r2, r3}
 8005a06:	b500      	push	{lr}
 8005a08:	b09c      	sub	sp, #112	; 0x70
 8005a0a:	ab1d      	add	r3, sp, #116	; 0x74
 8005a0c:	9002      	str	r0, [sp, #8]
 8005a0e:	9006      	str	r0, [sp, #24]
 8005a10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a14:	4809      	ldr	r0, [pc, #36]	; (8005a3c <siprintf+0x38>)
 8005a16:	9107      	str	r1, [sp, #28]
 8005a18:	9104      	str	r1, [sp, #16]
 8005a1a:	4909      	ldr	r1, [pc, #36]	; (8005a40 <siprintf+0x3c>)
 8005a1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a20:	9105      	str	r1, [sp, #20]
 8005a22:	6800      	ldr	r0, [r0, #0]
 8005a24:	9301      	str	r3, [sp, #4]
 8005a26:	a902      	add	r1, sp, #8
 8005a28:	f000 f868 	bl	8005afc <_svfiprintf_r>
 8005a2c:	9b02      	ldr	r3, [sp, #8]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	701a      	strb	r2, [r3, #0]
 8005a32:	b01c      	add	sp, #112	; 0x70
 8005a34:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a38:	b003      	add	sp, #12
 8005a3a:	4770      	bx	lr
 8005a3c:	20000030 	.word	0x20000030
 8005a40:	ffff0208 	.word	0xffff0208

08005a44 <__ssputs_r>:
 8005a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a48:	688e      	ldr	r6, [r1, #8]
 8005a4a:	429e      	cmp	r6, r3
 8005a4c:	4682      	mov	sl, r0
 8005a4e:	460c      	mov	r4, r1
 8005a50:	4690      	mov	r8, r2
 8005a52:	461f      	mov	r7, r3
 8005a54:	d838      	bhi.n	8005ac8 <__ssputs_r+0x84>
 8005a56:	898a      	ldrh	r2, [r1, #12]
 8005a58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a5c:	d032      	beq.n	8005ac4 <__ssputs_r+0x80>
 8005a5e:	6825      	ldr	r5, [r4, #0]
 8005a60:	6909      	ldr	r1, [r1, #16]
 8005a62:	eba5 0901 	sub.w	r9, r5, r1
 8005a66:	6965      	ldr	r5, [r4, #20]
 8005a68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a70:	3301      	adds	r3, #1
 8005a72:	444b      	add	r3, r9
 8005a74:	106d      	asrs	r5, r5, #1
 8005a76:	429d      	cmp	r5, r3
 8005a78:	bf38      	it	cc
 8005a7a:	461d      	movcc	r5, r3
 8005a7c:	0553      	lsls	r3, r2, #21
 8005a7e:	d531      	bpl.n	8005ae4 <__ssputs_r+0xa0>
 8005a80:	4629      	mov	r1, r5
 8005a82:	f000 fb63 	bl	800614c <_malloc_r>
 8005a86:	4606      	mov	r6, r0
 8005a88:	b950      	cbnz	r0, 8005aa0 <__ssputs_r+0x5c>
 8005a8a:	230c      	movs	r3, #12
 8005a8c:	f8ca 3000 	str.w	r3, [sl]
 8005a90:	89a3      	ldrh	r3, [r4, #12]
 8005a92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a96:	81a3      	strh	r3, [r4, #12]
 8005a98:	f04f 30ff 	mov.w	r0, #4294967295
 8005a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa0:	6921      	ldr	r1, [r4, #16]
 8005aa2:	464a      	mov	r2, r9
 8005aa4:	f000 fabe 	bl	8006024 <memcpy>
 8005aa8:	89a3      	ldrh	r3, [r4, #12]
 8005aaa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab2:	81a3      	strh	r3, [r4, #12]
 8005ab4:	6126      	str	r6, [r4, #16]
 8005ab6:	6165      	str	r5, [r4, #20]
 8005ab8:	444e      	add	r6, r9
 8005aba:	eba5 0509 	sub.w	r5, r5, r9
 8005abe:	6026      	str	r6, [r4, #0]
 8005ac0:	60a5      	str	r5, [r4, #8]
 8005ac2:	463e      	mov	r6, r7
 8005ac4:	42be      	cmp	r6, r7
 8005ac6:	d900      	bls.n	8005aca <__ssputs_r+0x86>
 8005ac8:	463e      	mov	r6, r7
 8005aca:	6820      	ldr	r0, [r4, #0]
 8005acc:	4632      	mov	r2, r6
 8005ace:	4641      	mov	r1, r8
 8005ad0:	f000 fab6 	bl	8006040 <memmove>
 8005ad4:	68a3      	ldr	r3, [r4, #8]
 8005ad6:	1b9b      	subs	r3, r3, r6
 8005ad8:	60a3      	str	r3, [r4, #8]
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	4433      	add	r3, r6
 8005ade:	6023      	str	r3, [r4, #0]
 8005ae0:	2000      	movs	r0, #0
 8005ae2:	e7db      	b.n	8005a9c <__ssputs_r+0x58>
 8005ae4:	462a      	mov	r2, r5
 8005ae6:	f000 fba5 	bl	8006234 <_realloc_r>
 8005aea:	4606      	mov	r6, r0
 8005aec:	2800      	cmp	r0, #0
 8005aee:	d1e1      	bne.n	8005ab4 <__ssputs_r+0x70>
 8005af0:	6921      	ldr	r1, [r4, #16]
 8005af2:	4650      	mov	r0, sl
 8005af4:	f000 fabe 	bl	8006074 <_free_r>
 8005af8:	e7c7      	b.n	8005a8a <__ssputs_r+0x46>
	...

08005afc <_svfiprintf_r>:
 8005afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b00:	4698      	mov	r8, r3
 8005b02:	898b      	ldrh	r3, [r1, #12]
 8005b04:	061b      	lsls	r3, r3, #24
 8005b06:	b09d      	sub	sp, #116	; 0x74
 8005b08:	4607      	mov	r7, r0
 8005b0a:	460d      	mov	r5, r1
 8005b0c:	4614      	mov	r4, r2
 8005b0e:	d50e      	bpl.n	8005b2e <_svfiprintf_r+0x32>
 8005b10:	690b      	ldr	r3, [r1, #16]
 8005b12:	b963      	cbnz	r3, 8005b2e <_svfiprintf_r+0x32>
 8005b14:	2140      	movs	r1, #64	; 0x40
 8005b16:	f000 fb19 	bl	800614c <_malloc_r>
 8005b1a:	6028      	str	r0, [r5, #0]
 8005b1c:	6128      	str	r0, [r5, #16]
 8005b1e:	b920      	cbnz	r0, 8005b2a <_svfiprintf_r+0x2e>
 8005b20:	230c      	movs	r3, #12
 8005b22:	603b      	str	r3, [r7, #0]
 8005b24:	f04f 30ff 	mov.w	r0, #4294967295
 8005b28:	e0d1      	b.n	8005cce <_svfiprintf_r+0x1d2>
 8005b2a:	2340      	movs	r3, #64	; 0x40
 8005b2c:	616b      	str	r3, [r5, #20]
 8005b2e:	2300      	movs	r3, #0
 8005b30:	9309      	str	r3, [sp, #36]	; 0x24
 8005b32:	2320      	movs	r3, #32
 8005b34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b38:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b3c:	2330      	movs	r3, #48	; 0x30
 8005b3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005ce8 <_svfiprintf_r+0x1ec>
 8005b42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b46:	f04f 0901 	mov.w	r9, #1
 8005b4a:	4623      	mov	r3, r4
 8005b4c:	469a      	mov	sl, r3
 8005b4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b52:	b10a      	cbz	r2, 8005b58 <_svfiprintf_r+0x5c>
 8005b54:	2a25      	cmp	r2, #37	; 0x25
 8005b56:	d1f9      	bne.n	8005b4c <_svfiprintf_r+0x50>
 8005b58:	ebba 0b04 	subs.w	fp, sl, r4
 8005b5c:	d00b      	beq.n	8005b76 <_svfiprintf_r+0x7a>
 8005b5e:	465b      	mov	r3, fp
 8005b60:	4622      	mov	r2, r4
 8005b62:	4629      	mov	r1, r5
 8005b64:	4638      	mov	r0, r7
 8005b66:	f7ff ff6d 	bl	8005a44 <__ssputs_r>
 8005b6a:	3001      	adds	r0, #1
 8005b6c:	f000 80aa 	beq.w	8005cc4 <_svfiprintf_r+0x1c8>
 8005b70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b72:	445a      	add	r2, fp
 8005b74:	9209      	str	r2, [sp, #36]	; 0x24
 8005b76:	f89a 3000 	ldrb.w	r3, [sl]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 80a2 	beq.w	8005cc4 <_svfiprintf_r+0x1c8>
 8005b80:	2300      	movs	r3, #0
 8005b82:	f04f 32ff 	mov.w	r2, #4294967295
 8005b86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b8a:	f10a 0a01 	add.w	sl, sl, #1
 8005b8e:	9304      	str	r3, [sp, #16]
 8005b90:	9307      	str	r3, [sp, #28]
 8005b92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b96:	931a      	str	r3, [sp, #104]	; 0x68
 8005b98:	4654      	mov	r4, sl
 8005b9a:	2205      	movs	r2, #5
 8005b9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ba0:	4851      	ldr	r0, [pc, #324]	; (8005ce8 <_svfiprintf_r+0x1ec>)
 8005ba2:	f7fa fb15 	bl	80001d0 <memchr>
 8005ba6:	9a04      	ldr	r2, [sp, #16]
 8005ba8:	b9d8      	cbnz	r0, 8005be2 <_svfiprintf_r+0xe6>
 8005baa:	06d0      	lsls	r0, r2, #27
 8005bac:	bf44      	itt	mi
 8005bae:	2320      	movmi	r3, #32
 8005bb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bb4:	0711      	lsls	r1, r2, #28
 8005bb6:	bf44      	itt	mi
 8005bb8:	232b      	movmi	r3, #43	; 0x2b
 8005bba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bbe:	f89a 3000 	ldrb.w	r3, [sl]
 8005bc2:	2b2a      	cmp	r3, #42	; 0x2a
 8005bc4:	d015      	beq.n	8005bf2 <_svfiprintf_r+0xf6>
 8005bc6:	9a07      	ldr	r2, [sp, #28]
 8005bc8:	4654      	mov	r4, sl
 8005bca:	2000      	movs	r0, #0
 8005bcc:	f04f 0c0a 	mov.w	ip, #10
 8005bd0:	4621      	mov	r1, r4
 8005bd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bd6:	3b30      	subs	r3, #48	; 0x30
 8005bd8:	2b09      	cmp	r3, #9
 8005bda:	d94e      	bls.n	8005c7a <_svfiprintf_r+0x17e>
 8005bdc:	b1b0      	cbz	r0, 8005c0c <_svfiprintf_r+0x110>
 8005bde:	9207      	str	r2, [sp, #28]
 8005be0:	e014      	b.n	8005c0c <_svfiprintf_r+0x110>
 8005be2:	eba0 0308 	sub.w	r3, r0, r8
 8005be6:	fa09 f303 	lsl.w	r3, r9, r3
 8005bea:	4313      	orrs	r3, r2
 8005bec:	9304      	str	r3, [sp, #16]
 8005bee:	46a2      	mov	sl, r4
 8005bf0:	e7d2      	b.n	8005b98 <_svfiprintf_r+0x9c>
 8005bf2:	9b03      	ldr	r3, [sp, #12]
 8005bf4:	1d19      	adds	r1, r3, #4
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	9103      	str	r1, [sp, #12]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	bfbb      	ittet	lt
 8005bfe:	425b      	neglt	r3, r3
 8005c00:	f042 0202 	orrlt.w	r2, r2, #2
 8005c04:	9307      	strge	r3, [sp, #28]
 8005c06:	9307      	strlt	r3, [sp, #28]
 8005c08:	bfb8      	it	lt
 8005c0a:	9204      	strlt	r2, [sp, #16]
 8005c0c:	7823      	ldrb	r3, [r4, #0]
 8005c0e:	2b2e      	cmp	r3, #46	; 0x2e
 8005c10:	d10c      	bne.n	8005c2c <_svfiprintf_r+0x130>
 8005c12:	7863      	ldrb	r3, [r4, #1]
 8005c14:	2b2a      	cmp	r3, #42	; 0x2a
 8005c16:	d135      	bne.n	8005c84 <_svfiprintf_r+0x188>
 8005c18:	9b03      	ldr	r3, [sp, #12]
 8005c1a:	1d1a      	adds	r2, r3, #4
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	9203      	str	r2, [sp, #12]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	bfb8      	it	lt
 8005c24:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c28:	3402      	adds	r4, #2
 8005c2a:	9305      	str	r3, [sp, #20]
 8005c2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005cf8 <_svfiprintf_r+0x1fc>
 8005c30:	7821      	ldrb	r1, [r4, #0]
 8005c32:	2203      	movs	r2, #3
 8005c34:	4650      	mov	r0, sl
 8005c36:	f7fa facb 	bl	80001d0 <memchr>
 8005c3a:	b140      	cbz	r0, 8005c4e <_svfiprintf_r+0x152>
 8005c3c:	2340      	movs	r3, #64	; 0x40
 8005c3e:	eba0 000a 	sub.w	r0, r0, sl
 8005c42:	fa03 f000 	lsl.w	r0, r3, r0
 8005c46:	9b04      	ldr	r3, [sp, #16]
 8005c48:	4303      	orrs	r3, r0
 8005c4a:	3401      	adds	r4, #1
 8005c4c:	9304      	str	r3, [sp, #16]
 8005c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c52:	4826      	ldr	r0, [pc, #152]	; (8005cec <_svfiprintf_r+0x1f0>)
 8005c54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c58:	2206      	movs	r2, #6
 8005c5a:	f7fa fab9 	bl	80001d0 <memchr>
 8005c5e:	2800      	cmp	r0, #0
 8005c60:	d038      	beq.n	8005cd4 <_svfiprintf_r+0x1d8>
 8005c62:	4b23      	ldr	r3, [pc, #140]	; (8005cf0 <_svfiprintf_r+0x1f4>)
 8005c64:	bb1b      	cbnz	r3, 8005cae <_svfiprintf_r+0x1b2>
 8005c66:	9b03      	ldr	r3, [sp, #12]
 8005c68:	3307      	adds	r3, #7
 8005c6a:	f023 0307 	bic.w	r3, r3, #7
 8005c6e:	3308      	adds	r3, #8
 8005c70:	9303      	str	r3, [sp, #12]
 8005c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c74:	4433      	add	r3, r6
 8005c76:	9309      	str	r3, [sp, #36]	; 0x24
 8005c78:	e767      	b.n	8005b4a <_svfiprintf_r+0x4e>
 8005c7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c7e:	460c      	mov	r4, r1
 8005c80:	2001      	movs	r0, #1
 8005c82:	e7a5      	b.n	8005bd0 <_svfiprintf_r+0xd4>
 8005c84:	2300      	movs	r3, #0
 8005c86:	3401      	adds	r4, #1
 8005c88:	9305      	str	r3, [sp, #20]
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	f04f 0c0a 	mov.w	ip, #10
 8005c90:	4620      	mov	r0, r4
 8005c92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c96:	3a30      	subs	r2, #48	; 0x30
 8005c98:	2a09      	cmp	r2, #9
 8005c9a:	d903      	bls.n	8005ca4 <_svfiprintf_r+0x1a8>
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d0c5      	beq.n	8005c2c <_svfiprintf_r+0x130>
 8005ca0:	9105      	str	r1, [sp, #20]
 8005ca2:	e7c3      	b.n	8005c2c <_svfiprintf_r+0x130>
 8005ca4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ca8:	4604      	mov	r4, r0
 8005caa:	2301      	movs	r3, #1
 8005cac:	e7f0      	b.n	8005c90 <_svfiprintf_r+0x194>
 8005cae:	ab03      	add	r3, sp, #12
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	462a      	mov	r2, r5
 8005cb4:	4b0f      	ldr	r3, [pc, #60]	; (8005cf4 <_svfiprintf_r+0x1f8>)
 8005cb6:	a904      	add	r1, sp, #16
 8005cb8:	4638      	mov	r0, r7
 8005cba:	f3af 8000 	nop.w
 8005cbe:	1c42      	adds	r2, r0, #1
 8005cc0:	4606      	mov	r6, r0
 8005cc2:	d1d6      	bne.n	8005c72 <_svfiprintf_r+0x176>
 8005cc4:	89ab      	ldrh	r3, [r5, #12]
 8005cc6:	065b      	lsls	r3, r3, #25
 8005cc8:	f53f af2c 	bmi.w	8005b24 <_svfiprintf_r+0x28>
 8005ccc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cce:	b01d      	add	sp, #116	; 0x74
 8005cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cd4:	ab03      	add	r3, sp, #12
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	462a      	mov	r2, r5
 8005cda:	4b06      	ldr	r3, [pc, #24]	; (8005cf4 <_svfiprintf_r+0x1f8>)
 8005cdc:	a904      	add	r1, sp, #16
 8005cde:	4638      	mov	r0, r7
 8005ce0:	f000 f87a 	bl	8005dd8 <_printf_i>
 8005ce4:	e7eb      	b.n	8005cbe <_svfiprintf_r+0x1c2>
 8005ce6:	bf00      	nop
 8005ce8:	08006430 	.word	0x08006430
 8005cec:	0800643a 	.word	0x0800643a
 8005cf0:	00000000 	.word	0x00000000
 8005cf4:	08005a45 	.word	0x08005a45
 8005cf8:	08006436 	.word	0x08006436

08005cfc <_printf_common>:
 8005cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d00:	4616      	mov	r6, r2
 8005d02:	4699      	mov	r9, r3
 8005d04:	688a      	ldr	r2, [r1, #8]
 8005d06:	690b      	ldr	r3, [r1, #16]
 8005d08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	bfb8      	it	lt
 8005d10:	4613      	movlt	r3, r2
 8005d12:	6033      	str	r3, [r6, #0]
 8005d14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d18:	4607      	mov	r7, r0
 8005d1a:	460c      	mov	r4, r1
 8005d1c:	b10a      	cbz	r2, 8005d22 <_printf_common+0x26>
 8005d1e:	3301      	adds	r3, #1
 8005d20:	6033      	str	r3, [r6, #0]
 8005d22:	6823      	ldr	r3, [r4, #0]
 8005d24:	0699      	lsls	r1, r3, #26
 8005d26:	bf42      	ittt	mi
 8005d28:	6833      	ldrmi	r3, [r6, #0]
 8005d2a:	3302      	addmi	r3, #2
 8005d2c:	6033      	strmi	r3, [r6, #0]
 8005d2e:	6825      	ldr	r5, [r4, #0]
 8005d30:	f015 0506 	ands.w	r5, r5, #6
 8005d34:	d106      	bne.n	8005d44 <_printf_common+0x48>
 8005d36:	f104 0a19 	add.w	sl, r4, #25
 8005d3a:	68e3      	ldr	r3, [r4, #12]
 8005d3c:	6832      	ldr	r2, [r6, #0]
 8005d3e:	1a9b      	subs	r3, r3, r2
 8005d40:	42ab      	cmp	r3, r5
 8005d42:	dc26      	bgt.n	8005d92 <_printf_common+0x96>
 8005d44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d48:	1e13      	subs	r3, r2, #0
 8005d4a:	6822      	ldr	r2, [r4, #0]
 8005d4c:	bf18      	it	ne
 8005d4e:	2301      	movne	r3, #1
 8005d50:	0692      	lsls	r2, r2, #26
 8005d52:	d42b      	bmi.n	8005dac <_printf_common+0xb0>
 8005d54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d58:	4649      	mov	r1, r9
 8005d5a:	4638      	mov	r0, r7
 8005d5c:	47c0      	blx	r8
 8005d5e:	3001      	adds	r0, #1
 8005d60:	d01e      	beq.n	8005da0 <_printf_common+0xa4>
 8005d62:	6823      	ldr	r3, [r4, #0]
 8005d64:	68e5      	ldr	r5, [r4, #12]
 8005d66:	6832      	ldr	r2, [r6, #0]
 8005d68:	f003 0306 	and.w	r3, r3, #6
 8005d6c:	2b04      	cmp	r3, #4
 8005d6e:	bf08      	it	eq
 8005d70:	1aad      	subeq	r5, r5, r2
 8005d72:	68a3      	ldr	r3, [r4, #8]
 8005d74:	6922      	ldr	r2, [r4, #16]
 8005d76:	bf0c      	ite	eq
 8005d78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d7c:	2500      	movne	r5, #0
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	bfc4      	itt	gt
 8005d82:	1a9b      	subgt	r3, r3, r2
 8005d84:	18ed      	addgt	r5, r5, r3
 8005d86:	2600      	movs	r6, #0
 8005d88:	341a      	adds	r4, #26
 8005d8a:	42b5      	cmp	r5, r6
 8005d8c:	d11a      	bne.n	8005dc4 <_printf_common+0xc8>
 8005d8e:	2000      	movs	r0, #0
 8005d90:	e008      	b.n	8005da4 <_printf_common+0xa8>
 8005d92:	2301      	movs	r3, #1
 8005d94:	4652      	mov	r2, sl
 8005d96:	4649      	mov	r1, r9
 8005d98:	4638      	mov	r0, r7
 8005d9a:	47c0      	blx	r8
 8005d9c:	3001      	adds	r0, #1
 8005d9e:	d103      	bne.n	8005da8 <_printf_common+0xac>
 8005da0:	f04f 30ff 	mov.w	r0, #4294967295
 8005da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005da8:	3501      	adds	r5, #1
 8005daa:	e7c6      	b.n	8005d3a <_printf_common+0x3e>
 8005dac:	18e1      	adds	r1, r4, r3
 8005dae:	1c5a      	adds	r2, r3, #1
 8005db0:	2030      	movs	r0, #48	; 0x30
 8005db2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005db6:	4422      	add	r2, r4
 8005db8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005dbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005dc0:	3302      	adds	r3, #2
 8005dc2:	e7c7      	b.n	8005d54 <_printf_common+0x58>
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	4622      	mov	r2, r4
 8005dc8:	4649      	mov	r1, r9
 8005dca:	4638      	mov	r0, r7
 8005dcc:	47c0      	blx	r8
 8005dce:	3001      	adds	r0, #1
 8005dd0:	d0e6      	beq.n	8005da0 <_printf_common+0xa4>
 8005dd2:	3601      	adds	r6, #1
 8005dd4:	e7d9      	b.n	8005d8a <_printf_common+0x8e>
	...

08005dd8 <_printf_i>:
 8005dd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ddc:	7e0f      	ldrb	r7, [r1, #24]
 8005dde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005de0:	2f78      	cmp	r7, #120	; 0x78
 8005de2:	4691      	mov	r9, r2
 8005de4:	4680      	mov	r8, r0
 8005de6:	460c      	mov	r4, r1
 8005de8:	469a      	mov	sl, r3
 8005dea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005dee:	d807      	bhi.n	8005e00 <_printf_i+0x28>
 8005df0:	2f62      	cmp	r7, #98	; 0x62
 8005df2:	d80a      	bhi.n	8005e0a <_printf_i+0x32>
 8005df4:	2f00      	cmp	r7, #0
 8005df6:	f000 80d8 	beq.w	8005faa <_printf_i+0x1d2>
 8005dfa:	2f58      	cmp	r7, #88	; 0x58
 8005dfc:	f000 80a3 	beq.w	8005f46 <_printf_i+0x16e>
 8005e00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e08:	e03a      	b.n	8005e80 <_printf_i+0xa8>
 8005e0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e0e:	2b15      	cmp	r3, #21
 8005e10:	d8f6      	bhi.n	8005e00 <_printf_i+0x28>
 8005e12:	a101      	add	r1, pc, #4	; (adr r1, 8005e18 <_printf_i+0x40>)
 8005e14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e18:	08005e71 	.word	0x08005e71
 8005e1c:	08005e85 	.word	0x08005e85
 8005e20:	08005e01 	.word	0x08005e01
 8005e24:	08005e01 	.word	0x08005e01
 8005e28:	08005e01 	.word	0x08005e01
 8005e2c:	08005e01 	.word	0x08005e01
 8005e30:	08005e85 	.word	0x08005e85
 8005e34:	08005e01 	.word	0x08005e01
 8005e38:	08005e01 	.word	0x08005e01
 8005e3c:	08005e01 	.word	0x08005e01
 8005e40:	08005e01 	.word	0x08005e01
 8005e44:	08005f91 	.word	0x08005f91
 8005e48:	08005eb5 	.word	0x08005eb5
 8005e4c:	08005f73 	.word	0x08005f73
 8005e50:	08005e01 	.word	0x08005e01
 8005e54:	08005e01 	.word	0x08005e01
 8005e58:	08005fb3 	.word	0x08005fb3
 8005e5c:	08005e01 	.word	0x08005e01
 8005e60:	08005eb5 	.word	0x08005eb5
 8005e64:	08005e01 	.word	0x08005e01
 8005e68:	08005e01 	.word	0x08005e01
 8005e6c:	08005f7b 	.word	0x08005f7b
 8005e70:	682b      	ldr	r3, [r5, #0]
 8005e72:	1d1a      	adds	r2, r3, #4
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	602a      	str	r2, [r5, #0]
 8005e78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e80:	2301      	movs	r3, #1
 8005e82:	e0a3      	b.n	8005fcc <_printf_i+0x1f4>
 8005e84:	6820      	ldr	r0, [r4, #0]
 8005e86:	6829      	ldr	r1, [r5, #0]
 8005e88:	0606      	lsls	r6, r0, #24
 8005e8a:	f101 0304 	add.w	r3, r1, #4
 8005e8e:	d50a      	bpl.n	8005ea6 <_printf_i+0xce>
 8005e90:	680e      	ldr	r6, [r1, #0]
 8005e92:	602b      	str	r3, [r5, #0]
 8005e94:	2e00      	cmp	r6, #0
 8005e96:	da03      	bge.n	8005ea0 <_printf_i+0xc8>
 8005e98:	232d      	movs	r3, #45	; 0x2d
 8005e9a:	4276      	negs	r6, r6
 8005e9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ea0:	485e      	ldr	r0, [pc, #376]	; (800601c <_printf_i+0x244>)
 8005ea2:	230a      	movs	r3, #10
 8005ea4:	e019      	b.n	8005eda <_printf_i+0x102>
 8005ea6:	680e      	ldr	r6, [r1, #0]
 8005ea8:	602b      	str	r3, [r5, #0]
 8005eaa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005eae:	bf18      	it	ne
 8005eb0:	b236      	sxthne	r6, r6
 8005eb2:	e7ef      	b.n	8005e94 <_printf_i+0xbc>
 8005eb4:	682b      	ldr	r3, [r5, #0]
 8005eb6:	6820      	ldr	r0, [r4, #0]
 8005eb8:	1d19      	adds	r1, r3, #4
 8005eba:	6029      	str	r1, [r5, #0]
 8005ebc:	0601      	lsls	r1, r0, #24
 8005ebe:	d501      	bpl.n	8005ec4 <_printf_i+0xec>
 8005ec0:	681e      	ldr	r6, [r3, #0]
 8005ec2:	e002      	b.n	8005eca <_printf_i+0xf2>
 8005ec4:	0646      	lsls	r6, r0, #25
 8005ec6:	d5fb      	bpl.n	8005ec0 <_printf_i+0xe8>
 8005ec8:	881e      	ldrh	r6, [r3, #0]
 8005eca:	4854      	ldr	r0, [pc, #336]	; (800601c <_printf_i+0x244>)
 8005ecc:	2f6f      	cmp	r7, #111	; 0x6f
 8005ece:	bf0c      	ite	eq
 8005ed0:	2308      	moveq	r3, #8
 8005ed2:	230a      	movne	r3, #10
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005eda:	6865      	ldr	r5, [r4, #4]
 8005edc:	60a5      	str	r5, [r4, #8]
 8005ede:	2d00      	cmp	r5, #0
 8005ee0:	bfa2      	ittt	ge
 8005ee2:	6821      	ldrge	r1, [r4, #0]
 8005ee4:	f021 0104 	bicge.w	r1, r1, #4
 8005ee8:	6021      	strge	r1, [r4, #0]
 8005eea:	b90e      	cbnz	r6, 8005ef0 <_printf_i+0x118>
 8005eec:	2d00      	cmp	r5, #0
 8005eee:	d04d      	beq.n	8005f8c <_printf_i+0x1b4>
 8005ef0:	4615      	mov	r5, r2
 8005ef2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ef6:	fb03 6711 	mls	r7, r3, r1, r6
 8005efa:	5dc7      	ldrb	r7, [r0, r7]
 8005efc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f00:	4637      	mov	r7, r6
 8005f02:	42bb      	cmp	r3, r7
 8005f04:	460e      	mov	r6, r1
 8005f06:	d9f4      	bls.n	8005ef2 <_printf_i+0x11a>
 8005f08:	2b08      	cmp	r3, #8
 8005f0a:	d10b      	bne.n	8005f24 <_printf_i+0x14c>
 8005f0c:	6823      	ldr	r3, [r4, #0]
 8005f0e:	07de      	lsls	r6, r3, #31
 8005f10:	d508      	bpl.n	8005f24 <_printf_i+0x14c>
 8005f12:	6923      	ldr	r3, [r4, #16]
 8005f14:	6861      	ldr	r1, [r4, #4]
 8005f16:	4299      	cmp	r1, r3
 8005f18:	bfde      	ittt	le
 8005f1a:	2330      	movle	r3, #48	; 0x30
 8005f1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f24:	1b52      	subs	r2, r2, r5
 8005f26:	6122      	str	r2, [r4, #16]
 8005f28:	f8cd a000 	str.w	sl, [sp]
 8005f2c:	464b      	mov	r3, r9
 8005f2e:	aa03      	add	r2, sp, #12
 8005f30:	4621      	mov	r1, r4
 8005f32:	4640      	mov	r0, r8
 8005f34:	f7ff fee2 	bl	8005cfc <_printf_common>
 8005f38:	3001      	adds	r0, #1
 8005f3a:	d14c      	bne.n	8005fd6 <_printf_i+0x1fe>
 8005f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f40:	b004      	add	sp, #16
 8005f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f46:	4835      	ldr	r0, [pc, #212]	; (800601c <_printf_i+0x244>)
 8005f48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005f4c:	6829      	ldr	r1, [r5, #0]
 8005f4e:	6823      	ldr	r3, [r4, #0]
 8005f50:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f54:	6029      	str	r1, [r5, #0]
 8005f56:	061d      	lsls	r5, r3, #24
 8005f58:	d514      	bpl.n	8005f84 <_printf_i+0x1ac>
 8005f5a:	07df      	lsls	r7, r3, #31
 8005f5c:	bf44      	itt	mi
 8005f5e:	f043 0320 	orrmi.w	r3, r3, #32
 8005f62:	6023      	strmi	r3, [r4, #0]
 8005f64:	b91e      	cbnz	r6, 8005f6e <_printf_i+0x196>
 8005f66:	6823      	ldr	r3, [r4, #0]
 8005f68:	f023 0320 	bic.w	r3, r3, #32
 8005f6c:	6023      	str	r3, [r4, #0]
 8005f6e:	2310      	movs	r3, #16
 8005f70:	e7b0      	b.n	8005ed4 <_printf_i+0xfc>
 8005f72:	6823      	ldr	r3, [r4, #0]
 8005f74:	f043 0320 	orr.w	r3, r3, #32
 8005f78:	6023      	str	r3, [r4, #0]
 8005f7a:	2378      	movs	r3, #120	; 0x78
 8005f7c:	4828      	ldr	r0, [pc, #160]	; (8006020 <_printf_i+0x248>)
 8005f7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f82:	e7e3      	b.n	8005f4c <_printf_i+0x174>
 8005f84:	0659      	lsls	r1, r3, #25
 8005f86:	bf48      	it	mi
 8005f88:	b2b6      	uxthmi	r6, r6
 8005f8a:	e7e6      	b.n	8005f5a <_printf_i+0x182>
 8005f8c:	4615      	mov	r5, r2
 8005f8e:	e7bb      	b.n	8005f08 <_printf_i+0x130>
 8005f90:	682b      	ldr	r3, [r5, #0]
 8005f92:	6826      	ldr	r6, [r4, #0]
 8005f94:	6961      	ldr	r1, [r4, #20]
 8005f96:	1d18      	adds	r0, r3, #4
 8005f98:	6028      	str	r0, [r5, #0]
 8005f9a:	0635      	lsls	r5, r6, #24
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	d501      	bpl.n	8005fa4 <_printf_i+0x1cc>
 8005fa0:	6019      	str	r1, [r3, #0]
 8005fa2:	e002      	b.n	8005faa <_printf_i+0x1d2>
 8005fa4:	0670      	lsls	r0, r6, #25
 8005fa6:	d5fb      	bpl.n	8005fa0 <_printf_i+0x1c8>
 8005fa8:	8019      	strh	r1, [r3, #0]
 8005faa:	2300      	movs	r3, #0
 8005fac:	6123      	str	r3, [r4, #16]
 8005fae:	4615      	mov	r5, r2
 8005fb0:	e7ba      	b.n	8005f28 <_printf_i+0x150>
 8005fb2:	682b      	ldr	r3, [r5, #0]
 8005fb4:	1d1a      	adds	r2, r3, #4
 8005fb6:	602a      	str	r2, [r5, #0]
 8005fb8:	681d      	ldr	r5, [r3, #0]
 8005fba:	6862      	ldr	r2, [r4, #4]
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	4628      	mov	r0, r5
 8005fc0:	f7fa f906 	bl	80001d0 <memchr>
 8005fc4:	b108      	cbz	r0, 8005fca <_printf_i+0x1f2>
 8005fc6:	1b40      	subs	r0, r0, r5
 8005fc8:	6060      	str	r0, [r4, #4]
 8005fca:	6863      	ldr	r3, [r4, #4]
 8005fcc:	6123      	str	r3, [r4, #16]
 8005fce:	2300      	movs	r3, #0
 8005fd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fd4:	e7a8      	b.n	8005f28 <_printf_i+0x150>
 8005fd6:	6923      	ldr	r3, [r4, #16]
 8005fd8:	462a      	mov	r2, r5
 8005fda:	4649      	mov	r1, r9
 8005fdc:	4640      	mov	r0, r8
 8005fde:	47d0      	blx	sl
 8005fe0:	3001      	adds	r0, #1
 8005fe2:	d0ab      	beq.n	8005f3c <_printf_i+0x164>
 8005fe4:	6823      	ldr	r3, [r4, #0]
 8005fe6:	079b      	lsls	r3, r3, #30
 8005fe8:	d413      	bmi.n	8006012 <_printf_i+0x23a>
 8005fea:	68e0      	ldr	r0, [r4, #12]
 8005fec:	9b03      	ldr	r3, [sp, #12]
 8005fee:	4298      	cmp	r0, r3
 8005ff0:	bfb8      	it	lt
 8005ff2:	4618      	movlt	r0, r3
 8005ff4:	e7a4      	b.n	8005f40 <_printf_i+0x168>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	4632      	mov	r2, r6
 8005ffa:	4649      	mov	r1, r9
 8005ffc:	4640      	mov	r0, r8
 8005ffe:	47d0      	blx	sl
 8006000:	3001      	adds	r0, #1
 8006002:	d09b      	beq.n	8005f3c <_printf_i+0x164>
 8006004:	3501      	adds	r5, #1
 8006006:	68e3      	ldr	r3, [r4, #12]
 8006008:	9903      	ldr	r1, [sp, #12]
 800600a:	1a5b      	subs	r3, r3, r1
 800600c:	42ab      	cmp	r3, r5
 800600e:	dcf2      	bgt.n	8005ff6 <_printf_i+0x21e>
 8006010:	e7eb      	b.n	8005fea <_printf_i+0x212>
 8006012:	2500      	movs	r5, #0
 8006014:	f104 0619 	add.w	r6, r4, #25
 8006018:	e7f5      	b.n	8006006 <_printf_i+0x22e>
 800601a:	bf00      	nop
 800601c:	08006441 	.word	0x08006441
 8006020:	08006452 	.word	0x08006452

08006024 <memcpy>:
 8006024:	440a      	add	r2, r1
 8006026:	4291      	cmp	r1, r2
 8006028:	f100 33ff 	add.w	r3, r0, #4294967295
 800602c:	d100      	bne.n	8006030 <memcpy+0xc>
 800602e:	4770      	bx	lr
 8006030:	b510      	push	{r4, lr}
 8006032:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006036:	f803 4f01 	strb.w	r4, [r3, #1]!
 800603a:	4291      	cmp	r1, r2
 800603c:	d1f9      	bne.n	8006032 <memcpy+0xe>
 800603e:	bd10      	pop	{r4, pc}

08006040 <memmove>:
 8006040:	4288      	cmp	r0, r1
 8006042:	b510      	push	{r4, lr}
 8006044:	eb01 0402 	add.w	r4, r1, r2
 8006048:	d902      	bls.n	8006050 <memmove+0x10>
 800604a:	4284      	cmp	r4, r0
 800604c:	4623      	mov	r3, r4
 800604e:	d807      	bhi.n	8006060 <memmove+0x20>
 8006050:	1e43      	subs	r3, r0, #1
 8006052:	42a1      	cmp	r1, r4
 8006054:	d008      	beq.n	8006068 <memmove+0x28>
 8006056:	f811 2b01 	ldrb.w	r2, [r1], #1
 800605a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800605e:	e7f8      	b.n	8006052 <memmove+0x12>
 8006060:	4402      	add	r2, r0
 8006062:	4601      	mov	r1, r0
 8006064:	428a      	cmp	r2, r1
 8006066:	d100      	bne.n	800606a <memmove+0x2a>
 8006068:	bd10      	pop	{r4, pc}
 800606a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800606e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006072:	e7f7      	b.n	8006064 <memmove+0x24>

08006074 <_free_r>:
 8006074:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006076:	2900      	cmp	r1, #0
 8006078:	d044      	beq.n	8006104 <_free_r+0x90>
 800607a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800607e:	9001      	str	r0, [sp, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	f1a1 0404 	sub.w	r4, r1, #4
 8006086:	bfb8      	it	lt
 8006088:	18e4      	addlt	r4, r4, r3
 800608a:	f000 f913 	bl	80062b4 <__malloc_lock>
 800608e:	4a1e      	ldr	r2, [pc, #120]	; (8006108 <_free_r+0x94>)
 8006090:	9801      	ldr	r0, [sp, #4]
 8006092:	6813      	ldr	r3, [r2, #0]
 8006094:	b933      	cbnz	r3, 80060a4 <_free_r+0x30>
 8006096:	6063      	str	r3, [r4, #4]
 8006098:	6014      	str	r4, [r2, #0]
 800609a:	b003      	add	sp, #12
 800609c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060a0:	f000 b90e 	b.w	80062c0 <__malloc_unlock>
 80060a4:	42a3      	cmp	r3, r4
 80060a6:	d908      	bls.n	80060ba <_free_r+0x46>
 80060a8:	6825      	ldr	r5, [r4, #0]
 80060aa:	1961      	adds	r1, r4, r5
 80060ac:	428b      	cmp	r3, r1
 80060ae:	bf01      	itttt	eq
 80060b0:	6819      	ldreq	r1, [r3, #0]
 80060b2:	685b      	ldreq	r3, [r3, #4]
 80060b4:	1949      	addeq	r1, r1, r5
 80060b6:	6021      	streq	r1, [r4, #0]
 80060b8:	e7ed      	b.n	8006096 <_free_r+0x22>
 80060ba:	461a      	mov	r2, r3
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	b10b      	cbz	r3, 80060c4 <_free_r+0x50>
 80060c0:	42a3      	cmp	r3, r4
 80060c2:	d9fa      	bls.n	80060ba <_free_r+0x46>
 80060c4:	6811      	ldr	r1, [r2, #0]
 80060c6:	1855      	adds	r5, r2, r1
 80060c8:	42a5      	cmp	r5, r4
 80060ca:	d10b      	bne.n	80060e4 <_free_r+0x70>
 80060cc:	6824      	ldr	r4, [r4, #0]
 80060ce:	4421      	add	r1, r4
 80060d0:	1854      	adds	r4, r2, r1
 80060d2:	42a3      	cmp	r3, r4
 80060d4:	6011      	str	r1, [r2, #0]
 80060d6:	d1e0      	bne.n	800609a <_free_r+0x26>
 80060d8:	681c      	ldr	r4, [r3, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	6053      	str	r3, [r2, #4]
 80060de:	4421      	add	r1, r4
 80060e0:	6011      	str	r1, [r2, #0]
 80060e2:	e7da      	b.n	800609a <_free_r+0x26>
 80060e4:	d902      	bls.n	80060ec <_free_r+0x78>
 80060e6:	230c      	movs	r3, #12
 80060e8:	6003      	str	r3, [r0, #0]
 80060ea:	e7d6      	b.n	800609a <_free_r+0x26>
 80060ec:	6825      	ldr	r5, [r4, #0]
 80060ee:	1961      	adds	r1, r4, r5
 80060f0:	428b      	cmp	r3, r1
 80060f2:	bf04      	itt	eq
 80060f4:	6819      	ldreq	r1, [r3, #0]
 80060f6:	685b      	ldreq	r3, [r3, #4]
 80060f8:	6063      	str	r3, [r4, #4]
 80060fa:	bf04      	itt	eq
 80060fc:	1949      	addeq	r1, r1, r5
 80060fe:	6021      	streq	r1, [r4, #0]
 8006100:	6054      	str	r4, [r2, #4]
 8006102:	e7ca      	b.n	800609a <_free_r+0x26>
 8006104:	b003      	add	sp, #12
 8006106:	bd30      	pop	{r4, r5, pc}
 8006108:	20000230 	.word	0x20000230

0800610c <sbrk_aligned>:
 800610c:	b570      	push	{r4, r5, r6, lr}
 800610e:	4e0e      	ldr	r6, [pc, #56]	; (8006148 <sbrk_aligned+0x3c>)
 8006110:	460c      	mov	r4, r1
 8006112:	6831      	ldr	r1, [r6, #0]
 8006114:	4605      	mov	r5, r0
 8006116:	b911      	cbnz	r1, 800611e <sbrk_aligned+0x12>
 8006118:	f000 f8bc 	bl	8006294 <_sbrk_r>
 800611c:	6030      	str	r0, [r6, #0]
 800611e:	4621      	mov	r1, r4
 8006120:	4628      	mov	r0, r5
 8006122:	f000 f8b7 	bl	8006294 <_sbrk_r>
 8006126:	1c43      	adds	r3, r0, #1
 8006128:	d00a      	beq.n	8006140 <sbrk_aligned+0x34>
 800612a:	1cc4      	adds	r4, r0, #3
 800612c:	f024 0403 	bic.w	r4, r4, #3
 8006130:	42a0      	cmp	r0, r4
 8006132:	d007      	beq.n	8006144 <sbrk_aligned+0x38>
 8006134:	1a21      	subs	r1, r4, r0
 8006136:	4628      	mov	r0, r5
 8006138:	f000 f8ac 	bl	8006294 <_sbrk_r>
 800613c:	3001      	adds	r0, #1
 800613e:	d101      	bne.n	8006144 <sbrk_aligned+0x38>
 8006140:	f04f 34ff 	mov.w	r4, #4294967295
 8006144:	4620      	mov	r0, r4
 8006146:	bd70      	pop	{r4, r5, r6, pc}
 8006148:	20000234 	.word	0x20000234

0800614c <_malloc_r>:
 800614c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006150:	1ccd      	adds	r5, r1, #3
 8006152:	f025 0503 	bic.w	r5, r5, #3
 8006156:	3508      	adds	r5, #8
 8006158:	2d0c      	cmp	r5, #12
 800615a:	bf38      	it	cc
 800615c:	250c      	movcc	r5, #12
 800615e:	2d00      	cmp	r5, #0
 8006160:	4607      	mov	r7, r0
 8006162:	db01      	blt.n	8006168 <_malloc_r+0x1c>
 8006164:	42a9      	cmp	r1, r5
 8006166:	d905      	bls.n	8006174 <_malloc_r+0x28>
 8006168:	230c      	movs	r3, #12
 800616a:	603b      	str	r3, [r7, #0]
 800616c:	2600      	movs	r6, #0
 800616e:	4630      	mov	r0, r6
 8006170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006174:	4e2e      	ldr	r6, [pc, #184]	; (8006230 <_malloc_r+0xe4>)
 8006176:	f000 f89d 	bl	80062b4 <__malloc_lock>
 800617a:	6833      	ldr	r3, [r6, #0]
 800617c:	461c      	mov	r4, r3
 800617e:	bb34      	cbnz	r4, 80061ce <_malloc_r+0x82>
 8006180:	4629      	mov	r1, r5
 8006182:	4638      	mov	r0, r7
 8006184:	f7ff ffc2 	bl	800610c <sbrk_aligned>
 8006188:	1c43      	adds	r3, r0, #1
 800618a:	4604      	mov	r4, r0
 800618c:	d14d      	bne.n	800622a <_malloc_r+0xde>
 800618e:	6834      	ldr	r4, [r6, #0]
 8006190:	4626      	mov	r6, r4
 8006192:	2e00      	cmp	r6, #0
 8006194:	d140      	bne.n	8006218 <_malloc_r+0xcc>
 8006196:	6823      	ldr	r3, [r4, #0]
 8006198:	4631      	mov	r1, r6
 800619a:	4638      	mov	r0, r7
 800619c:	eb04 0803 	add.w	r8, r4, r3
 80061a0:	f000 f878 	bl	8006294 <_sbrk_r>
 80061a4:	4580      	cmp	r8, r0
 80061a6:	d13a      	bne.n	800621e <_malloc_r+0xd2>
 80061a8:	6821      	ldr	r1, [r4, #0]
 80061aa:	3503      	adds	r5, #3
 80061ac:	1a6d      	subs	r5, r5, r1
 80061ae:	f025 0503 	bic.w	r5, r5, #3
 80061b2:	3508      	adds	r5, #8
 80061b4:	2d0c      	cmp	r5, #12
 80061b6:	bf38      	it	cc
 80061b8:	250c      	movcc	r5, #12
 80061ba:	4629      	mov	r1, r5
 80061bc:	4638      	mov	r0, r7
 80061be:	f7ff ffa5 	bl	800610c <sbrk_aligned>
 80061c2:	3001      	adds	r0, #1
 80061c4:	d02b      	beq.n	800621e <_malloc_r+0xd2>
 80061c6:	6823      	ldr	r3, [r4, #0]
 80061c8:	442b      	add	r3, r5
 80061ca:	6023      	str	r3, [r4, #0]
 80061cc:	e00e      	b.n	80061ec <_malloc_r+0xa0>
 80061ce:	6822      	ldr	r2, [r4, #0]
 80061d0:	1b52      	subs	r2, r2, r5
 80061d2:	d41e      	bmi.n	8006212 <_malloc_r+0xc6>
 80061d4:	2a0b      	cmp	r2, #11
 80061d6:	d916      	bls.n	8006206 <_malloc_r+0xba>
 80061d8:	1961      	adds	r1, r4, r5
 80061da:	42a3      	cmp	r3, r4
 80061dc:	6025      	str	r5, [r4, #0]
 80061de:	bf18      	it	ne
 80061e0:	6059      	strne	r1, [r3, #4]
 80061e2:	6863      	ldr	r3, [r4, #4]
 80061e4:	bf08      	it	eq
 80061e6:	6031      	streq	r1, [r6, #0]
 80061e8:	5162      	str	r2, [r4, r5]
 80061ea:	604b      	str	r3, [r1, #4]
 80061ec:	4638      	mov	r0, r7
 80061ee:	f104 060b 	add.w	r6, r4, #11
 80061f2:	f000 f865 	bl	80062c0 <__malloc_unlock>
 80061f6:	f026 0607 	bic.w	r6, r6, #7
 80061fa:	1d23      	adds	r3, r4, #4
 80061fc:	1af2      	subs	r2, r6, r3
 80061fe:	d0b6      	beq.n	800616e <_malloc_r+0x22>
 8006200:	1b9b      	subs	r3, r3, r6
 8006202:	50a3      	str	r3, [r4, r2]
 8006204:	e7b3      	b.n	800616e <_malloc_r+0x22>
 8006206:	6862      	ldr	r2, [r4, #4]
 8006208:	42a3      	cmp	r3, r4
 800620a:	bf0c      	ite	eq
 800620c:	6032      	streq	r2, [r6, #0]
 800620e:	605a      	strne	r2, [r3, #4]
 8006210:	e7ec      	b.n	80061ec <_malloc_r+0xa0>
 8006212:	4623      	mov	r3, r4
 8006214:	6864      	ldr	r4, [r4, #4]
 8006216:	e7b2      	b.n	800617e <_malloc_r+0x32>
 8006218:	4634      	mov	r4, r6
 800621a:	6876      	ldr	r6, [r6, #4]
 800621c:	e7b9      	b.n	8006192 <_malloc_r+0x46>
 800621e:	230c      	movs	r3, #12
 8006220:	603b      	str	r3, [r7, #0]
 8006222:	4638      	mov	r0, r7
 8006224:	f000 f84c 	bl	80062c0 <__malloc_unlock>
 8006228:	e7a1      	b.n	800616e <_malloc_r+0x22>
 800622a:	6025      	str	r5, [r4, #0]
 800622c:	e7de      	b.n	80061ec <_malloc_r+0xa0>
 800622e:	bf00      	nop
 8006230:	20000230 	.word	0x20000230

08006234 <_realloc_r>:
 8006234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006238:	4680      	mov	r8, r0
 800623a:	4614      	mov	r4, r2
 800623c:	460e      	mov	r6, r1
 800623e:	b921      	cbnz	r1, 800624a <_realloc_r+0x16>
 8006240:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006244:	4611      	mov	r1, r2
 8006246:	f7ff bf81 	b.w	800614c <_malloc_r>
 800624a:	b92a      	cbnz	r2, 8006258 <_realloc_r+0x24>
 800624c:	f7ff ff12 	bl	8006074 <_free_r>
 8006250:	4625      	mov	r5, r4
 8006252:	4628      	mov	r0, r5
 8006254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006258:	f000 f838 	bl	80062cc <_malloc_usable_size_r>
 800625c:	4284      	cmp	r4, r0
 800625e:	4607      	mov	r7, r0
 8006260:	d802      	bhi.n	8006268 <_realloc_r+0x34>
 8006262:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006266:	d812      	bhi.n	800628e <_realloc_r+0x5a>
 8006268:	4621      	mov	r1, r4
 800626a:	4640      	mov	r0, r8
 800626c:	f7ff ff6e 	bl	800614c <_malloc_r>
 8006270:	4605      	mov	r5, r0
 8006272:	2800      	cmp	r0, #0
 8006274:	d0ed      	beq.n	8006252 <_realloc_r+0x1e>
 8006276:	42bc      	cmp	r4, r7
 8006278:	4622      	mov	r2, r4
 800627a:	4631      	mov	r1, r6
 800627c:	bf28      	it	cs
 800627e:	463a      	movcs	r2, r7
 8006280:	f7ff fed0 	bl	8006024 <memcpy>
 8006284:	4631      	mov	r1, r6
 8006286:	4640      	mov	r0, r8
 8006288:	f7ff fef4 	bl	8006074 <_free_r>
 800628c:	e7e1      	b.n	8006252 <_realloc_r+0x1e>
 800628e:	4635      	mov	r5, r6
 8006290:	e7df      	b.n	8006252 <_realloc_r+0x1e>
	...

08006294 <_sbrk_r>:
 8006294:	b538      	push	{r3, r4, r5, lr}
 8006296:	4d06      	ldr	r5, [pc, #24]	; (80062b0 <_sbrk_r+0x1c>)
 8006298:	2300      	movs	r3, #0
 800629a:	4604      	mov	r4, r0
 800629c:	4608      	mov	r0, r1
 800629e:	602b      	str	r3, [r5, #0]
 80062a0:	f7fb fcec 	bl	8001c7c <_sbrk>
 80062a4:	1c43      	adds	r3, r0, #1
 80062a6:	d102      	bne.n	80062ae <_sbrk_r+0x1a>
 80062a8:	682b      	ldr	r3, [r5, #0]
 80062aa:	b103      	cbz	r3, 80062ae <_sbrk_r+0x1a>
 80062ac:	6023      	str	r3, [r4, #0]
 80062ae:	bd38      	pop	{r3, r4, r5, pc}
 80062b0:	20000238 	.word	0x20000238

080062b4 <__malloc_lock>:
 80062b4:	4801      	ldr	r0, [pc, #4]	; (80062bc <__malloc_lock+0x8>)
 80062b6:	f000 b811 	b.w	80062dc <__retarget_lock_acquire_recursive>
 80062ba:	bf00      	nop
 80062bc:	2000023c 	.word	0x2000023c

080062c0 <__malloc_unlock>:
 80062c0:	4801      	ldr	r0, [pc, #4]	; (80062c8 <__malloc_unlock+0x8>)
 80062c2:	f000 b80c 	b.w	80062de <__retarget_lock_release_recursive>
 80062c6:	bf00      	nop
 80062c8:	2000023c 	.word	0x2000023c

080062cc <_malloc_usable_size_r>:
 80062cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062d0:	1f18      	subs	r0, r3, #4
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	bfbc      	itt	lt
 80062d6:	580b      	ldrlt	r3, [r1, r0]
 80062d8:	18c0      	addlt	r0, r0, r3
 80062da:	4770      	bx	lr

080062dc <__retarget_lock_acquire_recursive>:
 80062dc:	4770      	bx	lr

080062de <__retarget_lock_release_recursive>:
 80062de:	4770      	bx	lr

080062e0 <_init>:
 80062e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062e2:	bf00      	nop
 80062e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062e6:	bc08      	pop	{r3}
 80062e8:	469e      	mov	lr, r3
 80062ea:	4770      	bx	lr

080062ec <_fini>:
 80062ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ee:	bf00      	nop
 80062f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062f2:	bc08      	pop	{r3}
 80062f4:	469e      	mov	lr, r3
 80062f6:	4770      	bx	lr


EIDSController5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08005be0  08005be0  00015be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d1c  08005d1c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08005d1c  08005d1c  00015d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d24  08005d24  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d24  08005d24  00015d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d28  08005d28  00015d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08005d2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00000170  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00006000  200001f0  200001f0  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f0c5  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002013  00000000  00000000  0002f175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db0  00000000  00000000  00031188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cf8  00000000  00000000  00031f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021852  00000000  00000000  00032c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f209  00000000  00000000  00054482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbe87  00000000  00000000  0006368b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012f512  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d9c  00000000  00000000  0012f564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005bc8 	.word	0x08005bc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08005bc8 	.word	0x08005bc8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <startPWM>:
uint16_t dead_value =0;
uint16_t pulse2=0,geriSayim=0;
uint32_t deneme=0;

void startPWM(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start(&htim1,TIM_CHANNEL_2);			//OC2			enable
 8000578:	2104      	movs	r1, #4
 800057a:	4808      	ldr	r0, [pc, #32]	; (800059c <startPWM+0x28>)
 800057c:	f002 fb78 	bl	8002c70 <HAL_TIM_OC_Start>
	HAL_TIMEx_OCN_Start(&htim1,TIM_CHANNEL_2);	//OC2N		enable
 8000580:	2104      	movs	r1, #4
 8000582:	4806      	ldr	r0, [pc, #24]	; (800059c <startPWM+0x28>)
 8000584:	f003 fbfe 	bl	8003d84 <HAL_TIMEx_OCN_Start>

	HAL_TIM_OC_Start(&htim1,TIM_CHANNEL_3);			//OC3			enable
 8000588:	2108      	movs	r1, #8
 800058a:	4804      	ldr	r0, [pc, #16]	; (800059c <startPWM+0x28>)
 800058c:	f002 fb70 	bl	8002c70 <HAL_TIM_OC_Start>
	HAL_TIMEx_OCN_Start(&htim1,TIM_CHANNEL_3);	//OC3N		enable
 8000590:	2108      	movs	r1, #8
 8000592:	4802      	ldr	r0, [pc, #8]	; (800059c <startPWM+0x28>)
 8000594:	f003 fbf6 	bl	8003d84 <HAL_TIMEx_OCN_Start>
}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	200000a0 	.word	0x200000a0

080005a0 <stopPWM>:

void stopPWM(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Stop(&htim1,TIM_CHANNEL_2);		//stop pwm output	or user function
 80005a4:	2104      	movs	r1, #4
 80005a6:	4808      	ldr	r0, [pc, #32]	; (80005c8 <stopPWM+0x28>)
 80005a8:	f002 fc2a 	bl	8002e00 <HAL_TIM_OC_Stop>
	HAL_TIMEx_OCN_Stop(&htim1,TIM_CHANNEL_2);
 80005ac:	2104      	movs	r1, #4
 80005ae:	4806      	ldr	r0, [pc, #24]	; (80005c8 <stopPWM+0x28>)
 80005b0:	f003 fca2 	bl	8003ef8 <HAL_TIMEx_OCN_Stop>

	HAL_TIM_OC_Stop(&htim1,TIM_CHANNEL_3);
 80005b4:	2108      	movs	r1, #8
 80005b6:	4804      	ldr	r0, [pc, #16]	; (80005c8 <stopPWM+0x28>)
 80005b8:	f002 fc22 	bl	8002e00 <HAL_TIM_OC_Stop>
	HAL_TIMEx_OCN_Stop(&htim1,TIM_CHANNEL_3);
 80005bc:	2108      	movs	r1, #8
 80005be:	4802      	ldr	r0, [pc, #8]	; (80005c8 <stopPWM+0x28>)
 80005c0:	f003 fc9a 	bl	8003ef8 <HAL_TIMEx_OCN_Stop>
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	200000a0 	.word	0x200000a0

080005cc <pulsePWM>:

void pulsePWM(uint16_t pulse)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]

	HAL_Delay(500);
 80005d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005da:	f001 faa5 	bl	8001b28 <HAL_Delay>

	if(geriSayim==0)
 80005de:	4b1b      	ldr	r3, [pc, #108]	; (800064c <pulsePWM+0x80>)
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d10d      	bne.n	8000602 <pulsePWM+0x36>
	{
	pulse2++;
 80005e6:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <pulsePWM+0x84>)
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	3301      	adds	r3, #1
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	4b18      	ldr	r3, [pc, #96]	; (8000650 <pulsePWM+0x84>)
 80005f0:	801a      	strh	r2, [r3, #0]
	if(pulse2>580)
 80005f2:	4b17      	ldr	r3, [pc, #92]	; (8000650 <pulsePWM+0x84>)
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 80005fa:	d902      	bls.n	8000602 <pulsePWM+0x36>
		{
		geriSayim=1;
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <pulsePWM+0x80>)
 80005fe:	2201      	movs	r2, #1
 8000600:	801a      	strh	r2, [r3, #0]
		}
	}

	if(geriSayim==1)
 8000602:	4b12      	ldr	r3, [pc, #72]	; (800064c <pulsePWM+0x80>)
 8000604:	881b      	ldrh	r3, [r3, #0]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d10c      	bne.n	8000624 <pulsePWM+0x58>
	{
		pulse2-=1;//600 oluyor 700de faz takla atıyor.}
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <pulsePWM+0x84>)
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	3b01      	subs	r3, #1
 8000610:	b29a      	uxth	r2, r3
 8000612:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <pulsePWM+0x84>)
 8000614:	801a      	strh	r2, [r3, #0]
		if(pulse2<2){geriSayim=0;}
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <pulsePWM+0x84>)
 8000618:	881b      	ldrh	r3, [r3, #0]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d802      	bhi.n	8000624 <pulsePWM+0x58>
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <pulsePWM+0x80>)
 8000620:	2200      	movs	r2, #0
 8000622:	801a      	strh	r2, [r3, #0]
	//TIM4->PSC=prescalerValue;
	//__HAL_TIM_SET_PRESCALER(&htim2,prescalerValue);
	//__HAL_TIM_SET_PRESCALER(&htim3,prescalerValue);
	//__HAL_TIM_SET_PRESCALER(&htim4,prescalerValue);

 if(prescalerValueOld!=prescalerValue)
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <pulsePWM+0x88>)
 8000626:	881a      	ldrh	r2, [r3, #0]
 8000628:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <pulsePWM+0x8c>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	429a      	cmp	r2, r3
 800062e:	d003      	beq.n	8000638 <pulsePWM+0x6c>
 {


	  prescalerValueOld=prescalerValue;
 8000630:	4b09      	ldr	r3, [pc, #36]	; (8000658 <pulsePWM+0x8c>)
 8000632:	881a      	ldrh	r2, [r3, #0]
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <pulsePWM+0x88>)
 8000636:	801a      	strh	r2, [r3, #0]
	//HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 }
	 //map(x, in_min, in_max, out_min, out_max)


	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pulse2);//pulse fazın kaydırılgı yer.
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <pulsePWM+0x84>)
 800063a:	881a      	ldrh	r2, [r3, #0]
 800063c:	4b07      	ldr	r3, [pc, #28]	; (800065c <pulsePWM+0x90>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200001d2 	.word	0x200001d2
 8000650:	200001d0 	.word	0x200001d0
 8000654:	20000002 	.word	0x20000002
 8000658:	20000000 	.word	0x20000000
 800065c:	200000a0 	.word	0x200000a0

08000660 <deadTimePWM>:

void deadTimePWM(uint16_t dtime)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
	/* Set TIMx_BDTR	->	DTG data	*/
	TIM1->BDTR &= 0xFF00;							//clear	DTG data
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <deadTimePWM+0x30>)
 800066c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066e:	4a08      	ldr	r2, [pc, #32]	; (8000690 <deadTimePWM+0x30>)
 8000670:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000674:	6453      	str	r3, [r2, #68]	; 0x44
	TIM1->BDTR |= (dtime & 0x00FF);	//dtime       	//set	DTG data
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <deadTimePWM+0x30>)
 8000678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800067a:	88fb      	ldrh	r3, [r7, #6]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	4904      	ldr	r1, [pc, #16]	; (8000690 <deadTimePWM+0x30>)
 8000680:	4313      	orrs	r3, r2
 8000682:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	40010000 	.word	0x40010000

08000694 <map>:
uint16_t pwm_value=0,step=1;
uint16_t arrValue=0;
uint16_t preScalar=0,prePulse=0;
long  freqValue=8000000;
long map(long x,long in_min,long in_max,long out_min,long out_max)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
 80006a0:	603b      	str	r3, [r7, #0]
return (x-in_min)*(out_max-out_min)/(in_max-in_min)+out_min;
 80006a2:	68fa      	ldr	r2, [r7, #12]
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	1ad3      	subs	r3, r2, r3
 80006a8:	69b9      	ldr	r1, [r7, #24]
 80006aa:	683a      	ldr	r2, [r7, #0]
 80006ac:	1a8a      	subs	r2, r1, r2
 80006ae:	fb03 f202 	mul.w	r2, r3, r2
 80006b2:	6879      	ldr	r1, [r7, #4]
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	1acb      	subs	r3, r1, r3
 80006b8:	fb92 f2f3 	sdiv	r2, r2, r3
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	4413      	add	r3, r2
//map(value,fromLow,fromHigh,toLow,toHigh);//yapıyı burda actım.
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3714      	adds	r7, #20
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <Constrain>:
uint32_t Constrain(uint32_t au32_IN, uint32_t au32_MIN, uint32_t au32_MAX)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
	if(au32_IN < au32_MIN)
 80006d8:	68fa      	ldr	r2, [r7, #12]
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d201      	bcs.n	80006e4 <Constrain+0x18>
	{
		return au32_MIN;
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	e006      	b.n	80006f2 <Constrain+0x26>
	}
	else if (au32_IN > au32_MAX)
 80006e4:	68fa      	ldr	r2, [r7, #12]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d901      	bls.n	80006f0 <Constrain+0x24>
	{
		return au32_MAX;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	e000      	b.n	80006f2 <Constrain+0x26>
	}
	else
	{
		return au32_IN;
 80006f0:	68fb      	ldr	r3, [r7, #12]
	}
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
	...

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000704:	f001 f99e 	bl	8001a44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000708:	f000 f860 	bl	80007cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070c:	f000 fa28 	bl	8000b60 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000710:	f000 f8c6 	bl	80008a0 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000714:	f000 f982 	bl	8000a1c <MX_TIM4_Init>
  MX_USART6_UART_Init();
 8000718:	f000 f9f8 	bl	8000b0c <MX_USART6_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800071c:	f000 f8b4 	bl	8000888 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_ENABLE(&htim1);										//TIM1		enable
 8000720:	4b25      	ldr	r3, [pc, #148]	; (80007b8 <main+0xb8>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	4b24      	ldr	r3, [pc, #144]	; (80007b8 <main+0xb8>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f042 0201 	orr.w	r2, r2, #1
 800072e:	601a      	str	r2, [r3, #0]
  	startPWM();
 8000730:	f7ff ff20 	bl	8000574 <startPWM>
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_BREAK);	//break interrupt enable
 8000734:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <main+0xb8>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	68da      	ldr	r2, [r3, #12]
 800073a:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <main+0xb8>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000742:	60da      	str	r2, [r3, #12]
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000744:	2100      	movs	r1, #0
 8000746:	481d      	ldr	r0, [pc, #116]	; (80007bc <main+0xbc>)
 8000748:	f002 fc24 	bl	8002f94 <HAL_TIM_PWM_Start>
  
   HAL_Delay(100);
 800074c:	2064      	movs	r0, #100	; 0x64
 800074e:	f001 f9eb 	bl	8001b28 <HAL_Delay>
	CurrentPage = INIT_PAGE;					  
 8000752:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <main+0xc0>)
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
  	Nextion_Page(INIT_PAGE);
 8000758:	2000      	movs	r0, #0
 800075a:	f000 ff37 	bl	80015cc <Nextion_Page>
  	HAL_Delay(2000);
 800075e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000762:	f001 f9e1 	bl	8001b28 <HAL_Delay>
  	//BAsLANGIÇ SAYFASINA YÖNLENDİR
	HAL_Delay(100);
 8000766:	2064      	movs	r0, #100	; 0x64
 8000768:	f001 f9de 	bl	8001b28 <HAL_Delay>
  	CurrentPage = MAIN_PAGE;
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <main+0xc0>)
 800076e:	2213      	movs	r2, #19
 8000770:	701a      	strb	r2, [r3, #0]
  
  
	HAL_UART_Receive_IT (&huart6, (uint8_t *)reading_buffer, 1);
 8000772:	2201      	movs	r2, #1
 8000774:	4913      	ldr	r1, [pc, #76]	; (80007c4 <main+0xc4>)
 8000776:	4814      	ldr	r0, [pc, #80]	; (80007c8 <main+0xc8>)
 8000778:	f003 fdf8 	bl	800436c <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  
	    if (CurrentPage == MAIN_PAGE) {
 800077c:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <main+0xc0>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b13      	cmp	r3, #19
 8000782:	d105      	bne.n	8000790 <main+0x90>
			Nextion_Page(MAIN_PAGE);
 8000784:	2013      	movs	r0, #19
 8000786:	f000 ff21 	bl	80015cc <Nextion_Page>

			FN_MAIN_PAGE();//5
 800078a:	f000 fa5f 	bl	8000c4c <FN_MAIN_PAGE>
 800078e:	e7f5      	b.n	800077c <main+0x7c>
		} else if (CurrentPage == TORQUE_PAGE) {
 8000790:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <main+0xc0>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b14      	cmp	r3, #20
 8000796:	d105      	bne.n	80007a4 <main+0xa4>
			Nextion_Page(TORQUE_PAGE);
 8000798:	2014      	movs	r0, #20
 800079a:	f000 ff17 	bl	80015cc <Nextion_Page>

			FN_TORQUE_PAGE();//5
 800079e:	f000 fb03 	bl	8000da8 <FN_TORQUE_PAGE>
 80007a2:	e7eb      	b.n	800077c <main+0x7c>
		} else if (CurrentPage == RPM_PAGE) {
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <main+0xc0>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b15      	cmp	r3, #21
 80007aa:	d1e7      	bne.n	800077c <main+0x7c>
			Nextion_Page(RPM_PAGE);
 80007ac:	2015      	movs	r0, #21
 80007ae:	f000 ff0d 	bl	80015cc <Nextion_Page>

			FN_RPM_PAGE();//5
 80007b2:	f000 fb09 	bl	8000dc8 <FN_RPM_PAGE>
	    if (CurrentPage == MAIN_PAGE) {
 80007b6:	e7e1      	b.n	800077c <main+0x7c>
 80007b8:	200000a0 	.word	0x200000a0
 80007bc:	200000e8 	.word	0x200000e8
 80007c0:	20000178 	.word	0x20000178
 80007c4:	200001b0 	.word	0x200001b0
 80007c8:	20000130 	.word	0x20000130

080007cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b094      	sub	sp, #80	; 0x50
 80007d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d2:	f107 0320 	add.w	r3, r7, #32
 80007d6:	2230      	movs	r2, #48	; 0x30
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f004 fd7e 	bl	80052dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f0:	2300      	movs	r3, #0
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	4b22      	ldr	r3, [pc, #136]	; (8000880 <SystemClock_Config+0xb4>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f8:	4a21      	ldr	r2, [pc, #132]	; (8000880 <SystemClock_Config+0xb4>)
 80007fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000800:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <SystemClock_Config+0xb4>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800080c:	2300      	movs	r3, #0
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <SystemClock_Config+0xb8>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a1b      	ldr	r2, [pc, #108]	; (8000884 <SystemClock_Config+0xb8>)
 8000816:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800081a:	6013      	str	r3, [r2, #0]
 800081c:	4b19      	ldr	r3, [pc, #100]	; (8000884 <SystemClock_Config+0xb8>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000828:	2301      	movs	r3, #1
 800082a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800082c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000832:	2300      	movs	r3, #0
 8000834:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000836:	f107 0320 	add.w	r3, r7, #32
 800083a:	4618      	mov	r0, r3
 800083c:	f001 fcd8 	bl	80021f0 <HAL_RCC_OscConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000846:	f000 fe5b 	bl	8001500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084a:	230f      	movs	r3, #15
 800084c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800084e:	2301      	movs	r3, #1
 8000850:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000856:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800085a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800085c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000860:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	2100      	movs	r1, #0
 8000868:	4618      	mov	r0, r3
 800086a:	f001 ff39 	bl	80026e0 <HAL_RCC_ClockConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000874:	f000 fe44 	bl	8001500 <Error_Handler>
  }
}
 8000878:	bf00      	nop
 800087a:	3750      	adds	r7, #80	; 0x50
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40023800 	.word	0x40023800
 8000884:	40007000 	.word	0x40007000

08000888 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800088c:	2200      	movs	r2, #0
 800088e:	2100      	movs	r1, #0
 8000890:	2047      	movs	r0, #71	; 0x47
 8000892:	f001 fa48 	bl	8001d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000896:	2047      	movs	r0, #71	; 0x47
 8000898:	f001 fa61 	bl	8001d5e <HAL_NVIC_EnableIRQ>
}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}

080008a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b096      	sub	sp, #88	; 0x58
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]
 80008ce:	615a      	str	r2, [r3, #20]
 80008d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2220      	movs	r2, #32
 80008d6:	2100      	movs	r1, #0
 80008d8:	4618      	mov	r0, r3
 80008da:	f004 fcff 	bl	80052dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008de:	4b4d      	ldr	r3, [pc, #308]	; (8000a14 <MX_TIM1_Init+0x174>)
 80008e0:	4a4d      	ldr	r2, [pc, #308]	; (8000a18 <MX_TIM1_Init+0x178>)
 80008e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008e4:	4b4b      	ldr	r3, [pc, #300]	; (8000a14 <MX_TIM1_Init+0x174>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ea:	4b4a      	ldr	r3, [pc, #296]	; (8000a14 <MX_TIM1_Init+0x174>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 590;
 80008f0:	4b48      	ldr	r3, [pc, #288]	; (8000a14 <MX_TIM1_Init+0x174>)
 80008f2:	f240 224e 	movw	r2, #590	; 0x24e
 80008f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f8:	4b46      	ldr	r3, [pc, #280]	; (8000a14 <MX_TIM1_Init+0x174>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008fe:	4b45      	ldr	r3, [pc, #276]	; (8000a14 <MX_TIM1_Init+0x174>)
 8000900:	2200      	movs	r2, #0
 8000902:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000904:	4b43      	ldr	r3, [pc, #268]	; (8000a14 <MX_TIM1_Init+0x174>)
 8000906:	2280      	movs	r2, #128	; 0x80
 8000908:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800090a:	4842      	ldr	r0, [pc, #264]	; (8000a14 <MX_TIM1_Init+0x174>)
 800090c:	f002 f908 	bl	8002b20 <HAL_TIM_Base_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000916:	f000 fdf3 	bl	8001500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800091a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800091e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000920:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000924:	4619      	mov	r1, r3
 8000926:	483b      	ldr	r0, [pc, #236]	; (8000a14 <MX_TIM1_Init+0x174>)
 8000928:	f002 fe22 	bl	8003570 <HAL_TIM_ConfigClockSource>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000932:	f000 fde5 	bl	8001500 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000936:	4837      	ldr	r0, [pc, #220]	; (8000a14 <MX_TIM1_Init+0x174>)
 8000938:	f002 f941 	bl	8002bbe <HAL_TIM_OC_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000942:	f000 fddd 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000946:	2300      	movs	r3, #0
 8000948:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800094e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000952:	4619      	mov	r1, r3
 8000954:	482f      	ldr	r0, [pc, #188]	; (8000a14 <MX_TIM1_Init+0x174>)
 8000956:	f003 fb2d 	bl	8003fb4 <HAL_TIMEx_MasterConfigSynchronization>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000960:	f000 fdce 	bl	8001500 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000964:	2330      	movs	r3, #48	; 0x30
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1;
 8000968:	2301      	movs	r3, #1
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800096c:	2300      	movs	r3, #0
 800096e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000970:	2300      	movs	r3, #0
 8000972:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000974:	2300      	movs	r3, #0
 8000976:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000978:	2300      	movs	r3, #0
 800097a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800097c:	2300      	movs	r3, #0
 800097e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000984:	2204      	movs	r2, #4
 8000986:	4619      	mov	r1, r3
 8000988:	4822      	ldr	r0, [pc, #136]	; (8000a14 <MX_TIM1_Init+0x174>)
 800098a:	f002 fcd3 	bl	8003334 <HAL_TIM_OC_ConfigChannel>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000994:	f000 fdb4 	bl	8001500 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8000998:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <MX_TIM1_Init+0x174>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	699a      	ldr	r2, [r3, #24]
 800099e:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <MX_TIM1_Init+0x174>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80009a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ac:	2208      	movs	r2, #8
 80009ae:	4619      	mov	r1, r3
 80009b0:	4818      	ldr	r0, [pc, #96]	; (8000a14 <MX_TIM1_Init+0x174>)
 80009b2:	f002 fcbf 	bl	8003334 <HAL_TIM_OC_ConfigChannel>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 80009bc:	f000 fda0 	bl	8001500 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_3);
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <MX_TIM1_Init+0x174>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	69da      	ldr	r2, [r3, #28]
 80009c6:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <MX_TIM1_Init+0x174>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f042 0208 	orr.w	r2, r2, #8
 80009ce:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009d8:	2300      	movs	r3, #0
 80009da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 5;
 80009dc:	2305      	movs	r3, #5
 80009de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80009e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 80009ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009ee:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	4619      	mov	r1, r3
 80009f4:	4807      	ldr	r0, [pc, #28]	; (8000a14 <MX_TIM1_Init+0x174>)
 80009f6:	f003 fb59 	bl	80040ac <HAL_TIMEx_ConfigBreakDeadTime>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8000a00:	f000 fd7e 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a04:	4803      	ldr	r0, [pc, #12]	; (8000a14 <MX_TIM1_Init+0x174>)
 8000a06:	f000 fe95 	bl	8001734 <HAL_TIM_MspPostInit>

}
 8000a0a:	bf00      	nop
 8000a0c:	3758      	adds	r7, #88	; 0x58
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200000a0 	.word	0x200000a0
 8000a18:	40010000 	.word	0x40010000

08000a1c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08e      	sub	sp, #56	; 0x38
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a30:	f107 0320 	add.w	r3, r7, #32
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
 8000a48:	615a      	str	r2, [r3, #20]
 8000a4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a4c:	4b2d      	ldr	r3, [pc, #180]	; (8000b04 <MX_TIM4_Init+0xe8>)
 8000a4e:	4a2e      	ldr	r2, [pc, #184]	; (8000b08 <MX_TIM4_Init+0xec>)
 8000a50:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 127;
 8000a52:	4b2c      	ldr	r3, [pc, #176]	; (8000b04 <MX_TIM4_Init+0xe8>)
 8000a54:	227f      	movs	r2, #127	; 0x7f
 8000a56:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a58:	4b2a      	ldr	r3, [pc, #168]	; (8000b04 <MX_TIM4_Init+0xe8>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 62499;
 8000a5e:	4b29      	ldr	r3, [pc, #164]	; (8000b04 <MX_TIM4_Init+0xe8>)
 8000a60:	f24f 4223 	movw	r2, #62499	; 0xf423
 8000a64:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a66:	4b27      	ldr	r3, [pc, #156]	; (8000b04 <MX_TIM4_Init+0xe8>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6c:	4b25      	ldr	r3, [pc, #148]	; (8000b04 <MX_TIM4_Init+0xe8>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000a72:	4824      	ldr	r0, [pc, #144]	; (8000b04 <MX_TIM4_Init+0xe8>)
 8000a74:	f002 f854 	bl	8002b20 <HAL_TIM_Base_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000a7e:	f000 fd3f 	bl	8001500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	481d      	ldr	r0, [pc, #116]	; (8000b04 <MX_TIM4_Init+0xe8>)
 8000a90:	f002 fd6e 	bl	8003570 <HAL_TIM_ConfigClockSource>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000a9a:	f000 fd31 	bl	8001500 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a9e:	4819      	ldr	r0, [pc, #100]	; (8000b04 <MX_TIM4_Init+0xe8>)
 8000aa0:	f002 fa1e 	bl	8002ee0 <HAL_TIM_PWM_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000aaa:	f000 fd29 	bl	8001500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ab6:	f107 0320 	add.w	r3, r7, #32
 8000aba:	4619      	mov	r1, r3
 8000abc:	4811      	ldr	r0, [pc, #68]	; (8000b04 <MX_TIM4_Init+0xe8>)
 8000abe:	f003 fa79 	bl	8003fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000ac8:	f000 fd1a 	bl	8001500 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000acc:	2360      	movs	r3, #96	; 0x60
 8000ace:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 31250;
 8000ad0:	f647 2312 	movw	r3, #31250	; 0x7a12
 8000ad4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4807      	ldr	r0, [pc, #28]	; (8000b04 <MX_TIM4_Init+0xe8>)
 8000ae6:	f002 fc81 	bl	80033ec <HAL_TIM_PWM_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000af0:	f000 fd06 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000af4:	4803      	ldr	r0, [pc, #12]	; (8000b04 <MX_TIM4_Init+0xe8>)
 8000af6:	f000 fe1d 	bl	8001734 <HAL_TIM_MspPostInit>

}
 8000afa:	bf00      	nop
 8000afc:	3738      	adds	r7, #56	; 0x38
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200000e8 	.word	0x200000e8
 8000b08:	40000800 	.word	0x40000800

08000b0c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <MX_USART6_UART_Init+0x50>)
 8000b14:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b18:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b1c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b32:	220c      	movs	r2, #12
 8000b34:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b42:	4805      	ldr	r0, [pc, #20]	; (8000b58 <MX_USART6_UART_Init+0x4c>)
 8000b44:	f003 fb33 	bl	80041ae <HAL_UART_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000b4e:	f000 fcd7 	bl	8001500 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000130 	.word	0x20000130
 8000b5c:	40011400 	.word	0x40011400

08000b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b087      	sub	sp, #28
 8000b64:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
 8000b6a:	4b2c      	ldr	r3, [pc, #176]	; (8000c1c <MX_GPIO_Init+0xbc>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a2b      	ldr	r2, [pc, #172]	; (8000c1c <MX_GPIO_Init+0xbc>)
 8000b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b29      	ldr	r3, [pc, #164]	; (8000c1c <MX_GPIO_Init+0xbc>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	4b25      	ldr	r3, [pc, #148]	; (8000c1c <MX_GPIO_Init+0xbc>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a24      	ldr	r2, [pc, #144]	; (8000c1c <MX_GPIO_Init+0xbc>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b22      	ldr	r3, [pc, #136]	; (8000c1c <MX_GPIO_Init+0xbc>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	4b1e      	ldr	r3, [pc, #120]	; (8000c1c <MX_GPIO_Init+0xbc>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a1d      	ldr	r2, [pc, #116]	; (8000c1c <MX_GPIO_Init+0xbc>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <MX_GPIO_Init+0xbc>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <MX_GPIO_Init+0xbc>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a16      	ldr	r2, [pc, #88]	; (8000c1c <MX_GPIO_Init+0xbc>)
 8000bc4:	f043 0310 	orr.w	r3, r3, #16
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <MX_GPIO_Init+0xbc>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0310 	and.w	r3, r3, #16
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <MX_GPIO_Init+0xbc>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a0f      	ldr	r2, [pc, #60]	; (8000c1c <MX_GPIO_Init+0xbc>)
 8000be0:	f043 0308 	orr.w	r3, r3, #8
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <MX_GPIO_Init+0xbc>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0308 	and.w	r3, r3, #8
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	603b      	str	r3, [r7, #0]
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <MX_GPIO_Init+0xbc>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a08      	ldr	r2, [pc, #32]	; (8000c1c <MX_GPIO_Init+0xbc>)
 8000bfc:	f043 0304 	orr.w	r3, r3, #4
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <MX_GPIO_Init+0xbc>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0304 	and.w	r3, r3, #4
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]

}
 8000c0e:	bf00      	nop
 8000c10:	371c      	adds	r7, #28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800

08000c20 <HAL_TIMEx_BreakCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)		//need modify
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <HAL_TIMEx_BreakCallback+0x24>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d104      	bne.n	8000c3c <HAL_TIMEx_BreakCallback+0x1c>
	{
		stopPWM();									//stop pwm output	or user function
 8000c32:	f7ff fcb5 	bl	80005a0 <stopPWM>
		break_falg = 1;
 8000c36:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <HAL_TIMEx_BreakCallback+0x28>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	701a      	strb	r2, [r3, #0]
	}
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40010000 	.word	0x40010000
 8000c48:	200001cc 	.word	0x200001cc

08000c4c <FN_MAIN_PAGE>:


void FN_MAIN_PAGE(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af02      	add	r7, sp, #8
	while (CurrentPage == MAIN_PAGE) {
 8000c52:	e07d      	b.n	8000d50 <FN_MAIN_PAGE+0x104>
		pulsePWM(pulse_value);	//user function set
 8000c54:	4b43      	ldr	r3, [pc, #268]	; (8000d64 <FN_MAIN_PAGE+0x118>)
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fcb7 	bl	80005cc <pulsePWM>
			//dead_value++;
			deadTimePWM(dead_value);
 8000c5e:	4b42      	ldr	r3, [pc, #264]	; (8000d68 <FN_MAIN_PAGE+0x11c>)
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fcfc 	bl	8000660 <deadTimePWM>

			if(break_falg == 1)			//user function set
 8000c68:	4b40      	ldr	r3, [pc, #256]	; (8000d6c <FN_MAIN_PAGE+0x120>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d104      	bne.n	8000c7a <FN_MAIN_PAGE+0x2e>
			{
				break_falg = 0;				//clear falg
 8000c70:	4b3e      	ldr	r3, [pc, #248]	; (8000d6c <FN_MAIN_PAGE+0x120>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
				startPWM();
 8000c76:	f7ff fc7d 	bl	8000574 <startPWM>
			}




		   HAL_Delay(1000);
 8000c7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c7e:	f000 ff53 	bl	8001b28 <HAL_Delay>
		   step++;//hz degerimi belirleyecek olan degişken
 8000c82:	4b3b      	ldr	r3, [pc, #236]	; (8000d70 <FN_MAIN_PAGE+0x124>)
 8000c84:	881b      	ldrh	r3, [r3, #0]
 8000c86:	3301      	adds	r3, #1
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	4b39      	ldr	r3, [pc, #228]	; (8000d70 <FN_MAIN_PAGE+0x124>)
 8000c8c:	801a      	strh	r2, [r3, #0]
		   step=Constrain(step, 1, 5000);
 8000c8e:	4b38      	ldr	r3, [pc, #224]	; (8000d70 <FN_MAIN_PAGE+0x124>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c96:	2101      	movs	r1, #1
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fd17 	bl	80006cc <Constrain>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	b29a      	uxth	r2, r3
 8000ca2:	4b33      	ldr	r3, [pc, #204]	; (8000d70 <FN_MAIN_PAGE+0x124>)
 8000ca4:	801a      	strh	r2, [r3, #0]
		   arrValue=((freqValue/step)/128);
 8000ca6:	4b33      	ldr	r3, [pc, #204]	; (8000d74 <FN_MAIN_PAGE+0x128>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a31      	ldr	r2, [pc, #196]	; (8000d70 <FN_MAIN_PAGE+0x124>)
 8000cac:	8812      	ldrh	r2, [r2, #0]
 8000cae:	fb93 f3f2 	sdiv	r3, r3, r2
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	da00      	bge.n	8000cb8 <FN_MAIN_PAGE+0x6c>
 8000cb6:	337f      	adds	r3, #127	; 0x7f
 8000cb8:	11db      	asrs	r3, r3, #7
 8000cba:	b29a      	uxth	r2, r3
 8000cbc:	4b2e      	ldr	r3, [pc, #184]	; (8000d78 <FN_MAIN_PAGE+0x12c>)
 8000cbe:	801a      	strh	r2, [r3, #0]




		   //arrValue=map(arrValue, 0, 31250, 0, 62499);
		   prePulse=map(arrValue, 0, 62499, 0, 31250);
 8000cc0:	4b2d      	ldr	r3, [pc, #180]	; (8000d78 <FN_MAIN_PAGE+0x12c>)
 8000cc2:	881b      	ldrh	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f647 2312 	movw	r3, #31250	; 0x7a12
 8000cca:	9300      	str	r3, [sp, #0]
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f24f 4223 	movw	r2, #62499	; 0xf423
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	f7ff fcde 	bl	8000694 <map>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	4b27      	ldr	r3, [pc, #156]	; (8000d7c <FN_MAIN_PAGE+0x130>)
 8000cde:	801a      	strh	r2, [r3, #0]

		   TIM4->ARR=arrValue;
 8000ce0:	4b25      	ldr	r3, [pc, #148]	; (8000d78 <FN_MAIN_PAGE+0x12c>)
 8000ce2:	881a      	ldrh	r2, [r3, #0]
 8000ce4:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <FN_MAIN_PAGE+0x134>)
 8000ce6:	62da      	str	r2, [r3, #44]	; 0x2c
		   TIM4->CCR1=prePulse;
 8000ce8:	4b24      	ldr	r3, [pc, #144]	; (8000d7c <FN_MAIN_PAGE+0x130>)
 8000cea:	881a      	ldrh	r2, [r3, #0]
 8000cec:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <FN_MAIN_PAGE+0x134>)
 8000cee:	635a      	str	r2, [r3, #52]	; 0x34

		   Nextion_Set_Value("torque", step);
 8000cf0:	4b1f      	ldr	r3, [pc, #124]	; (8000d70 <FN_MAIN_PAGE+0x124>)
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4823      	ldr	r0, [pc, #140]	; (8000d84 <FN_MAIN_PAGE+0x138>)
 8000cf8:	f000 fc08 	bl	800150c <Nextion_Set_Value>
		   Nextion_Set_Value("rpm", step);
 8000cfc:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <FN_MAIN_PAGE+0x124>)
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	4619      	mov	r1, r3
 8000d02:	4821      	ldr	r0, [pc, #132]	; (8000d88 <FN_MAIN_PAGE+0x13c>)
 8000d04:	f000 fc02 	bl	800150c <Nextion_Set_Value>
		   Nextion_Set_Value("tit", step);
 8000d08:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <FN_MAIN_PAGE+0x124>)
 8000d0a:	881b      	ldrh	r3, [r3, #0]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	481f      	ldr	r0, [pc, #124]	; (8000d8c <FN_MAIN_PAGE+0x140>)
 8000d10:	f000 fbfc 	bl	800150c <Nextion_Set_Value>
		   Nextion_Set_Value("ff", step);
 8000d14:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <FN_MAIN_PAGE+0x124>)
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	4619      	mov	r1, r3
 8000d1a:	481d      	ldr	r0, [pc, #116]	; (8000d90 <FN_MAIN_PAGE+0x144>)
 8000d1c:	f000 fbf6 	bl	800150c <Nextion_Set_Value>
		   Nextion_Set_Value("gop", step);
 8000d20:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <FN_MAIN_PAGE+0x124>)
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	4619      	mov	r1, r3
 8000d26:	481b      	ldr	r0, [pc, #108]	; (8000d94 <FN_MAIN_PAGE+0x148>)
 8000d28:	f000 fbf0 	bl	800150c <Nextion_Set_Value>
		   Nextion_Set_Value("eop", step);
 8000d2c:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <FN_MAIN_PAGE+0x124>)
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	4619      	mov	r1, r3
 8000d32:	4819      	ldr	r0, [pc, #100]	; (8000d98 <FN_MAIN_PAGE+0x14c>)
 8000d34:	f000 fbea 	bl	800150c <Nextion_Set_Value>
		   Nextion_Set_Value("eot", step);
 8000d38:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <FN_MAIN_PAGE+0x124>)
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4817      	ldr	r0, [pc, #92]	; (8000d9c <FN_MAIN_PAGE+0x150>)
 8000d40:	f000 fbe4 	bl	800150c <Nextion_Set_Value>
		   Nextion_Set_Value("eoq", step);
 8000d44:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <FN_MAIN_PAGE+0x124>)
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4815      	ldr	r0, [pc, #84]	; (8000da0 <FN_MAIN_PAGE+0x154>)
 8000d4c:	f000 fbde 	bl	800150c <Nextion_Set_Value>
	while (CurrentPage == MAIN_PAGE) {
 8000d50:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <FN_MAIN_PAGE+0x158>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b13      	cmp	r3, #19
 8000d56:	f43f af7d 	beq.w	8000c54 <FN_MAIN_PAGE+0x8>


	}

}
 8000d5a:	bf00      	nop
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200001ca 	.word	0x200001ca
 8000d68:	200001ce 	.word	0x200001ce
 8000d6c:	200001cc 	.word	0x200001cc
 8000d70:	20000004 	.word	0x20000004
 8000d74:	20000008 	.word	0x20000008
 8000d78:	200001d4 	.word	0x200001d4
 8000d7c:	200001d6 	.word	0x200001d6
 8000d80:	40000800 	.word	0x40000800
 8000d84:	08005be0 	.word	0x08005be0
 8000d88:	08005be8 	.word	0x08005be8
 8000d8c:	08005bec 	.word	0x08005bec
 8000d90:	08005bf0 	.word	0x08005bf0
 8000d94:	08005bf4 	.word	0x08005bf4
 8000d98:	08005bf8 	.word	0x08005bf8
 8000d9c:	08005bfc 	.word	0x08005bfc
 8000da0:	08005c00 	.word	0x08005c00
 8000da4:	20000178 	.word	0x20000178

08000da8 <FN_TORQUE_PAGE>:
void FN_TORQUE_PAGE(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
	while (CurrentPage == TORQUE_PAGE) {
 8000dac:	bf00      	nop
 8000dae:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <FN_TORQUE_PAGE+0x1c>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b14      	cmp	r3, #20
 8000db4:	d0fb      	beq.n	8000dae <FN_TORQUE_PAGE+0x6>

	}

}
 8000db6:	bf00      	nop
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	20000178 	.word	0x20000178

08000dc8 <FN_RPM_PAGE>:
void FN_RPM_PAGE(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
	while (CurrentPage == RPM_PAGE) {
 8000dcc:	bf00      	nop
 8000dce:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <FN_RPM_PAGE+0x1c>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b15      	cmp	r3, #21
 8000dd4:	d0fb      	beq.n	8000dce <FN_RPM_PAGE+0x6>

	}
}
 8000dd6:	bf00      	nop
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000178 	.word	0x20000178

08000de8 <Clear_rx_buffer>:
}



void Clear_rx_buffer(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
	for(int i = 0; i < 50; i++)
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	e007      	b.n	8000e04 <Clear_rx_buffer+0x1c>
	  	  rx_buffer[i] = '\0';
 8000df4:	4a08      	ldr	r2, [pc, #32]	; (8000e18 <Clear_rx_buffer+0x30>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 50; i++)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3301      	adds	r3, #1
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2b31      	cmp	r3, #49	; 0x31
 8000e08:	ddf4      	ble.n	8000df4 <Clear_rx_buffer+0xc>
}
 8000e0a:	bf00      	nop
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	2000017c 	.word	0x2000017c

08000e1c <nextion_command_control>:

void nextion_command_control()
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
	if (rx_buffer[0] == EVENT_TOUCH_HEAD) { // 0X65 BUTON
 8000e20:	4b95      	ldr	r3, [pc, #596]	; (8001078 <nextion_command_control+0x25c>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b65      	cmp	r3, #101	; 0x65
 8000e26:	f040 829c 	bne.w	8001362 <nextion_command_control+0x546>


		if (rx_buffer[1] == INIT_PAGE) {
 8000e2a:	4b93      	ldr	r3, [pc, #588]	; (8001078 <nextion_command_control+0x25c>)
 8000e2c:	785b      	ldrb	r3, [r3, #1]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f000 82cb 	beq.w	80013ca <nextion_command_control+0x5ae>
		}else if (rx_buffer[1] == MAIN_PAGE) {
 8000e34:	4b90      	ldr	r3, [pc, #576]	; (8001078 <nextion_command_control+0x25c>)
 8000e36:	785b      	ldrb	r3, [r3, #1]
 8000e38:	2b13      	cmp	r3, #19
 8000e3a:	d116      	bne.n	8000e6a <nextion_command_control+0x4e>
			if (rx_buffer[2] == TORQUE_BUTTON) {
 8000e3c:	4b8e      	ldr	r3, [pc, #568]	; (8001078 <nextion_command_control+0x25c>)
 8000e3e:	789b      	ldrb	r3, [r3, #2]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d106      	bne.n	8000e52 <nextion_command_control+0x36>
				CurrentPage = TORQUE_PAGE;
 8000e44:	4b8d      	ldr	r3, [pc, #564]	; (800107c <nextion_command_control+0x260>)
 8000e46:	2214      	movs	r2, #20
 8000e48:	701a      	strb	r2, [r3, #0]
				CurrentButton = TORQUE_BUTTON;
 8000e4a:	4b8d      	ldr	r3, [pc, #564]	; (8001080 <nextion_command_control+0x264>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	701a      	strb	r2, [r3, #0]
	}else if (rx_buffer[0] == INVALID_CMD) {
	}else if (rx_buffer[0] == INVALID_VARIABLE) {
	}else {  
	}
	
}
 8000e50:	e2bb      	b.n	80013ca <nextion_command_control+0x5ae>
			}else if (rx_buffer[2] == RPM_BUTTON) {
 8000e52:	4b89      	ldr	r3, [pc, #548]	; (8001078 <nextion_command_control+0x25c>)
 8000e54:	789b      	ldrb	r3, [r3, #2]
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	f040 82b7 	bne.w	80013ca <nextion_command_control+0x5ae>
				CurrentPage = RPM_PAGE;
 8000e5c:	4b87      	ldr	r3, [pc, #540]	; (800107c <nextion_command_control+0x260>)
 8000e5e:	2215      	movs	r2, #21
 8000e60:	701a      	strb	r2, [r3, #0]
				CurrentButton = RPM_BUTTON;
 8000e62:	4b87      	ldr	r3, [pc, #540]	; (8001080 <nextion_command_control+0x264>)
 8000e64:	2202      	movs	r2, #2
 8000e66:	701a      	strb	r2, [r3, #0]
}
 8000e68:	e2af      	b.n	80013ca <nextion_command_control+0x5ae>
		}else if (rx_buffer[1] == TORQUE_PAGE) {
 8000e6a:	4b83      	ldr	r3, [pc, #524]	; (8001078 <nextion_command_control+0x25c>)
 8000e6c:	785b      	ldrb	r3, [r3, #1]
 8000e6e:	2b14      	cmp	r3, #20
 8000e70:	d118      	bne.n	8000ea4 <nextion_command_control+0x88>
			if (rx_buffer[2] == MENU_BUTTON) {
 8000e72:	4b81      	ldr	r3, [pc, #516]	; (8001078 <nextion_command_control+0x25c>)
 8000e74:	789b      	ldrb	r3, [r3, #2]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d103      	bne.n	8000e82 <nextion_command_control+0x66>
				 CurrentPage = MAIN_PAGE;
 8000e7a:	4b80      	ldr	r3, [pc, #512]	; (800107c <nextion_command_control+0x260>)
 8000e7c:	2213      	movs	r2, #19
 8000e7e:	701a      	strb	r2, [r3, #0]
}
 8000e80:	e2a3      	b.n	80013ca <nextion_command_control+0x5ae>
			}else if (rx_buffer[2] == DEFAULT_BUTTON) {
 8000e82:	4b7d      	ldr	r3, [pc, #500]	; (8001078 <nextion_command_control+0x25c>)
 8000e84:	789b      	ldrb	r3, [r3, #2]
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d103      	bne.n	8000e92 <nextion_command_control+0x76>
				 CurrentButton = DEFAULT_BUTTON;
 8000e8a:	4b7d      	ldr	r3, [pc, #500]	; (8001080 <nextion_command_control+0x264>)
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	701a      	strb	r2, [r3, #0]
}
 8000e90:	e29b      	b.n	80013ca <nextion_command_control+0x5ae>
			}else if (rx_buffer[2] == SAVE_BUTTON) {
 8000e92:	4b79      	ldr	r3, [pc, #484]	; (8001078 <nextion_command_control+0x25c>)
 8000e94:	789b      	ldrb	r3, [r3, #2]
 8000e96:	2b03      	cmp	r3, #3
 8000e98:	f040 8297 	bne.w	80013ca <nextion_command_control+0x5ae>
				 CurrentButton = SAVE_BUTTON;
 8000e9c:	4b78      	ldr	r3, [pc, #480]	; (8001080 <nextion_command_control+0x264>)
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	701a      	strb	r2, [r3, #0]
}
 8000ea2:	e292      	b.n	80013ca <nextion_command_control+0x5ae>
		}else if (rx_buffer[1] == RPM_PAGE) {
 8000ea4:	4b74      	ldr	r3, [pc, #464]	; (8001078 <nextion_command_control+0x25c>)
 8000ea6:	785b      	ldrb	r3, [r3, #1]
 8000ea8:	2b15      	cmp	r3, #21
 8000eaa:	d118      	bne.n	8000ede <nextion_command_control+0xc2>
			if (rx_buffer[2] == MENU_BUTTON) {
 8000eac:	4b72      	ldr	r3, [pc, #456]	; (8001078 <nextion_command_control+0x25c>)
 8000eae:	789b      	ldrb	r3, [r3, #2]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d103      	bne.n	8000ebc <nextion_command_control+0xa0>
				CurrentPage = MAIN_PAGE;
 8000eb4:	4b71      	ldr	r3, [pc, #452]	; (800107c <nextion_command_control+0x260>)
 8000eb6:	2213      	movs	r2, #19
 8000eb8:	701a      	strb	r2, [r3, #0]
}
 8000eba:	e286      	b.n	80013ca <nextion_command_control+0x5ae>
			}else if (rx_buffer[2] == DEFAULT_BUTTON) {
 8000ebc:	4b6e      	ldr	r3, [pc, #440]	; (8001078 <nextion_command_control+0x25c>)
 8000ebe:	789b      	ldrb	r3, [r3, #2]
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d103      	bne.n	8000ecc <nextion_command_control+0xb0>
				 CurrentButton = DEFAULT_BUTTON;
 8000ec4:	4b6e      	ldr	r3, [pc, #440]	; (8001080 <nextion_command_control+0x264>)
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	701a      	strb	r2, [r3, #0]
}
 8000eca:	e27e      	b.n	80013ca <nextion_command_control+0x5ae>
			}else if (rx_buffer[2] == SAVE_BUTTON) {
 8000ecc:	4b6a      	ldr	r3, [pc, #424]	; (8001078 <nextion_command_control+0x25c>)
 8000ece:	789b      	ldrb	r3, [r3, #2]
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	f040 827a 	bne.w	80013ca <nextion_command_control+0x5ae>
				 CurrentButton = SAVE_BUTTON;
 8000ed6:	4b6a      	ldr	r3, [pc, #424]	; (8001080 <nextion_command_control+0x264>)
 8000ed8:	2203      	movs	r2, #3
 8000eda:	701a      	strb	r2, [r3, #0]
}
 8000edc:	e275      	b.n	80013ca <nextion_command_control+0x5ae>
		else if (rx_buffer[1] == STARTING_PAGE) {
 8000ede:	4b66      	ldr	r3, [pc, #408]	; (8001078 <nextion_command_control+0x25c>)
 8000ee0:	785b      	ldrb	r3, [r3, #1]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d121      	bne.n	8000f2a <nextion_command_control+0x10e>
			if (rx_buffer[2] == AUTOMATIC_BUTTON) {
 8000ee6:	4b64      	ldr	r3, [pc, #400]	; (8001078 <nextion_command_control+0x25c>)
 8000ee8:	789b      	ldrb	r3, [r3, #2]
 8000eea:	2b06      	cmp	r3, #6
 8000eec:	d106      	bne.n	8000efc <nextion_command_control+0xe0>
				CurrentPage = AUTOMATIC_PAGE;
 8000eee:	4b63      	ldr	r3, [pc, #396]	; (800107c <nextion_command_control+0x260>)
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	701a      	strb	r2, [r3, #0]
				CurrentButton = AUTOMATIC_BUTTON;
 8000ef4:	4b62      	ldr	r3, [pc, #392]	; (8001080 <nextion_command_control+0x264>)
 8000ef6:	2206      	movs	r2, #6
 8000ef8:	701a      	strb	r2, [r3, #0]
}
 8000efa:	e266      	b.n	80013ca <nextion_command_control+0x5ae>
			}else if (rx_buffer[2] == MANUAL_BUTTON) {
 8000efc:	4b5e      	ldr	r3, [pc, #376]	; (8001078 <nextion_command_control+0x25c>)
 8000efe:	789b      	ldrb	r3, [r3, #2]
 8000f00:	2b07      	cmp	r3, #7
 8000f02:	d106      	bne.n	8000f12 <nextion_command_control+0xf6>
				CurrentPage = MANUAL_PAGE;
 8000f04:	4b5d      	ldr	r3, [pc, #372]	; (800107c <nextion_command_control+0x260>)
 8000f06:	2203      	movs	r2, #3
 8000f08:	701a      	strb	r2, [r3, #0]
				CurrentButton = MANUAL_BUTTON;
 8000f0a:	4b5d      	ldr	r3, [pc, #372]	; (8001080 <nextion_command_control+0x264>)
 8000f0c:	2207      	movs	r2, #7
 8000f0e:	701a      	strb	r2, [r3, #0]
}
 8000f10:	e25b      	b.n	80013ca <nextion_command_control+0x5ae>
			}else if (rx_buffer[2] == PARAMETERS_BUTTON) {
 8000f12:	4b59      	ldr	r3, [pc, #356]	; (8001078 <nextion_command_control+0x25c>)
 8000f14:	789b      	ldrb	r3, [r3, #2]
 8000f16:	2b08      	cmp	r3, #8
 8000f18:	f040 8257 	bne.w	80013ca <nextion_command_control+0x5ae>
				CurrentPage = LOGIN_PAGE;
 8000f1c:	4b57      	ldr	r3, [pc, #348]	; (800107c <nextion_command_control+0x260>)
 8000f1e:	220c      	movs	r2, #12
 8000f20:	701a      	strb	r2, [r3, #0]
				CurrentButton = PARAMETERS_BUTTON;
 8000f22:	4b57      	ldr	r3, [pc, #348]	; (8001080 <nextion_command_control+0x264>)
 8000f24:	2208      	movs	r2, #8
 8000f26:	701a      	strb	r2, [r3, #0]
}
 8000f28:	e24f      	b.n	80013ca <nextion_command_control+0x5ae>
		}else if (rx_buffer[1] == AUTOMATIC_PAGE) {
 8000f2a:	4b53      	ldr	r3, [pc, #332]	; (8001078 <nextion_command_control+0x25c>)
 8000f2c:	785b      	ldrb	r3, [r3, #1]
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d118      	bne.n	8000f64 <nextion_command_control+0x148>
			if (rx_buffer[2] == MENU_BUTTON) {
 8000f32:	4b51      	ldr	r3, [pc, #324]	; (8001078 <nextion_command_control+0x25c>)
 8000f34:	789b      	ldrb	r3, [r3, #2]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d103      	bne.n	8000f42 <nextion_command_control+0x126>
				 CurrentPage = STARTING_PAGE;
 8000f3a:	4b50      	ldr	r3, [pc, #320]	; (800107c <nextion_command_control+0x260>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	701a      	strb	r2, [r3, #0]
}
 8000f40:	e243      	b.n	80013ca <nextion_command_control+0x5ae>
			}else if (rx_buffer[2] == START_BUTTON) {
 8000f42:	4b4d      	ldr	r3, [pc, #308]	; (8001078 <nextion_command_control+0x25c>)
 8000f44:	789b      	ldrb	r3, [r3, #2]
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d103      	bne.n	8000f52 <nextion_command_control+0x136>
				 CurrentButton = START_BUTTON;
 8000f4a:	4b4d      	ldr	r3, [pc, #308]	; (8001080 <nextion_command_control+0x264>)
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	701a      	strb	r2, [r3, #0]
}
 8000f50:	e23b      	b.n	80013ca <nextion_command_control+0x5ae>
			}else if (rx_buffer[2] == STOP_BUTTON) {
 8000f52:	4b49      	ldr	r3, [pc, #292]	; (8001078 <nextion_command_control+0x25c>)
 8000f54:	789b      	ldrb	r3, [r3, #2]
 8000f56:	2b17      	cmp	r3, #23
 8000f58:	f040 8237 	bne.w	80013ca <nextion_command_control+0x5ae>
				 CurrentButton = STOP_BUTTON;
 8000f5c:	4b48      	ldr	r3, [pc, #288]	; (8001080 <nextion_command_control+0x264>)
 8000f5e:	2217      	movs	r2, #23
 8000f60:	701a      	strb	r2, [r3, #0]
}
 8000f62:	e232      	b.n	80013ca <nextion_command_control+0x5ae>
		}else if (rx_buffer[1] == MANUAL_PAGE) {
 8000f64:	4b44      	ldr	r3, [pc, #272]	; (8001078 <nextion_command_control+0x25c>)
 8000f66:	785b      	ldrb	r3, [r3, #1]
 8000f68:	2b03      	cmp	r3, #3
 8000f6a:	d11b      	bne.n	8000fa4 <nextion_command_control+0x188>
			if (rx_buffer[2] == MENU_BUTTON) {
 8000f6c:	4b42      	ldr	r3, [pc, #264]	; (8001078 <nextion_command_control+0x25c>)
 8000f6e:	789b      	ldrb	r3, [r3, #2]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d106      	bne.n	8000f82 <nextion_command_control+0x166>
				CurrentPage = STARTING_PAGE;
 8000f74:	4b41      	ldr	r3, [pc, #260]	; (800107c <nextion_command_control+0x260>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	701a      	strb	r2, [r3, #0]
				CurrentCommand = COMMAND_QUIT;
 8000f7a:	4b42      	ldr	r3, [pc, #264]	; (8001084 <nextion_command_control+0x268>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	701a      	strb	r2, [r3, #0]
}
 8000f80:	e223      	b.n	80013ca <nextion_command_control+0x5ae>
			}else if (rx_buffer[2] == START_BUTTON) {
 8000f82:	4b3d      	ldr	r3, [pc, #244]	; (8001078 <nextion_command_control+0x25c>)
 8000f84:	789b      	ldrb	r3, [r3, #2]
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d103      	bne.n	8000f92 <nextion_command_control+0x176>
				 CurrentButton = START_BUTTON;
 8000f8a:	4b3d      	ldr	r3, [pc, #244]	; (8001080 <nextion_command_control+0x264>)
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	701a      	strb	r2, [r3, #0]
}
 8000f90:	e21b      	b.n	80013ca <nextion_command_control+0x5ae>
			}else if (rx_buffer[2] == STOP_BUTTON) {
 8000f92:	4b39      	ldr	r3, [pc, #228]	; (8001078 <nextion_command_control+0x25c>)
 8000f94:	789b      	ldrb	r3, [r3, #2]
 8000f96:	2b17      	cmp	r3, #23
 8000f98:	f040 8217 	bne.w	80013ca <nextion_command_control+0x5ae>
				 CurrentButton = STOP_BUTTON;
 8000f9c:	4b38      	ldr	r3, [pc, #224]	; (8001080 <nextion_command_control+0x264>)
 8000f9e:	2217      	movs	r2, #23
 8000fa0:	701a      	strb	r2, [r3, #0]
}
 8000fa2:	e212      	b.n	80013ca <nextion_command_control+0x5ae>
		}else if (rx_buffer[1] == PARAMETERS_PAGE) {
 8000fa4:	4b34      	ldr	r3, [pc, #208]	; (8001078 <nextion_command_control+0x25c>)
 8000fa6:	785b      	ldrb	r3, [r3, #1]
 8000fa8:	2b04      	cmp	r3, #4
 8000faa:	d16d      	bne.n	8001088 <nextion_command_control+0x26c>
			if (rx_buffer[2] == MENU_BUTTON) {
 8000fac:	4b32      	ldr	r3, [pc, #200]	; (8001078 <nextion_command_control+0x25c>)
 8000fae:	789b      	ldrb	r3, [r3, #2]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d105      	bne.n	8000fc0 <nextion_command_control+0x1a4>
				CurrentPage = STARTING_PAGE;
 8000fb4:	4b31      	ldr	r3, [pc, #196]	; (800107c <nextion_command_control+0x260>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	701a      	strb	r2, [r3, #0]
				 CurrentButton = 0;
 8000fba:	4b31      	ldr	r3, [pc, #196]	; (8001080 <nextion_command_control+0x264>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
			if (rx_buffer[2] == TIME_BUTTON) {
 8000fc0:	4b2d      	ldr	r3, [pc, #180]	; (8001078 <nextion_command_control+0x25c>)
 8000fc2:	789b      	ldrb	r3, [r3, #2]
 8000fc4:	2b05      	cmp	r3, #5
 8000fc6:	d105      	bne.n	8000fd4 <nextion_command_control+0x1b8>
				 CurrentPage = TIME_PAGE;
 8000fc8:	4b2c      	ldr	r3, [pc, #176]	; (800107c <nextion_command_control+0x260>)
 8000fca:	2205      	movs	r2, #5
 8000fcc:	701a      	strb	r2, [r3, #0]
				 CurrentButton = 0;
 8000fce:	4b2c      	ldr	r3, [pc, #176]	; (8001080 <nextion_command_control+0x264>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
			if (rx_buffer[2] == LIMIT_BUTTON) {
 8000fd4:	4b28      	ldr	r3, [pc, #160]	; (8001078 <nextion_command_control+0x25c>)
 8000fd6:	789b      	ldrb	r3, [r3, #2]
 8000fd8:	2b06      	cmp	r3, #6
 8000fda:	d105      	bne.n	8000fe8 <nextion_command_control+0x1cc>
				 CurrentPage = LIMIT_PAGE;
 8000fdc:	4b27      	ldr	r3, [pc, #156]	; (800107c <nextion_command_control+0x260>)
 8000fde:	2206      	movs	r2, #6
 8000fe0:	701a      	strb	r2, [r3, #0]
				 CurrentButton = 0;
 8000fe2:	4b27      	ldr	r3, [pc, #156]	; (8001080 <nextion_command_control+0x264>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
			if (rx_buffer[2] == LOOP_BUTTON) {
 8000fe8:	4b23      	ldr	r3, [pc, #140]	; (8001078 <nextion_command_control+0x25c>)
 8000fea:	789b      	ldrb	r3, [r3, #2]
 8000fec:	2b07      	cmp	r3, #7
 8000fee:	d105      	bne.n	8000ffc <nextion_command_control+0x1e0>
				 CurrentPage = LOOP_PAGE;
 8000ff0:	4b22      	ldr	r3, [pc, #136]	; (800107c <nextion_command_control+0x260>)
 8000ff2:	2207      	movs	r2, #7
 8000ff4:	701a      	strb	r2, [r3, #0]
				 CurrentButton = 0;
 8000ff6:	4b22      	ldr	r3, [pc, #136]	; (8001080 <nextion_command_control+0x264>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
			if (rx_buffer[2] == PASSWORD_BUTTON) {
 8000ffc:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <nextion_command_control+0x25c>)
 8000ffe:	789b      	ldrb	r3, [r3, #2]
 8001000:	2b08      	cmp	r3, #8
 8001002:	d105      	bne.n	8001010 <nextion_command_control+0x1f4>
				 CurrentPage = PASSWORD_PAGE;
 8001004:	4b1d      	ldr	r3, [pc, #116]	; (800107c <nextion_command_control+0x260>)
 8001006:	2208      	movs	r2, #8
 8001008:	701a      	strb	r2, [r3, #0]
				 CurrentButton = 0;
 800100a:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <nextion_command_control+0x264>)
 800100c:	2200      	movs	r2, #0
 800100e:	701a      	strb	r2, [r3, #0]
			if (rx_buffer[2] == COEF_BUTTON) {
 8001010:	4b19      	ldr	r3, [pc, #100]	; (8001078 <nextion_command_control+0x25c>)
 8001012:	789b      	ldrb	r3, [r3, #2]
 8001014:	2b09      	cmp	r3, #9
 8001016:	d105      	bne.n	8001024 <nextion_command_control+0x208>
				 CurrentPage = COEF_PAGE;
 8001018:	4b18      	ldr	r3, [pc, #96]	; (800107c <nextion_command_control+0x260>)
 800101a:	220a      	movs	r2, #10
 800101c:	701a      	strb	r2, [r3, #0]
				 CurrentButton = 0;
 800101e:	4b18      	ldr	r3, [pc, #96]	; (8001080 <nextion_command_control+0x264>)
 8001020:	2200      	movs	r2, #0
 8001022:	701a      	strb	r2, [r3, #0]
			if (rx_buffer[2] == UNITS_BUTTON) {
 8001024:	4b14      	ldr	r3, [pc, #80]	; (8001078 <nextion_command_control+0x25c>)
 8001026:	789b      	ldrb	r3, [r3, #2]
 8001028:	2b0a      	cmp	r3, #10
 800102a:	d105      	bne.n	8001038 <nextion_command_control+0x21c>
				 CurrentPage = UNITS_PAGE;
 800102c:	4b13      	ldr	r3, [pc, #76]	; (800107c <nextion_command_control+0x260>)
 800102e:	220b      	movs	r2, #11
 8001030:	701a      	strb	r2, [r3, #0]
				 CurrentButton = 0;
 8001032:	4b13      	ldr	r3, [pc, #76]	; (8001080 <nextion_command_control+0x264>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
			if (rx_buffer[2] == CALIBRATION_BUTTON) {
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <nextion_command_control+0x25c>)
 800103a:	789b      	ldrb	r3, [r3, #2]
 800103c:	2b0d      	cmp	r3, #13
 800103e:	d105      	bne.n	800104c <nextion_command_control+0x230>
				 CurrentPage = CALIBRATION_PAGE;
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <nextion_command_control+0x260>)
 8001042:	220d      	movs	r2, #13
 8001044:	701a      	strb	r2, [r3, #0]
				 CurrentButton = 0;
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <nextion_command_control+0x264>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
			if (rx_buffer[2] == FACTORY_SETTINGS_BUTTON) {
 800104c:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <nextion_command_control+0x25c>)
 800104e:	789b      	ldrb	r3, [r3, #2]
 8001050:	2b0b      	cmp	r3, #11
 8001052:	d105      	bne.n	8001060 <nextion_command_control+0x244>
			 CurrentPage = FACTORY_PAGE;
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <nextion_command_control+0x260>)
 8001056:	2209      	movs	r2, #9
 8001058:	701a      	strb	r2, [r3, #0]
			 CurrentButton = 0;
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <nextion_command_control+0x264>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
			if (rx_buffer[2] == LOGOUT_BUTTON) {
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <nextion_command_control+0x25c>)
 8001062:	789b      	ldrb	r3, [r3, #2]
 8001064:	2b0c      	cmp	r3, #12
 8001066:	f040 81b0 	bne.w	80013ca <nextion_command_control+0x5ae>
			 CurrentPage = STARTING_PAGE;
 800106a:	4b04      	ldr	r3, [pc, #16]	; (800107c <nextion_command_control+0x260>)
 800106c:	2201      	movs	r2, #1
 800106e:	701a      	strb	r2, [r3, #0]
			 CurrentButton = 0;
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <nextion_command_control+0x264>)
 8001072:	2200      	movs	r2, #0
 8001074:	701a      	strb	r2, [r3, #0]
}
 8001076:	e1a8      	b.n	80013ca <nextion_command_control+0x5ae>
 8001078:	2000017c 	.word	0x2000017c
 800107c:	20000178 	.word	0x20000178
 8001080:	20000179 	.word	0x20000179
 8001084:	2000017a 	.word	0x2000017a
		}else if (rx_buffer[1] == TIME_PAGE) {
 8001088:	4b76      	ldr	r3, [pc, #472]	; (8001264 <nextion_command_control+0x448>)
 800108a:	785b      	ldrb	r3, [r3, #1]
 800108c:	2b05      	cmp	r3, #5
 800108e:	d118      	bne.n	80010c2 <nextion_command_control+0x2a6>
			if (rx_buffer[2] == MENU_BUTTON) {
 8001090:	4b74      	ldr	r3, [pc, #464]	; (8001264 <nextion_command_control+0x448>)
 8001092:	789b      	ldrb	r3, [r3, #2]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d103      	bne.n	80010a0 <nextion_command_control+0x284>
				 CurrentPage = PARAMETERS_PAGE;
 8001098:	4b73      	ldr	r3, [pc, #460]	; (8001268 <nextion_command_control+0x44c>)
 800109a:	2204      	movs	r2, #4
 800109c:	701a      	strb	r2, [r3, #0]
}
 800109e:	e194      	b.n	80013ca <nextion_command_control+0x5ae>
			}else if (rx_buffer[2] == DEFAULT_BUTTON) {
 80010a0:	4b70      	ldr	r3, [pc, #448]	; (8001264 <nextion_command_control+0x448>)
 80010a2:	789b      	ldrb	r3, [r3, #2]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d103      	bne.n	80010b0 <nextion_command_control+0x294>
				 CurrentButton = DEFAULT_BUTTON;
 80010a8:	4b70      	ldr	r3, [pc, #448]	; (800126c <nextion_command_control+0x450>)
 80010aa:	2202      	movs	r2, #2
 80010ac:	701a      	strb	r2, [r3, #0]
}
 80010ae:	e18c      	b.n	80013ca <nextion_command_control+0x5ae>
			}else if (rx_buffer[2] == SAVE_BUTTON) {
 80010b0:	4b6c      	ldr	r3, [pc, #432]	; (8001264 <nextion_command_control+0x448>)
 80010b2:	789b      	ldrb	r3, [r3, #2]
 80010b4:	2b03      	cmp	r3, #3
 80010b6:	f040 8188 	bne.w	80013ca <nextion_command_control+0x5ae>
				 CurrentButton = SAVE_BUTTON;
 80010ba:	4b6c      	ldr	r3, [pc, #432]	; (800126c <nextion_command_control+0x450>)
 80010bc:	2203      	movs	r2, #3
 80010be:	701a      	strb	r2, [r3, #0]
}
 80010c0:	e183      	b.n	80013ca <nextion_command_control+0x5ae>
		}else if (rx_buffer[1] == LIMIT_PAGE) {
 80010c2:	4b68      	ldr	r3, [pc, #416]	; (8001264 <nextion_command_control+0x448>)
 80010c4:	785b      	ldrb	r3, [r3, #1]
 80010c6:	2b06      	cmp	r3, #6
 80010c8:	d118      	bne.n	80010fc <nextion_command_control+0x2e0>
			if (rx_buffer[2] == MENU_BUTTON) //  0x01  MENU     buton
 80010ca:	4b66      	ldr	r3, [pc, #408]	; (8001264 <nextion_command_control+0x448>)
 80010cc:	789b      	ldrb	r3, [r3, #2]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d103      	bne.n	80010da <nextion_command_control+0x2be>
				 CurrentPage = PARAMETERS_PAGE;
 80010d2:	4b65      	ldr	r3, [pc, #404]	; (8001268 <nextion_command_control+0x44c>)
 80010d4:	2204      	movs	r2, #4
 80010d6:	701a      	strb	r2, [r3, #0]
}
 80010d8:	e177      	b.n	80013ca <nextion_command_control+0x5ae>
			}else if (rx_buffer[2] == DEFAULT_BUTTON) {
 80010da:	4b62      	ldr	r3, [pc, #392]	; (8001264 <nextion_command_control+0x448>)
 80010dc:	789b      	ldrb	r3, [r3, #2]
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d103      	bne.n	80010ea <nextion_command_control+0x2ce>
				 CurrentButton = DEFAULT_BUTTON;
 80010e2:	4b62      	ldr	r3, [pc, #392]	; (800126c <nextion_command_control+0x450>)
 80010e4:	2202      	movs	r2, #2
 80010e6:	701a      	strb	r2, [r3, #0]
}
 80010e8:	e16f      	b.n	80013ca <nextion_command_control+0x5ae>
			}else if (rx_buffer[2] == SAVE_BUTTON) {
 80010ea:	4b5e      	ldr	r3, [pc, #376]	; (8001264 <nextion_command_control+0x448>)
 80010ec:	789b      	ldrb	r3, [r3, #2]
 80010ee:	2b03      	cmp	r3, #3
 80010f0:	f040 816b 	bne.w	80013ca <nextion_command_control+0x5ae>
				 CurrentButton = SAVE_BUTTON;
 80010f4:	4b5d      	ldr	r3, [pc, #372]	; (800126c <nextion_command_control+0x450>)
 80010f6:	2203      	movs	r2, #3
 80010f8:	701a      	strb	r2, [r3, #0]
}
 80010fa:	e166      	b.n	80013ca <nextion_command_control+0x5ae>
		}else if (rx_buffer[1] == LOOP_PAGE) {
 80010fc:	4b59      	ldr	r3, [pc, #356]	; (8001264 <nextion_command_control+0x448>)
 80010fe:	785b      	ldrb	r3, [r3, #1]
 8001100:	2b07      	cmp	r3, #7
 8001102:	d118      	bne.n	8001136 <nextion_command_control+0x31a>
			if (rx_buffer[2] == MENU_BUTTON) {
 8001104:	4b57      	ldr	r3, [pc, #348]	; (8001264 <nextion_command_control+0x448>)
 8001106:	789b      	ldrb	r3, [r3, #2]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d103      	bne.n	8001114 <nextion_command_control+0x2f8>
				 CurrentPage = PARAMETERS_PAGE;
 800110c:	4b56      	ldr	r3, [pc, #344]	; (8001268 <nextion_command_control+0x44c>)
 800110e:	2204      	movs	r2, #4
 8001110:	701a      	strb	r2, [r3, #0]
}
 8001112:	e15a      	b.n	80013ca <nextion_command_control+0x5ae>
			}else if (rx_buffer[2] == DEFAULT_BUTTON) {
 8001114:	4b53      	ldr	r3, [pc, #332]	; (8001264 <nextion_command_control+0x448>)
 8001116:	789b      	ldrb	r3, [r3, #2]
 8001118:	2b02      	cmp	r3, #2
 800111a:	d103      	bne.n	8001124 <nextion_command_control+0x308>
				 CurrentButton = DEFAULT_BUTTON;
 800111c:	4b53      	ldr	r3, [pc, #332]	; (800126c <nextion_command_control+0x450>)
 800111e:	2202      	movs	r2, #2
 8001120:	701a      	strb	r2, [r3, #0]
}
 8001122:	e152      	b.n	80013ca <nextion_command_control+0x5ae>
			}else if (rx_buffer[2] == SAVE_BUTTON) {
 8001124:	4b4f      	ldr	r3, [pc, #316]	; (8001264 <nextion_command_control+0x448>)
 8001126:	789b      	ldrb	r3, [r3, #2]
 8001128:	2b03      	cmp	r3, #3
 800112a:	f040 814e 	bne.w	80013ca <nextion_command_control+0x5ae>
				 CurrentButton = SAVE_BUTTON;
 800112e:	4b4f      	ldr	r3, [pc, #316]	; (800126c <nextion_command_control+0x450>)
 8001130:	2203      	movs	r2, #3
 8001132:	701a      	strb	r2, [r3, #0]
}
 8001134:	e149      	b.n	80013ca <nextion_command_control+0x5ae>
		}else if (rx_buffer[1] == PASSWORD_PAGE) {
 8001136:	4b4b      	ldr	r3, [pc, #300]	; (8001264 <nextion_command_control+0x448>)
 8001138:	785b      	ldrb	r3, [r3, #1]
 800113a:	2b08      	cmp	r3, #8
 800113c:	d118      	bne.n	8001170 <nextion_command_control+0x354>
			if (rx_buffer[2] == MENU_BUTTON) {
 800113e:	4b49      	ldr	r3, [pc, #292]	; (8001264 <nextion_command_control+0x448>)
 8001140:	789b      	ldrb	r3, [r3, #2]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d103      	bne.n	800114e <nextion_command_control+0x332>
				 CurrentPage = PARAMETERS_PAGE;
 8001146:	4b48      	ldr	r3, [pc, #288]	; (8001268 <nextion_command_control+0x44c>)
 8001148:	2204      	movs	r2, #4
 800114a:	701a      	strb	r2, [r3, #0]
}
 800114c:	e13d      	b.n	80013ca <nextion_command_control+0x5ae>
			}else if (rx_buffer[2] == DEFAULT_BUTTON) {
 800114e:	4b45      	ldr	r3, [pc, #276]	; (8001264 <nextion_command_control+0x448>)
 8001150:	789b      	ldrb	r3, [r3, #2]
 8001152:	2b02      	cmp	r3, #2
 8001154:	d103      	bne.n	800115e <nextion_command_control+0x342>
				 CurrentButton = DEFAULT_BUTTON;
 8001156:	4b45      	ldr	r3, [pc, #276]	; (800126c <nextion_command_control+0x450>)
 8001158:	2202      	movs	r2, #2
 800115a:	701a      	strb	r2, [r3, #0]
}
 800115c:	e135      	b.n	80013ca <nextion_command_control+0x5ae>
			}else if (rx_buffer[2] == SAVE_BUTTON) {
 800115e:	4b41      	ldr	r3, [pc, #260]	; (8001264 <nextion_command_control+0x448>)
 8001160:	789b      	ldrb	r3, [r3, #2]
 8001162:	2b03      	cmp	r3, #3
 8001164:	f040 8131 	bne.w	80013ca <nextion_command_control+0x5ae>
				 CurrentButton = SAVE_BUTTON;
 8001168:	4b40      	ldr	r3, [pc, #256]	; (800126c <nextion_command_control+0x450>)
 800116a:	2203      	movs	r2, #3
 800116c:	701a      	strb	r2, [r3, #0]
}
 800116e:	e12c      	b.n	80013ca <nextion_command_control+0x5ae>
		}else if (rx_buffer[1] == FACTORY_PAGE) {
 8001170:	4b3c      	ldr	r3, [pc, #240]	; (8001264 <nextion_command_control+0x448>)
 8001172:	785b      	ldrb	r3, [r3, #1]
 8001174:	2b09      	cmp	r3, #9
 8001176:	d118      	bne.n	80011aa <nextion_command_control+0x38e>
			if (rx_buffer[2] == MENU_BUTTON) {
 8001178:	4b3a      	ldr	r3, [pc, #232]	; (8001264 <nextion_command_control+0x448>)
 800117a:	789b      	ldrb	r3, [r3, #2]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d103      	bne.n	8001188 <nextion_command_control+0x36c>
				 CurrentPage = PARAMETERS_PAGE;
 8001180:	4b39      	ldr	r3, [pc, #228]	; (8001268 <nextion_command_control+0x44c>)
 8001182:	2204      	movs	r2, #4
 8001184:	701a      	strb	r2, [r3, #0]
}
 8001186:	e120      	b.n	80013ca <nextion_command_control+0x5ae>
			}else if (rx_buffer[2] == YES_BUTTON) {
 8001188:	4b36      	ldr	r3, [pc, #216]	; (8001264 <nextion_command_control+0x448>)
 800118a:	789b      	ldrb	r3, [r3, #2]
 800118c:	2b04      	cmp	r3, #4
 800118e:	d103      	bne.n	8001198 <nextion_command_control+0x37c>
				 CurrentButton = YES_BUTTON;
 8001190:	4b36      	ldr	r3, [pc, #216]	; (800126c <nextion_command_control+0x450>)
 8001192:	2204      	movs	r2, #4
 8001194:	701a      	strb	r2, [r3, #0]
}
 8001196:	e118      	b.n	80013ca <nextion_command_control+0x5ae>
			}else if (rx_buffer[2] == NO_BUTTON) {
 8001198:	4b32      	ldr	r3, [pc, #200]	; (8001264 <nextion_command_control+0x448>)
 800119a:	789b      	ldrb	r3, [r3, #2]
 800119c:	2b05      	cmp	r3, #5
 800119e:	f040 8114 	bne.w	80013ca <nextion_command_control+0x5ae>
				 CurrentButton = NO_BUTTON;
 80011a2:	4b32      	ldr	r3, [pc, #200]	; (800126c <nextion_command_control+0x450>)
 80011a4:	2205      	movs	r2, #5
 80011a6:	701a      	strb	r2, [r3, #0]
}
 80011a8:	e10f      	b.n	80013ca <nextion_command_control+0x5ae>
		}else if (rx_buffer[1] == COEF_PAGE) {
 80011aa:	4b2e      	ldr	r3, [pc, #184]	; (8001264 <nextion_command_control+0x448>)
 80011ac:	785b      	ldrb	r3, [r3, #1]
 80011ae:	2b0a      	cmp	r3, #10
 80011b0:	d118      	bne.n	80011e4 <nextion_command_control+0x3c8>
			if (rx_buffer[2] == MENU_BUTTON) {
 80011b2:	4b2c      	ldr	r3, [pc, #176]	; (8001264 <nextion_command_control+0x448>)
 80011b4:	789b      	ldrb	r3, [r3, #2]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d103      	bne.n	80011c2 <nextion_command_control+0x3a6>
				 CurrentPage = PARAMETERS_PAGE;
 80011ba:	4b2b      	ldr	r3, [pc, #172]	; (8001268 <nextion_command_control+0x44c>)
 80011bc:	2204      	movs	r2, #4
 80011be:	701a      	strb	r2, [r3, #0]
}
 80011c0:	e103      	b.n	80013ca <nextion_command_control+0x5ae>
			}else if (rx_buffer[2] == DEFAULT_BUTTON) {
 80011c2:	4b28      	ldr	r3, [pc, #160]	; (8001264 <nextion_command_control+0x448>)
 80011c4:	789b      	ldrb	r3, [r3, #2]
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d103      	bne.n	80011d2 <nextion_command_control+0x3b6>
				 CurrentButton = DEFAULT_BUTTON;
 80011ca:	4b28      	ldr	r3, [pc, #160]	; (800126c <nextion_command_control+0x450>)
 80011cc:	2202      	movs	r2, #2
 80011ce:	701a      	strb	r2, [r3, #0]
}
 80011d0:	e0fb      	b.n	80013ca <nextion_command_control+0x5ae>
			}else if (rx_buffer[2] == SAVE_BUTTON) {
 80011d2:	4b24      	ldr	r3, [pc, #144]	; (8001264 <nextion_command_control+0x448>)
 80011d4:	789b      	ldrb	r3, [r3, #2]
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	f040 80f7 	bne.w	80013ca <nextion_command_control+0x5ae>
				 CurrentButton = SAVE_BUTTON;
 80011dc:	4b23      	ldr	r3, [pc, #140]	; (800126c <nextion_command_control+0x450>)
 80011de:	2203      	movs	r2, #3
 80011e0:	701a      	strb	r2, [r3, #0]
}
 80011e2:	e0f2      	b.n	80013ca <nextion_command_control+0x5ae>
		}else if (rx_buffer[1] == UNITS_PAGE) {
 80011e4:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <nextion_command_control+0x448>)
 80011e6:	785b      	ldrb	r3, [r3, #1]
 80011e8:	2b0b      	cmp	r3, #11
 80011ea:	d11e      	bne.n	800122a <nextion_command_control+0x40e>
			if (rx_buffer[2] == MENU_BUTTON) {
 80011ec:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <nextion_command_control+0x448>)
 80011ee:	789b      	ldrb	r3, [r3, #2]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d103      	bne.n	80011fc <nextion_command_control+0x3e0>
				 CurrentPage = PARAMETERS_PAGE;
 80011f4:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <nextion_command_control+0x44c>)
 80011f6:	2204      	movs	r2, #4
 80011f8:	701a      	strb	r2, [r3, #0]
}
 80011fa:	e0e6      	b.n	80013ca <nextion_command_control+0x5ae>
			}else if (rx_buffer[2] == DEFAULT_BUTTON) {
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <nextion_command_control+0x448>)
 80011fe:	789b      	ldrb	r3, [r3, #2]
 8001200:	2b02      	cmp	r3, #2
 8001202:	d106      	bne.n	8001212 <nextion_command_control+0x3f6>
				 CurrentPage = UNITS_PAGE;
 8001204:	4b18      	ldr	r3, [pc, #96]	; (8001268 <nextion_command_control+0x44c>)
 8001206:	220b      	movs	r2, #11
 8001208:	701a      	strb	r2, [r3, #0]
				 CurrentButton = DEFAULT_BUTTON;
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <nextion_command_control+0x450>)
 800120c:	2202      	movs	r2, #2
 800120e:	701a      	strb	r2, [r3, #0]
}
 8001210:	e0db      	b.n	80013ca <nextion_command_control+0x5ae>
			}else if (rx_buffer[2] == SAVE_BUTTON) {
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <nextion_command_control+0x448>)
 8001214:	789b      	ldrb	r3, [r3, #2]
 8001216:	2b03      	cmp	r3, #3
 8001218:	f040 80d7 	bne.w	80013ca <nextion_command_control+0x5ae>
				 CurrentPage = UNITS_PAGE;
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <nextion_command_control+0x44c>)
 800121e:	220b      	movs	r2, #11
 8001220:	701a      	strb	r2, [r3, #0]
				 CurrentButton = SAVE_BUTTON;
 8001222:	4b12      	ldr	r3, [pc, #72]	; (800126c <nextion_command_control+0x450>)
 8001224:	2203      	movs	r2, #3
 8001226:	701a      	strb	r2, [r3, #0]
}
 8001228:	e0cf      	b.n	80013ca <nextion_command_control+0x5ae>
		}else if (rx_buffer[1] == LOGIN_PAGE) {
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <nextion_command_control+0x448>)
 800122c:	785b      	ldrb	r3, [r3, #1]
 800122e:	2b0c      	cmp	r3, #12
 8001230:	d11e      	bne.n	8001270 <nextion_command_control+0x454>
			if (rx_buffer[2] == MENU_BUTTON) { //  0x01  MENU     buton
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <nextion_command_control+0x448>)
 8001234:	789b      	ldrb	r3, [r3, #2]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d103      	bne.n	8001242 <nextion_command_control+0x426>
				 CurrentPage = STARTING_PAGE;
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <nextion_command_control+0x44c>)
 800123c:	2201      	movs	r2, #1
 800123e:	701a      	strb	r2, [r3, #0]
}
 8001240:	e0c3      	b.n	80013ca <nextion_command_control+0x5ae>
			}else if (rx_buffer[2] == DEFAULT_BUTTON) {
 8001242:	4b08      	ldr	r3, [pc, #32]	; (8001264 <nextion_command_control+0x448>)
 8001244:	789b      	ldrb	r3, [r3, #2]
 8001246:	2b02      	cmp	r3, #2
 8001248:	d103      	bne.n	8001252 <nextion_command_control+0x436>
				 CurrentButton = DEFAULT_BUTTON;
 800124a:	4b08      	ldr	r3, [pc, #32]	; (800126c <nextion_command_control+0x450>)
 800124c:	2202      	movs	r2, #2
 800124e:	701a      	strb	r2, [r3, #0]
}
 8001250:	e0bb      	b.n	80013ca <nextion_command_control+0x5ae>
			}else if (rx_buffer[2] == SAVE_BUTTON) {
 8001252:	4b04      	ldr	r3, [pc, #16]	; (8001264 <nextion_command_control+0x448>)
 8001254:	789b      	ldrb	r3, [r3, #2]
 8001256:	2b03      	cmp	r3, #3
 8001258:	f040 80b7 	bne.w	80013ca <nextion_command_control+0x5ae>
				 CurrentButton = SAVE_BUTTON;
 800125c:	4b03      	ldr	r3, [pc, #12]	; (800126c <nextion_command_control+0x450>)
 800125e:	2203      	movs	r2, #3
 8001260:	701a      	strb	r2, [r3, #0]
}
 8001262:	e0b2      	b.n	80013ca <nextion_command_control+0x5ae>
 8001264:	2000017c 	.word	0x2000017c
 8001268:	20000178 	.word	0x20000178
 800126c:	20000179 	.word	0x20000179
		}else if (rx_buffer[1] == CALIBRATION_PAGE) {
 8001270:	4b58      	ldr	r3, [pc, #352]	; (80013d4 <nextion_command_control+0x5b8>)
 8001272:	785b      	ldrb	r3, [r3, #1]
 8001274:	2b0d      	cmp	r3, #13
 8001276:	d13e      	bne.n	80012f6 <nextion_command_control+0x4da>
			if (rx_buffer[2] == MENU_BUTTON) {
 8001278:	4b56      	ldr	r3, [pc, #344]	; (80013d4 <nextion_command_control+0x5b8>)
 800127a:	789b      	ldrb	r3, [r3, #2]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d102      	bne.n	8001286 <nextion_command_control+0x46a>
			 CurrentPage = PARAMETERS_PAGE;
 8001280:	4b55      	ldr	r3, [pc, #340]	; (80013d8 <nextion_command_control+0x5bc>)
 8001282:	2204      	movs	r2, #4
 8001284:	701a      	strb	r2, [r3, #0]
			if (rx_buffer[2] == RELAY1_BUTTON) {
 8001286:	4b53      	ldr	r3, [pc, #332]	; (80013d4 <nextion_command_control+0x5b8>)
 8001288:	789b      	ldrb	r3, [r3, #2]
 800128a:	2b08      	cmp	r3, #8
 800128c:	d102      	bne.n	8001294 <nextion_command_control+0x478>
			 CurrentButton = RELAY1_BUTTON;
 800128e:	4b53      	ldr	r3, [pc, #332]	; (80013dc <nextion_command_control+0x5c0>)
 8001290:	2208      	movs	r2, #8
 8001292:	701a      	strb	r2, [r3, #0]
			if (rx_buffer[2] == RELAY2_BUTTON) {
 8001294:	4b4f      	ldr	r3, [pc, #316]	; (80013d4 <nextion_command_control+0x5b8>)
 8001296:	789b      	ldrb	r3, [r3, #2]
 8001298:	2b09      	cmp	r3, #9
 800129a:	d102      	bne.n	80012a2 <nextion_command_control+0x486>
			 CurrentButton = RELAY2_BUTTON;
 800129c:	4b4f      	ldr	r3, [pc, #316]	; (80013dc <nextion_command_control+0x5c0>)
 800129e:	2209      	movs	r2, #9
 80012a0:	701a      	strb	r2, [r3, #0]
			if (rx_buffer[2] == RELAY3_BUTTON) {
 80012a2:	4b4c      	ldr	r3, [pc, #304]	; (80013d4 <nextion_command_control+0x5b8>)
 80012a4:	789b      	ldrb	r3, [r3, #2]
 80012a6:	2b15      	cmp	r3, #21
 80012a8:	d102      	bne.n	80012b0 <nextion_command_control+0x494>
			 CurrentButton = RELAY3_BUTTON;
 80012aa:	4b4c      	ldr	r3, [pc, #304]	; (80013dc <nextion_command_control+0x5c0>)
 80012ac:	2215      	movs	r2, #21
 80012ae:	701a      	strb	r2, [r3, #0]
			if (rx_buffer[2] == RELAY4_BUTTON) {
 80012b0:	4b48      	ldr	r3, [pc, #288]	; (80013d4 <nextion_command_control+0x5b8>)
 80012b2:	789b      	ldrb	r3, [r3, #2]
 80012b4:	2b17      	cmp	r3, #23
 80012b6:	d102      	bne.n	80012be <nextion_command_control+0x4a2>
			 CurrentButton = RELAY4_BUTTON;
 80012b8:	4b48      	ldr	r3, [pc, #288]	; (80013dc <nextion_command_control+0x5c0>)
 80012ba:	2217      	movs	r2, #23
 80012bc:	701a      	strb	r2, [r3, #0]
			if (rx_buffer[2] == OFFSET_BUTTON) {
 80012be:	4b45      	ldr	r3, [pc, #276]	; (80013d4 <nextion_command_control+0x5b8>)
 80012c0:	789b      	ldrb	r3, [r3, #2]
 80012c2:	2b12      	cmp	r3, #18
 80012c4:	d105      	bne.n	80012d2 <nextion_command_control+0x4b6>
				 CurrentPage = OFFSET_PAGE;
 80012c6:	4b44      	ldr	r3, [pc, #272]	; (80013d8 <nextion_command_control+0x5bc>)
 80012c8:	220e      	movs	r2, #14
 80012ca:	701a      	strb	r2, [r3, #0]
				 CurrentButton = OFFSET_BUTTON;
 80012cc:	4b43      	ldr	r3, [pc, #268]	; (80013dc <nextion_command_control+0x5c0>)
 80012ce:	2212      	movs	r2, #18
 80012d0:	701a      	strb	r2, [r3, #0]
			if (rx_buffer[2] == 27) {
 80012d2:	4b40      	ldr	r3, [pc, #256]	; (80013d4 <nextion_command_control+0x5b8>)
 80012d4:	789b      	ldrb	r3, [r3, #2]
 80012d6:	2b1b      	cmp	r3, #27
 80012d8:	d105      	bne.n	80012e6 <nextion_command_control+0x4ca>
				 CurrentPage = GRAPHIC_PAGE;
 80012da:	4b3f      	ldr	r3, [pc, #252]	; (80013d8 <nextion_command_control+0x5bc>)
 80012dc:	220f      	movs	r2, #15
 80012de:	701a      	strb	r2, [r3, #0]
				 CurrentButton = 0;
 80012e0:	4b3e      	ldr	r3, [pc, #248]	; (80013dc <nextion_command_control+0x5c0>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
			if (rx_buffer[2] == SAVE_BUTTON) {
 80012e6:	4b3b      	ldr	r3, [pc, #236]	; (80013d4 <nextion_command_control+0x5b8>)
 80012e8:	789b      	ldrb	r3, [r3, #2]
 80012ea:	2b03      	cmp	r3, #3
 80012ec:	d16d      	bne.n	80013ca <nextion_command_control+0x5ae>
			 CurrentButton = SAVE_BUTTON;
 80012ee:	4b3b      	ldr	r3, [pc, #236]	; (80013dc <nextion_command_control+0x5c0>)
 80012f0:	2203      	movs	r2, #3
 80012f2:	701a      	strb	r2, [r3, #0]
}
 80012f4:	e069      	b.n	80013ca <nextion_command_control+0x5ae>
		}else if (rx_buffer[1] == GRAPHIC_PAGE) {
 80012f6:	4b37      	ldr	r3, [pc, #220]	; (80013d4 <nextion_command_control+0x5b8>)
 80012f8:	785b      	ldrb	r3, [r3, #1]
 80012fa:	2b0f      	cmp	r3, #15
 80012fc:	d115      	bne.n	800132a <nextion_command_control+0x50e>
			if (rx_buffer[2] == MENU_BUTTON) {
 80012fe:	4b35      	ldr	r3, [pc, #212]	; (80013d4 <nextion_command_control+0x5b8>)
 8001300:	789b      	ldrb	r3, [r3, #2]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d102      	bne.n	800130c <nextion_command_control+0x4f0>
			 CurrentPage = PARAMETERS_PAGE;
 8001306:	4b34      	ldr	r3, [pc, #208]	; (80013d8 <nextion_command_control+0x5bc>)
 8001308:	2204      	movs	r2, #4
 800130a:	701a      	strb	r2, [r3, #0]
			if (rx_buffer[2] == RELAY1_BUTTON) {
 800130c:	4b31      	ldr	r3, [pc, #196]	; (80013d4 <nextion_command_control+0x5b8>)
 800130e:	789b      	ldrb	r3, [r3, #2]
 8001310:	2b08      	cmp	r3, #8
 8001312:	d102      	bne.n	800131a <nextion_command_control+0x4fe>
			 CurrentButton = RELAY1_BUTTON;
 8001314:	4b31      	ldr	r3, [pc, #196]	; (80013dc <nextion_command_control+0x5c0>)
 8001316:	2208      	movs	r2, #8
 8001318:	701a      	strb	r2, [r3, #0]
			if (rx_buffer[2] == RELAY2_BUTTON) {
 800131a:	4b2e      	ldr	r3, [pc, #184]	; (80013d4 <nextion_command_control+0x5b8>)
 800131c:	789b      	ldrb	r3, [r3, #2]
 800131e:	2b09      	cmp	r3, #9
 8001320:	d153      	bne.n	80013ca <nextion_command_control+0x5ae>
			 CurrentButton = RELAY2_BUTTON;
 8001322:	4b2e      	ldr	r3, [pc, #184]	; (80013dc <nextion_command_control+0x5c0>)
 8001324:	2209      	movs	r2, #9
 8001326:	701a      	strb	r2, [r3, #0]
}
 8001328:	e04f      	b.n	80013ca <nextion_command_control+0x5ae>
		}else if (rx_buffer[1] == OFFSET_PAGE) {
 800132a:	4b2a      	ldr	r3, [pc, #168]	; (80013d4 <nextion_command_control+0x5b8>)
 800132c:	785b      	ldrb	r3, [r3, #1]
 800132e:	2b0e      	cmp	r3, #14
 8001330:	d14b      	bne.n	80013ca <nextion_command_control+0x5ae>
			if (rx_buffer[2] == MENU_BUTTON) {
 8001332:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <nextion_command_control+0x5b8>)
 8001334:	789b      	ldrb	r3, [r3, #2]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d103      	bne.n	8001342 <nextion_command_control+0x526>
				 CurrentPage = PARAMETERS_PAGE;//  0x01  MENU     buton
 800133a:	4b27      	ldr	r3, [pc, #156]	; (80013d8 <nextion_command_control+0x5bc>)
 800133c:	2204      	movs	r2, #4
 800133e:	701a      	strb	r2, [r3, #0]
}
 8001340:	e043      	b.n	80013ca <nextion_command_control+0x5ae>
			}else if (rx_buffer[2] == YES_BUTTON) {
 8001342:	4b24      	ldr	r3, [pc, #144]	; (80013d4 <nextion_command_control+0x5b8>)
 8001344:	789b      	ldrb	r3, [r3, #2]
 8001346:	2b04      	cmp	r3, #4
 8001348:	d103      	bne.n	8001352 <nextion_command_control+0x536>
				 CurrentButton = YES_BUTTON;
 800134a:	4b24      	ldr	r3, [pc, #144]	; (80013dc <nextion_command_control+0x5c0>)
 800134c:	2204      	movs	r2, #4
 800134e:	701a      	strb	r2, [r3, #0]
}
 8001350:	e03b      	b.n	80013ca <nextion_command_control+0x5ae>
			}else if (rx_buffer[2] == NO_BUTTON) {
 8001352:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <nextion_command_control+0x5b8>)
 8001354:	789b      	ldrb	r3, [r3, #2]
 8001356:	2b05      	cmp	r3, #5
 8001358:	d137      	bne.n	80013ca <nextion_command_control+0x5ae>
				 CurrentButton = NO_BUTTON;
 800135a:	4b20      	ldr	r3, [pc, #128]	; (80013dc <nextion_command_control+0x5c0>)
 800135c:	2205      	movs	r2, #5
 800135e:	701a      	strb	r2, [r3, #0]
}
 8001360:	e033      	b.n	80013ca <nextion_command_control+0x5ae>
	}else if (rx_buffer[0] == STRING_HEAD) {
 8001362:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <nextion_command_control+0x5b8>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b70      	cmp	r3, #112	; 0x70
 8001368:	d02f      	beq.n	80013ca <nextion_command_control+0x5ae>
	}else if (rx_buffer[0] == NUMBER_HEAD) {
 800136a:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <nextion_command_control+0x5b8>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b71      	cmp	r3, #113	; 0x71
 8001370:	d124      	bne.n	80013bc <nextion_command_control+0x5a0>
		numberHead=true;
 8001372:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <nextion_command_control+0x5c4>)
 8001374:	2201      	movs	r2, #1
 8001376:	701a      	strb	r2, [r3, #0]
		if (rx_buffer[0] == NUMBER_HEAD
 8001378:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <nextion_command_control+0x5b8>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b71      	cmp	r3, #113	; 0x71
 800137e:	d124      	bne.n	80013ca <nextion_command_control+0x5ae>
				&& rx_buffer[5] == 0xFF
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <nextion_command_control+0x5b8>)
 8001382:	795b      	ldrb	r3, [r3, #5]
 8001384:	2bff      	cmp	r3, #255	; 0xff
 8001386:	d120      	bne.n	80013ca <nextion_command_control+0x5ae>
				&& rx_buffer[6] == 0xFF
 8001388:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <nextion_command_control+0x5b8>)
 800138a:	799b      	ldrb	r3, [r3, #6]
 800138c:	2bff      	cmp	r3, #255	; 0xff
 800138e:	d11c      	bne.n	80013ca <nextion_command_control+0x5ae>
				&& rx_buffer[7] == 0xFF
 8001390:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <nextion_command_control+0x5b8>)
 8001392:	79db      	ldrb	r3, [r3, #7]
 8001394:	2bff      	cmp	r3, #255	; 0xff
 8001396:	d118      	bne.n	80013ca <nextion_command_control+0x5ae>
			Next_Number_Value = (rx_buffer[4] << 24) | (rx_buffer[3] << 16) | (rx_buffer[2] << 8) | (rx_buffer[1]);
 8001398:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <nextion_command_control+0x5b8>)
 800139a:	791b      	ldrb	r3, [r3, #4]
 800139c:	061a      	lsls	r2, r3, #24
 800139e:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <nextion_command_control+0x5b8>)
 80013a0:	78db      	ldrb	r3, [r3, #3]
 80013a2:	041b      	lsls	r3, r3, #16
 80013a4:	431a      	orrs	r2, r3
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <nextion_command_control+0x5b8>)
 80013a8:	789b      	ldrb	r3, [r3, #2]
 80013aa:	021b      	lsls	r3, r3, #8
 80013ac:	4313      	orrs	r3, r2
 80013ae:	4a09      	ldr	r2, [pc, #36]	; (80013d4 <nextion_command_control+0x5b8>)
 80013b0:	7852      	ldrb	r2, [r2, #1]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <nextion_command_control+0x5c8>)
 80013b8:	601a      	str	r2, [r3, #0]
}
 80013ba:	e006      	b.n	80013ca <nextion_command_control+0x5ae>
	}else if (rx_buffer[0] == CMD_FINISHED) {
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <nextion_command_control+0x5b8>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d002      	beq.n	80013ca <nextion_command_control+0x5ae>
	}else if (rx_buffer[0] == INVALID_CMD) {
 80013c4:	4b03      	ldr	r3, [pc, #12]	; (80013d4 <nextion_command_control+0x5b8>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	2000017c 	.word	0x2000017c
 80013d8:	20000178 	.word	0x20000178
 80013dc:	20000179 	.word	0x20000179
 80013e0:	200001c9 	.word	0x200001c9
 80013e4:	200001c0 	.word	0x200001c0

080013e8 <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	
	//HAL_UART_Receive_IT (&huart6, (uint8_t *)reading_buffer, 1);
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6 ){
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a34      	ldr	r2, [pc, #208]	; (80014dc <HAL_UART_RxCpltCallback+0xe0>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d134      	bne.n	8001478 <HAL_UART_RxCpltCallback+0x7c>
		rx_buffer[count] = reading_buffer[0];
 800140e:	4b34      	ldr	r3, [pc, #208]	; (80014e0 <HAL_UART_RxCpltCallback+0xe4>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a34      	ldr	r2, [pc, #208]	; (80014e4 <HAL_UART_RxCpltCallback+0xe8>)
 8001414:	7811      	ldrb	r1, [r2, #0]
 8001416:	4a34      	ldr	r2, [pc, #208]	; (80014e8 <HAL_UART_RxCpltCallback+0xec>)
 8001418:	54d1      	strb	r1, [r2, r3]
		if (rx_buffer[count] == 0xff) {
 800141a:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <HAL_UART_RxCpltCallback+0xe4>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a32      	ldr	r2, [pc, #200]	; (80014e8 <HAL_UART_RxCpltCallback+0xec>)
 8001420:	5cd3      	ldrb	r3, [r2, r3]
 8001422:	2bff      	cmp	r3, #255	; 0xff
 8001424:	d123      	bne.n	800146e <HAL_UART_RxCpltCallback+0x72>
			if (rx_buffer[count-1] == 0xff) {
 8001426:	4b2e      	ldr	r3, [pc, #184]	; (80014e0 <HAL_UART_RxCpltCallback+0xe4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	3b01      	subs	r3, #1
 800142c:	4a2e      	ldr	r2, [pc, #184]	; (80014e8 <HAL_UART_RxCpltCallback+0xec>)
 800142e:	5cd3      	ldrb	r3, [r2, r3]
 8001430:	2bff      	cmp	r3, #255	; 0xff
 8001432:	d116      	bne.n	8001462 <HAL_UART_RxCpltCallback+0x66>
				if (rx_buffer[count-2] == 0xff) {
 8001434:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <HAL_UART_RxCpltCallback+0xe4>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	3b02      	subs	r3, #2
 800143a:	4a2b      	ldr	r2, [pc, #172]	; (80014e8 <HAL_UART_RxCpltCallback+0xec>)
 800143c:	5cd3      	ldrb	r3, [r2, r3]
 800143e:	2bff      	cmp	r3, #255	; 0xff
 8001440:	d109      	bne.n	8001456 <HAL_UART_RxCpltCallback+0x5a>
					count=0;
 8001442:	4b27      	ldr	r3, [pc, #156]	; (80014e0 <HAL_UART_RxCpltCallback+0xe4>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
					countReceive=0;
 8001448:	4b28      	ldr	r3, [pc, #160]	; (80014ec <HAL_UART_RxCpltCallback+0xf0>)
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
					nextion_command_ready = true;
 800144e:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <HAL_UART_RxCpltCallback+0xf4>)
 8001450:	2201      	movs	r2, #1
 8001452:	701a      	strb	r2, [r3, #0]
 8001454:	e010      	b.n	8001478 <HAL_UART_RxCpltCallback+0x7c>
				}else {
					count++;
 8001456:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <HAL_UART_RxCpltCallback+0xe4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	3301      	adds	r3, #1
 800145c:	4a20      	ldr	r2, [pc, #128]	; (80014e0 <HAL_UART_RxCpltCallback+0xe4>)
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	e00a      	b.n	8001478 <HAL_UART_RxCpltCallback+0x7c>
				}
			}else {
				count++;
 8001462:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <HAL_UART_RxCpltCallback+0xe4>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	3301      	adds	r3, #1
 8001468:	4a1d      	ldr	r2, [pc, #116]	; (80014e0 <HAL_UART_RxCpltCallback+0xe4>)
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	e004      	b.n	8001478 <HAL_UART_RxCpltCallback+0x7c>
			}
		}else {
			count++;
 800146e:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <HAL_UART_RxCpltCallback+0xe4>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	3301      	adds	r3, #1
 8001474:	4a1a      	ldr	r2, [pc, #104]	; (80014e0 <HAL_UART_RxCpltCallback+0xe4>)
 8001476:	6013      	str	r3, [r2, #0]
		}
	}

	if(huart->Instance == USART6 && nextion_command_ready == true){
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a17      	ldr	r2, [pc, #92]	; (80014dc <HAL_UART_RxCpltCallback+0xe0>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d123      	bne.n	80014ca <HAL_UART_RxCpltCallback+0xce>
 8001482:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <HAL_UART_RxCpltCallback+0xf4>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d01f      	beq.n	80014ca <HAL_UART_RxCpltCallback+0xce>
		__HAL_UART_DISABLE_IT(&huart6, UART_IT_RXNE);
 800148a:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <HAL_UART_RxCpltCallback+0xf8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68da      	ldr	r2, [r3, #12]
 8001490:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <HAL_UART_RxCpltCallback+0xf8>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f022 0220 	bic.w	r2, r2, #32
 8001498:	60da      	str	r2, [r3, #12]
			UartReady = RESET;
 800149a:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <HAL_UART_RxCpltCallback+0xfc>)
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
			nextion_command_control();
 80014a0:	f7ff fcbc 	bl	8000e1c <nextion_command_control>
		usartReceiveITEnable = 0;
 80014a4:	4b15      	ldr	r3, [pc, #84]	; (80014fc <HAL_UART_RxCpltCallback+0x100>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
		nextion_command_ready = false;
 80014aa:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <HAL_UART_RxCpltCallback+0xf4>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]
		Clear_rx_buffer();
 80014b0:	f7ff fc9a 	bl	8000de8 <Clear_rx_buffer>

		//__NOP();
		__HAL_UART_ENABLE_IT(&huart6, UART_IT_RXNE);
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <HAL_UART_RxCpltCallback+0xf8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68da      	ldr	r2, [r3, #12]
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <HAL_UART_RxCpltCallback+0xf8>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f042 0220 	orr.w	r2, r2, #32
 80014c2:	60da      	str	r2, [r3, #12]
		UartReady = SET;
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <HAL_UART_RxCpltCallback+0xfc>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	701a      	strb	r2, [r3, #0]
	* ff bitiş kodları
	* ff bitiş kodları			  
	*/
	//Clear_rx_buffer();
	//HAL_UART_Receive_IT (&huart3, rx_buffer, 7);
	HAL_UART_Receive_IT (&huart6, (uint8_t *)reading_buffer, 1);
 80014ca:	2201      	movs	r2, #1
 80014cc:	4905      	ldr	r1, [pc, #20]	; (80014e4 <HAL_UART_RxCpltCallback+0xe8>)
 80014ce:	4809      	ldr	r0, [pc, #36]	; (80014f4 <HAL_UART_RxCpltCallback+0xf8>)
 80014d0:	f002 ff4c 	bl	800436c <HAL_UART_Receive_IT>
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40011400 	.word	0x40011400
 80014e0:	200001c4 	.word	0x200001c4
 80014e4:	200001b0 	.word	0x200001b0
 80014e8:	2000017c 	.word	0x2000017c
 80014ec:	20000174 	.word	0x20000174
 80014f0:	200001c8 	.word	0x200001c8
 80014f4:	20000130 	.word	0x20000130
 80014f8:	2000009c 	.word	0x2000009c
 80014fc:	200001bc 	.word	0x200001bc

08001500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001504:	b672      	cpsid	i
}
 8001506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001508:	e7fe      	b.n	8001508 <Error_Handler+0x8>
	...

0800150c <Nextion_Set_Value>:
}
/*
 * Nextion_Set_Value("n0", 150);
 */
void Nextion_Set_Value(char *object_name, int32_t number)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	; 0x28
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
	char buf[30] = { 0 };
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	f107 030c 	add.w	r3, r7, #12
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	611a      	str	r2, [r3, #16]
 800152a:	615a      	str	r2, [r3, #20]
 800152c:	831a      	strh	r2, [r3, #24]
	sprintf(buf, "%s.val=%ld", object_name, number);
 800152e:	f107 0008 	add.w	r0, r7, #8
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	4907      	ldr	r1, [pc, #28]	; (8001554 <Nextion_Set_Value+0x48>)
 8001538:	f003 fed8 	bl	80052ec <siprintf>
	Nextion_Send_Command(buf);
 800153c:	f107 0308 	add.w	r3, r7, #8
 8001540:	4618      	mov	r0, r3
 8001542:	f000 f809 	bl	8001558 <Nextion_Send_Command>
	HAL_Delay(15);
 8001546:	200f      	movs	r0, #15
 8001548:	f000 faee 	bl	8001b28 <HAL_Delay>
}
 800154c:	bf00      	nop
 800154e:	3728      	adds	r7, #40	; 0x28
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	08005c10 	.word	0x08005c10

08001558 <Nextion_Send_Command>:
/*
 *
 * Nextion_Send_Command("page 3");
 */
void Nextion_Send_Command(char *command)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08e      	sub	sp, #56	; 0x38
 800155c:	af02      	add	r7, sp, #8
 800155e:	6078      	str	r0, [r7, #4]
	char buf[30] = { 0 };
 8001560:	2300      	movs	r3, #0
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
 8001574:	615a      	str	r2, [r3, #20]
 8001576:	831a      	strh	r2, [r3, #24]
	char sps = 0xFF;
 8001578:	23ff      	movs	r3, #255	; 0xff
 800157a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	int SizeBuf = sprintf(buf, "%s%c%c%c", command, sps, sps, sps);
 800157e:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8001582:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001586:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800158a:	f107 0008 	add.w	r0, r7, #8
 800158e:	9201      	str	r2, [sp, #4]
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	460b      	mov	r3, r1
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	490a      	ldr	r1, [pc, #40]	; (80015c0 <Nextion_Send_Command+0x68>)
 8001598:	f003 fea8 	bl	80052ec <siprintf>
 800159c:	62b8      	str	r0, [r7, #40]	; 0x28
	//HAL_UART_Transmit(&huart3, (uint8_t*) &buf, SizeBuf, NextionTimeOutMs);
	HAL_UART_Transmit(&huart6, (uint8_t*) &buf, SizeBuf, NextionTimeOutMs);
 800159e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <Nextion_Send_Command+0x6c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f107 0108 	add.w	r1, r7, #8
 80015aa:	4807      	ldr	r0, [pc, #28]	; (80015c8 <Nextion_Send_Command+0x70>)
 80015ac:	f002 fe4c 	bl	8004248 <HAL_UART_Transmit>
	HAL_Delay(10);																
 80015b0:	200a      	movs	r0, #10
 80015b2:	f000 fab9 	bl	8001b28 <HAL_Delay>
}
 80015b6:	bf00      	nop
 80015b8:	3730      	adds	r7, #48	; 0x30
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	08005c28 	.word	0x08005c28
 80015c4:	2000000c 	.word	0x2000000c
 80015c8:	20000130 	.word	0x20000130

080015cc <Nextion_Page>:
	Nextion_Send_Command(buf);
}


void Nextion_Page(uint8_t page_name)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	; 0x28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
	char buf[30] = { 0 };
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	f107 030c 	add.w	r3, r7, #12
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
 80015e8:	611a      	str	r2, [r3, #16]
 80015ea:	615a      	str	r2, [r3, #20]
 80015ec:	831a      	strh	r2, [r3, #24]
	sprintf(buf, "page %d", page_name);
 80015ee:	79fa      	ldrb	r2, [r7, #7]
 80015f0:	f107 0308 	add.w	r3, r7, #8
 80015f4:	4907      	ldr	r1, [pc, #28]	; (8001614 <Nextion_Page+0x48>)
 80015f6:	4618      	mov	r0, r3
 80015f8:	f003 fe78 	bl	80052ec <siprintf>
	Nextion_Send_Command(buf);
 80015fc:	f107 0308 	add.w	r3, r7, #8
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ffa9 	bl	8001558 <Nextion_Send_Command>
	HAL_Delay(100);
 8001606:	2064      	movs	r0, #100	; 0x64
 8001608:	f000 fa8e 	bl	8001b28 <HAL_Delay>
}
 800160c:	bf00      	nop
 800160e:	3728      	adds	r7, #40	; 0x28
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	08005c50 	.word	0x08005c50

08001618 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <HAL_MspInit+0x4c>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	4a0f      	ldr	r2, [pc, #60]	; (8001664 <HAL_MspInit+0x4c>)
 8001628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800162c:	6453      	str	r3, [r2, #68]	; 0x44
 800162e:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <HAL_MspInit+0x4c>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	603b      	str	r3, [r7, #0]
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <HAL_MspInit+0x4c>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	4a08      	ldr	r2, [pc, #32]	; (8001664 <HAL_MspInit+0x4c>)
 8001644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001648:	6413      	str	r3, [r2, #64]	; 0x40
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_MspInit+0x4c>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40023800 	.word	0x40023800

08001668 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08a      	sub	sp, #40	; 0x28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a27      	ldr	r2, [pc, #156]	; (8001724 <HAL_TIM_Base_MspInit+0xbc>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d134      	bne.n	80016f4 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	4b26      	ldr	r3, [pc, #152]	; (8001728 <HAL_TIM_Base_MspInit+0xc0>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	4a25      	ldr	r2, [pc, #148]	; (8001728 <HAL_TIM_Base_MspInit+0xc0>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6453      	str	r3, [r2, #68]	; 0x44
 800169a:	4b23      	ldr	r3, [pc, #140]	; (8001728 <HAL_TIM_Base_MspInit+0xc0>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <HAL_TIM_Base_MspInit+0xc0>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a1e      	ldr	r2, [pc, #120]	; (8001728 <HAL_TIM_Base_MspInit+0xc0>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <HAL_TIM_Base_MspInit+0xc0>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA6     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016c2:	2340      	movs	r3, #64	; 0x40
 80016c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c6:	2302      	movs	r3, #2
 80016c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016d2:	2301      	movs	r3, #1
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4619      	mov	r1, r3
 80016dc:	4813      	ldr	r0, [pc, #76]	; (800172c <HAL_TIM_Base_MspInit+0xc4>)
 80016de:	f000 fbeb 	bl	8001eb8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2100      	movs	r1, #0
 80016e6:	2018      	movs	r0, #24
 80016e8:	f000 fb1d 	bl	8001d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80016ec:	2018      	movs	r0, #24
 80016ee:	f000 fb36 	bl	8001d5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80016f2:	e012      	b.n	800171a <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM4)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0d      	ldr	r2, [pc, #52]	; (8001730 <HAL_TIM_Base_MspInit+0xc8>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d10d      	bne.n	800171a <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <HAL_TIM_Base_MspInit+0xc0>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	4a08      	ldr	r2, [pc, #32]	; (8001728 <HAL_TIM_Base_MspInit+0xc0>)
 8001708:	f043 0304 	orr.w	r3, r3, #4
 800170c:	6413      	str	r3, [r2, #64]	; 0x40
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_TIM_Base_MspInit+0xc0>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f003 0304 	and.w	r3, r3, #4
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
}
 800171a:	bf00      	nop
 800171c:	3728      	adds	r7, #40	; 0x28
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40010000 	.word	0x40010000
 8001728:	40023800 	.word	0x40023800
 800172c:	40020000 	.word	0x40020000
 8001730:	40000800 	.word	0x40000800

08001734 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08a      	sub	sp, #40	; 0x28
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a34      	ldr	r2, [pc, #208]	; (8001824 <HAL_TIM_MspPostInit+0xf0>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d13d      	bne.n	80017d2 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	4b33      	ldr	r3, [pc, #204]	; (8001828 <HAL_TIM_MspPostInit+0xf4>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a32      	ldr	r2, [pc, #200]	; (8001828 <HAL_TIM_MspPostInit+0xf4>)
 8001760:	f043 0302 	orr.w	r3, r3, #2
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b30      	ldr	r3, [pc, #192]	; (8001828 <HAL_TIM_MspPostInit+0xf4>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	4b2c      	ldr	r3, [pc, #176]	; (8001828 <HAL_TIM_MspPostInit+0xf4>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a2b      	ldr	r2, [pc, #172]	; (8001828 <HAL_TIM_MspPostInit+0xf4>)
 800177c:	f043 0310 	orr.w	r3, r3, #16
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b29      	ldr	r3, [pc, #164]	; (8001828 <HAL_TIM_MspPostInit+0xf4>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0310 	and.w	r3, r3, #16
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800178e:	2303      	movs	r3, #3
 8001790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800179e:	2301      	movs	r3, #1
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	4619      	mov	r1, r3
 80017a8:	4820      	ldr	r0, [pc, #128]	; (800182c <HAL_TIM_MspPostInit+0xf8>)
 80017aa:	f000 fb85 	bl	8001eb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80017ae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80017b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	2302      	movs	r3, #2
 80017b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2300      	movs	r3, #0
 80017be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017c0:	2301      	movs	r3, #1
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	4619      	mov	r1, r3
 80017ca:	4819      	ldr	r0, [pc, #100]	; (8001830 <HAL_TIM_MspPostInit+0xfc>)
 80017cc:	f000 fb74 	bl	8001eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80017d0:	e023      	b.n	800181a <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM4)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a17      	ldr	r2, [pc, #92]	; (8001834 <HAL_TIM_MspPostInit+0x100>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d11e      	bne.n	800181a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017dc:	2300      	movs	r3, #0
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <HAL_TIM_MspPostInit+0xf4>)
 80017e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e4:	4a10      	ldr	r2, [pc, #64]	; (8001828 <HAL_TIM_MspPostInit+0xf4>)
 80017e6:	f043 0308 	orr.w	r3, r3, #8
 80017ea:	6313      	str	r3, [r2, #48]	; 0x30
 80017ec:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <HAL_TIM_MspPostInit+0xf4>)
 80017ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80017f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001806:	2300      	movs	r3, #0
 8001808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800180a:	2302      	movs	r3, #2
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	4619      	mov	r1, r3
 8001814:	4808      	ldr	r0, [pc, #32]	; (8001838 <HAL_TIM_MspPostInit+0x104>)
 8001816:	f000 fb4f 	bl	8001eb8 <HAL_GPIO_Init>
}
 800181a:	bf00      	nop
 800181c:	3728      	adds	r7, #40	; 0x28
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40010000 	.word	0x40010000
 8001828:	40023800 	.word	0x40023800
 800182c:	40020400 	.word	0x40020400
 8001830:	40021000 	.word	0x40021000
 8001834:	40000800 	.word	0x40000800
 8001838:	40020c00 	.word	0x40020c00

0800183c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a19      	ldr	r2, [pc, #100]	; (80018c0 <HAL_UART_MspInit+0x84>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d12b      	bne.n	80018b6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <HAL_UART_MspInit+0x88>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001866:	4a17      	ldr	r2, [pc, #92]	; (80018c4 <HAL_UART_MspInit+0x88>)
 8001868:	f043 0320 	orr.w	r3, r3, #32
 800186c:	6453      	str	r3, [r2, #68]	; 0x44
 800186e:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <HAL_UART_MspInit+0x88>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	f003 0320 	and.w	r3, r3, #32
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <HAL_UART_MspInit+0x88>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a10      	ldr	r2, [pc, #64]	; (80018c4 <HAL_UART_MspInit+0x88>)
 8001884:	f043 0304 	orr.w	r3, r3, #4
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <HAL_UART_MspInit+0x88>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0304 	and.w	r3, r3, #4
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001896:	23c0      	movs	r3, #192	; 0xc0
 8001898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189a:	2302      	movs	r3, #2
 800189c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a2:	2303      	movs	r3, #3
 80018a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80018a6:	2308      	movs	r3, #8
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018aa:	f107 0314 	add.w	r3, r7, #20
 80018ae:	4619      	mov	r1, r3
 80018b0:	4805      	ldr	r0, [pc, #20]	; (80018c8 <HAL_UART_MspInit+0x8c>)
 80018b2:	f000 fb01 	bl	8001eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80018b6:	bf00      	nop
 80018b8:	3728      	adds	r7, #40	; 0x28
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40011400 	.word	0x40011400
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40020800 	.word	0x40020800

080018cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <NMI_Handler+0x4>

080018d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d6:	e7fe      	b.n	80018d6 <HardFault_Handler+0x4>

080018d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018dc:	e7fe      	b.n	80018dc <MemManage_Handler+0x4>

080018de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018e2:	e7fe      	b.n	80018e2 <BusFault_Handler+0x4>

080018e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <UsageFault_Handler+0x4>

080018ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001918:	f000 f8e6 	bl	8001ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}

08001920 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001924:	4802      	ldr	r0, [pc, #8]	; (8001930 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001926:	f001 fbfd 	bl	8003124 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	200000a0 	.word	0x200000a0

08001934 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001938:	4806      	ldr	r0, [pc, #24]	; (8001954 <USART6_IRQHandler+0x20>)
 800193a:	f002 fd47 	bl	80043cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
  usartReceiveITEnable = 1;
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <USART6_IRQHandler+0x24>)
 8001940:	2201      	movs	r2, #1
 8001942:	601a      	str	r2, [r3, #0]
  countReceive++;
 8001944:	4b05      	ldr	r3, [pc, #20]	; (800195c <USART6_IRQHandler+0x28>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	3301      	adds	r3, #1
 800194a:	4a04      	ldr	r2, [pc, #16]	; (800195c <USART6_IRQHandler+0x28>)
 800194c:	6013      	str	r3, [r2, #0]
  /* USER CODE END USART6_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000130 	.word	0x20000130
 8001958:	200001bc 	.word	0x200001bc
 800195c:	20000174 	.word	0x20000174

08001960 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001968:	4a14      	ldr	r2, [pc, #80]	; (80019bc <_sbrk+0x5c>)
 800196a:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <_sbrk+0x60>)
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001974:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <_sbrk+0x64>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d102      	bne.n	8001982 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <_sbrk+0x64>)
 800197e:	4a12      	ldr	r2, [pc, #72]	; (80019c8 <_sbrk+0x68>)
 8001980:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001982:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <_sbrk+0x64>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	429a      	cmp	r2, r3
 800198e:	d207      	bcs.n	80019a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001990:	f003 fc7a 	bl	8005288 <__errno>
 8001994:	4603      	mov	r3, r0
 8001996:	220c      	movs	r2, #12
 8001998:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800199a:	f04f 33ff 	mov.w	r3, #4294967295
 800199e:	e009      	b.n	80019b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <_sbrk+0x64>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019a6:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <_sbrk+0x64>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	4a05      	ldr	r2, [pc, #20]	; (80019c4 <_sbrk+0x64>)
 80019b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019b2:	68fb      	ldr	r3, [r7, #12]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20020000 	.word	0x20020000
 80019c0:	00004000 	.word	0x00004000
 80019c4:	200001d8 	.word	0x200001d8
 80019c8:	200001f0 	.word	0x200001f0

080019cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <SystemInit+0x20>)
 80019d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019d6:	4a05      	ldr	r2, [pc, #20]	; (80019ec <SystemInit+0x20>)
 80019d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019f4:	480d      	ldr	r0, [pc, #52]	; (8001a2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019f6:	490e      	ldr	r1, [pc, #56]	; (8001a30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019f8:	4a0e      	ldr	r2, [pc, #56]	; (8001a34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019fc:	e002      	b.n	8001a04 <LoopCopyDataInit>

080019fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a02:	3304      	adds	r3, #4

08001a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a08:	d3f9      	bcc.n	80019fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a0a:	4a0b      	ldr	r2, [pc, #44]	; (8001a38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a0c:	4c0b      	ldr	r4, [pc, #44]	; (8001a3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a10:	e001      	b.n	8001a16 <LoopFillZerobss>

08001a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a14:	3204      	adds	r2, #4

08001a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a18:	d3fb      	bcc.n	8001a12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a1a:	f7ff ffd7 	bl	80019cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a1e:	f003 fc39 	bl	8005294 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a22:	f7fe fe6d 	bl	8000700 <main>
  bx  lr    
 8001a26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a30:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001a34:	08005d2c 	.word	0x08005d2c
  ldr r2, =_sbss
 8001a38:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001a3c:	200001f0 	.word	0x200001f0

08001a40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a40:	e7fe      	b.n	8001a40 <ADC_IRQHandler>
	...

08001a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a48:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <HAL_Init+0x40>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0d      	ldr	r2, [pc, #52]	; (8001a84 <HAL_Init+0x40>)
 8001a4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a54:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <HAL_Init+0x40>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <HAL_Init+0x40>)
 8001a5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <HAL_Init+0x40>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a07      	ldr	r2, [pc, #28]	; (8001a84 <HAL_Init+0x40>)
 8001a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a6c:	2003      	movs	r0, #3
 8001a6e:	f000 f94f 	bl	8001d10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a72:	200f      	movs	r0, #15
 8001a74:	f000 f808 	bl	8001a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a78:	f7ff fdce 	bl	8001618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40023c00 	.word	0x40023c00

08001a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a90:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_InitTick+0x54>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <HAL_InitTick+0x58>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 f967 	bl	8001d7a <HAL_SYSTICK_Config>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e00e      	b.n	8001ad4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b0f      	cmp	r3, #15
 8001aba:	d80a      	bhi.n	8001ad2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001abc:	2200      	movs	r2, #0
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac4:	f000 f92f 	bl	8001d26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ac8:	4a06      	ldr	r2, [pc, #24]	; (8001ae4 <HAL_InitTick+0x5c>)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	e000      	b.n	8001ad4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000010 	.word	0x20000010
 8001ae0:	20000018 	.word	0x20000018
 8001ae4:	20000014 	.word	0x20000014

08001ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_IncTick+0x20>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_IncTick+0x24>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4413      	add	r3, r2
 8001af8:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <HAL_IncTick+0x24>)
 8001afa:	6013      	str	r3, [r2, #0]
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	20000018 	.word	0x20000018
 8001b0c:	200001dc 	.word	0x200001dc

08001b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return uwTick;
 8001b14:	4b03      	ldr	r3, [pc, #12]	; (8001b24 <HAL_GetTick+0x14>)
 8001b16:	681b      	ldr	r3, [r3, #0]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	200001dc 	.word	0x200001dc

08001b28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b30:	f7ff ffee 	bl	8001b10 <HAL_GetTick>
 8001b34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b40:	d005      	beq.n	8001b4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b42:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <HAL_Delay+0x44>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	461a      	mov	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b4e:	bf00      	nop
 8001b50:	f7ff ffde 	bl	8001b10 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d8f7      	bhi.n	8001b50 <HAL_Delay+0x28>
  {
  }
}
 8001b60:	bf00      	nop
 8001b62:	bf00      	nop
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000018 	.word	0x20000018

08001b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ba2:	4a04      	ldr	r2, [pc, #16]	; (8001bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	60d3      	str	r3, [r2, #12]
}
 8001ba8:	bf00      	nop
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bbc:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	0a1b      	lsrs	r3, r3, #8
 8001bc2:	f003 0307 	and.w	r3, r3, #7
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	db0b      	blt.n	8001bfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	f003 021f 	and.w	r2, r3, #31
 8001bec:	4907      	ldr	r1, [pc, #28]	; (8001c0c <__NVIC_EnableIRQ+0x38>)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	095b      	lsrs	r3, r3, #5
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000e100 	.word	0xe000e100

08001c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	6039      	str	r1, [r7, #0]
 8001c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	db0a      	blt.n	8001c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	490c      	ldr	r1, [pc, #48]	; (8001c5c <__NVIC_SetPriority+0x4c>)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	0112      	lsls	r2, r2, #4
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	440b      	add	r3, r1
 8001c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c38:	e00a      	b.n	8001c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	4908      	ldr	r1, [pc, #32]	; (8001c60 <__NVIC_SetPriority+0x50>)
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	3b04      	subs	r3, #4
 8001c48:	0112      	lsls	r2, r2, #4
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	761a      	strb	r2, [r3, #24]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	e000e100 	.word	0xe000e100
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b089      	sub	sp, #36	; 0x24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f1c3 0307 	rsb	r3, r3, #7
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	bf28      	it	cs
 8001c82:	2304      	movcs	r3, #4
 8001c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	2b06      	cmp	r3, #6
 8001c8c:	d902      	bls.n	8001c94 <NVIC_EncodePriority+0x30>
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3b03      	subs	r3, #3
 8001c92:	e000      	b.n	8001c96 <NVIC_EncodePriority+0x32>
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c98:	f04f 32ff 	mov.w	r2, #4294967295
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43da      	mvns	r2, r3
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cac:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb6:	43d9      	mvns	r1, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	4313      	orrs	r3, r2
         );
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3724      	adds	r7, #36	; 0x24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cdc:	d301      	bcc.n	8001ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e00f      	b.n	8001d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <SysTick_Config+0x40>)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cea:	210f      	movs	r1, #15
 8001cec:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf0:	f7ff ff8e 	bl	8001c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <SysTick_Config+0x40>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cfa:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <SysTick_Config+0x40>)
 8001cfc:	2207      	movs	r2, #7
 8001cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	e000e010 	.word	0xe000e010

08001d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff ff29 	bl	8001b70 <__NVIC_SetPriorityGrouping>
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b086      	sub	sp, #24
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	607a      	str	r2, [r7, #4]
 8001d32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d38:	f7ff ff3e 	bl	8001bb8 <__NVIC_GetPriorityGrouping>
 8001d3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	68b9      	ldr	r1, [r7, #8]
 8001d42:	6978      	ldr	r0, [r7, #20]
 8001d44:	f7ff ff8e 	bl	8001c64 <NVIC_EncodePriority>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d4e:	4611      	mov	r1, r2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff ff5d 	bl	8001c10 <__NVIC_SetPriority>
}
 8001d56:	bf00      	nop
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	4603      	mov	r3, r0
 8001d66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff31 	bl	8001bd4 <__NVIC_EnableIRQ>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff ffa2 	bl	8001ccc <SysTick_Config>
 8001d88:	4603      	mov	r3, r0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b084      	sub	sp, #16
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001da0:	f7ff feb6 	bl	8001b10 <HAL_GetTick>
 8001da4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d008      	beq.n	8001dc4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2280      	movs	r2, #128	; 0x80
 8001db6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e052      	b.n	8001e6a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0216 	bic.w	r2, r2, #22
 8001dd2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	695a      	ldr	r2, [r3, #20]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001de2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d103      	bne.n	8001df4 <HAL_DMA_Abort+0x62>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d007      	beq.n	8001e04 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0208 	bic.w	r2, r2, #8
 8001e02:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0201 	bic.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e14:	e013      	b.n	8001e3e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e16:	f7ff fe7b 	bl	8001b10 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b05      	cmp	r3, #5
 8001e22:	d90c      	bls.n	8001e3e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2220      	movs	r2, #32
 8001e28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e015      	b.n	8001e6a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1e4      	bne.n	8001e16 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e50:	223f      	movs	r2, #63	; 0x3f
 8001e52:	409a      	lsls	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d004      	beq.n	8001e90 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2280      	movs	r2, #128	; 0x80
 8001e8a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e00c      	b.n	8001eaa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2205      	movs	r2, #5
 8001e94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0201 	bic.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
	...

08001eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b089      	sub	sp, #36	; 0x24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61fb      	str	r3, [r7, #28]
 8001ed2:	e16b      	b.n	80021ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	f040 815a 	bne.w	80021a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d005      	beq.n	8001f0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d130      	bne.n	8001f6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	2203      	movs	r2, #3
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f40:	2201      	movs	r2, #1
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	091b      	lsrs	r3, r3, #4
 8001f56:	f003 0201 	and.w	r2, r3, #1
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	d017      	beq.n	8001fa8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	2203      	movs	r2, #3
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d123      	bne.n	8001ffc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	08da      	lsrs	r2, r3, #3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3208      	adds	r2, #8
 8001fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	220f      	movs	r2, #15
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	691a      	ldr	r2, [r3, #16]
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	08da      	lsrs	r2, r3, #3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	3208      	adds	r2, #8
 8001ff6:	69b9      	ldr	r1, [r7, #24]
 8001ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	2203      	movs	r2, #3
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 0203 	and.w	r2, r3, #3
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4313      	orrs	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 80b4 	beq.w	80021a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	4b60      	ldr	r3, [pc, #384]	; (80021c4 <HAL_GPIO_Init+0x30c>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002046:	4a5f      	ldr	r2, [pc, #380]	; (80021c4 <HAL_GPIO_Init+0x30c>)
 8002048:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800204c:	6453      	str	r3, [r2, #68]	; 0x44
 800204e:	4b5d      	ldr	r3, [pc, #372]	; (80021c4 <HAL_GPIO_Init+0x30c>)
 8002050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800205a:	4a5b      	ldr	r2, [pc, #364]	; (80021c8 <HAL_GPIO_Init+0x310>)
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	089b      	lsrs	r3, r3, #2
 8002060:	3302      	adds	r3, #2
 8002062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002066:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	220f      	movs	r2, #15
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4013      	ands	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a52      	ldr	r2, [pc, #328]	; (80021cc <HAL_GPIO_Init+0x314>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d02b      	beq.n	80020de <HAL_GPIO_Init+0x226>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a51      	ldr	r2, [pc, #324]	; (80021d0 <HAL_GPIO_Init+0x318>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d025      	beq.n	80020da <HAL_GPIO_Init+0x222>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a50      	ldr	r2, [pc, #320]	; (80021d4 <HAL_GPIO_Init+0x31c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d01f      	beq.n	80020d6 <HAL_GPIO_Init+0x21e>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a4f      	ldr	r2, [pc, #316]	; (80021d8 <HAL_GPIO_Init+0x320>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d019      	beq.n	80020d2 <HAL_GPIO_Init+0x21a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a4e      	ldr	r2, [pc, #312]	; (80021dc <HAL_GPIO_Init+0x324>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d013      	beq.n	80020ce <HAL_GPIO_Init+0x216>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a4d      	ldr	r2, [pc, #308]	; (80021e0 <HAL_GPIO_Init+0x328>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d00d      	beq.n	80020ca <HAL_GPIO_Init+0x212>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a4c      	ldr	r2, [pc, #304]	; (80021e4 <HAL_GPIO_Init+0x32c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d007      	beq.n	80020c6 <HAL_GPIO_Init+0x20e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a4b      	ldr	r2, [pc, #300]	; (80021e8 <HAL_GPIO_Init+0x330>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d101      	bne.n	80020c2 <HAL_GPIO_Init+0x20a>
 80020be:	2307      	movs	r3, #7
 80020c0:	e00e      	b.n	80020e0 <HAL_GPIO_Init+0x228>
 80020c2:	2308      	movs	r3, #8
 80020c4:	e00c      	b.n	80020e0 <HAL_GPIO_Init+0x228>
 80020c6:	2306      	movs	r3, #6
 80020c8:	e00a      	b.n	80020e0 <HAL_GPIO_Init+0x228>
 80020ca:	2305      	movs	r3, #5
 80020cc:	e008      	b.n	80020e0 <HAL_GPIO_Init+0x228>
 80020ce:	2304      	movs	r3, #4
 80020d0:	e006      	b.n	80020e0 <HAL_GPIO_Init+0x228>
 80020d2:	2303      	movs	r3, #3
 80020d4:	e004      	b.n	80020e0 <HAL_GPIO_Init+0x228>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e002      	b.n	80020e0 <HAL_GPIO_Init+0x228>
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <HAL_GPIO_Init+0x228>
 80020de:	2300      	movs	r3, #0
 80020e0:	69fa      	ldr	r2, [r7, #28]
 80020e2:	f002 0203 	and.w	r2, r2, #3
 80020e6:	0092      	lsls	r2, r2, #2
 80020e8:	4093      	lsls	r3, r2
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020f0:	4935      	ldr	r1, [pc, #212]	; (80021c8 <HAL_GPIO_Init+0x310>)
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	089b      	lsrs	r3, r3, #2
 80020f6:	3302      	adds	r3, #2
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020fe:	4b3b      	ldr	r3, [pc, #236]	; (80021ec <HAL_GPIO_Init+0x334>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002122:	4a32      	ldr	r2, [pc, #200]	; (80021ec <HAL_GPIO_Init+0x334>)
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002128:	4b30      	ldr	r3, [pc, #192]	; (80021ec <HAL_GPIO_Init+0x334>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800214c:	4a27      	ldr	r2, [pc, #156]	; (80021ec <HAL_GPIO_Init+0x334>)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002152:	4b26      	ldr	r3, [pc, #152]	; (80021ec <HAL_GPIO_Init+0x334>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002176:	4a1d      	ldr	r2, [pc, #116]	; (80021ec <HAL_GPIO_Init+0x334>)
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800217c:	4b1b      	ldr	r3, [pc, #108]	; (80021ec <HAL_GPIO_Init+0x334>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021a0:	4a12      	ldr	r2, [pc, #72]	; (80021ec <HAL_GPIO_Init+0x334>)
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3301      	adds	r3, #1
 80021aa:	61fb      	str	r3, [r7, #28]
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	2b0f      	cmp	r3, #15
 80021b0:	f67f ae90 	bls.w	8001ed4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021b4:	bf00      	nop
 80021b6:	bf00      	nop
 80021b8:	3724      	adds	r7, #36	; 0x24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40013800 	.word	0x40013800
 80021cc:	40020000 	.word	0x40020000
 80021d0:	40020400 	.word	0x40020400
 80021d4:	40020800 	.word	0x40020800
 80021d8:	40020c00 	.word	0x40020c00
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40021400 	.word	0x40021400
 80021e4:	40021800 	.word	0x40021800
 80021e8:	40021c00 	.word	0x40021c00
 80021ec:	40013c00 	.word	0x40013c00

080021f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e267      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d075      	beq.n	80022fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800220e:	4b88      	ldr	r3, [pc, #544]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 030c 	and.w	r3, r3, #12
 8002216:	2b04      	cmp	r3, #4
 8002218:	d00c      	beq.n	8002234 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800221a:	4b85      	ldr	r3, [pc, #532]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002222:	2b08      	cmp	r3, #8
 8002224:	d112      	bne.n	800224c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002226:	4b82      	ldr	r3, [pc, #520]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800222e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002232:	d10b      	bne.n	800224c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002234:	4b7e      	ldr	r3, [pc, #504]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d05b      	beq.n	80022f8 <HAL_RCC_OscConfig+0x108>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d157      	bne.n	80022f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e242      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002254:	d106      	bne.n	8002264 <HAL_RCC_OscConfig+0x74>
 8002256:	4b76      	ldr	r3, [pc, #472]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a75      	ldr	r2, [pc, #468]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 800225c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	e01d      	b.n	80022a0 <HAL_RCC_OscConfig+0xb0>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800226c:	d10c      	bne.n	8002288 <HAL_RCC_OscConfig+0x98>
 800226e:	4b70      	ldr	r3, [pc, #448]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a6f      	ldr	r2, [pc, #444]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	4b6d      	ldr	r3, [pc, #436]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a6c      	ldr	r2, [pc, #432]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	e00b      	b.n	80022a0 <HAL_RCC_OscConfig+0xb0>
 8002288:	4b69      	ldr	r3, [pc, #420]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a68      	ldr	r2, [pc, #416]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 800228e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	4b66      	ldr	r3, [pc, #408]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a65      	ldr	r2, [pc, #404]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 800229a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800229e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d013      	beq.n	80022d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a8:	f7ff fc32 	bl	8001b10 <HAL_GetTick>
 80022ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022b0:	f7ff fc2e 	bl	8001b10 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b64      	cmp	r3, #100	; 0x64
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e207      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c2:	4b5b      	ldr	r3, [pc, #364]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0xc0>
 80022ce:	e014      	b.n	80022fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d0:	f7ff fc1e 	bl	8001b10 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022d8:	f7ff fc1a 	bl	8001b10 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b64      	cmp	r3, #100	; 0x64
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e1f3      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ea:	4b51      	ldr	r3, [pc, #324]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0xe8>
 80022f6:	e000      	b.n	80022fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d063      	beq.n	80023ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002306:	4b4a      	ldr	r3, [pc, #296]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00b      	beq.n	800232a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002312:	4b47      	ldr	r3, [pc, #284]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800231a:	2b08      	cmp	r3, #8
 800231c:	d11c      	bne.n	8002358 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800231e:	4b44      	ldr	r3, [pc, #272]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d116      	bne.n	8002358 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800232a:	4b41      	ldr	r3, [pc, #260]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d005      	beq.n	8002342 <HAL_RCC_OscConfig+0x152>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d001      	beq.n	8002342 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e1c7      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002342:	4b3b      	ldr	r3, [pc, #236]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4937      	ldr	r1, [pc, #220]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002352:	4313      	orrs	r3, r2
 8002354:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002356:	e03a      	b.n	80023ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d020      	beq.n	80023a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002360:	4b34      	ldr	r3, [pc, #208]	; (8002434 <HAL_RCC_OscConfig+0x244>)
 8002362:	2201      	movs	r2, #1
 8002364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002366:	f7ff fbd3 	bl	8001b10 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800236e:	f7ff fbcf 	bl	8001b10 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e1a8      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002380:	4b2b      	ldr	r3, [pc, #172]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0f0      	beq.n	800236e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238c:	4b28      	ldr	r3, [pc, #160]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	4925      	ldr	r1, [pc, #148]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 800239c:	4313      	orrs	r3, r2
 800239e:	600b      	str	r3, [r1, #0]
 80023a0:	e015      	b.n	80023ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023a2:	4b24      	ldr	r3, [pc, #144]	; (8002434 <HAL_RCC_OscConfig+0x244>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a8:	f7ff fbb2 	bl	8001b10 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023b0:	f7ff fbae 	bl	8001b10 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e187      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023c2:	4b1b      	ldr	r3, [pc, #108]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f0      	bne.n	80023b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d036      	beq.n	8002448 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d016      	beq.n	8002410 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023e2:	4b15      	ldr	r3, [pc, #84]	; (8002438 <HAL_RCC_OscConfig+0x248>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e8:	f7ff fb92 	bl	8001b10 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023f0:	f7ff fb8e 	bl	8001b10 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e167      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002402:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_RCC_OscConfig+0x240>)
 8002404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0f0      	beq.n	80023f0 <HAL_RCC_OscConfig+0x200>
 800240e:	e01b      	b.n	8002448 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002410:	4b09      	ldr	r3, [pc, #36]	; (8002438 <HAL_RCC_OscConfig+0x248>)
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002416:	f7ff fb7b 	bl	8001b10 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800241c:	e00e      	b.n	800243c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800241e:	f7ff fb77 	bl	8001b10 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d907      	bls.n	800243c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e150      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
 8002430:	40023800 	.word	0x40023800
 8002434:	42470000 	.word	0x42470000
 8002438:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800243c:	4b88      	ldr	r3, [pc, #544]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 800243e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1ea      	bne.n	800241e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 8097 	beq.w	8002584 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002456:	2300      	movs	r3, #0
 8002458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800245a:	4b81      	ldr	r3, [pc, #516]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10f      	bne.n	8002486 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	4b7d      	ldr	r3, [pc, #500]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	4a7c      	ldr	r2, [pc, #496]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 8002470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002474:	6413      	str	r3, [r2, #64]	; 0x40
 8002476:	4b7a      	ldr	r3, [pc, #488]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002482:	2301      	movs	r3, #1
 8002484:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002486:	4b77      	ldr	r3, [pc, #476]	; (8002664 <HAL_RCC_OscConfig+0x474>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248e:	2b00      	cmp	r3, #0
 8002490:	d118      	bne.n	80024c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002492:	4b74      	ldr	r3, [pc, #464]	; (8002664 <HAL_RCC_OscConfig+0x474>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a73      	ldr	r2, [pc, #460]	; (8002664 <HAL_RCC_OscConfig+0x474>)
 8002498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800249c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800249e:	f7ff fb37 	bl	8001b10 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a6:	f7ff fb33 	bl	8001b10 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e10c      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b8:	4b6a      	ldr	r3, [pc, #424]	; (8002664 <HAL_RCC_OscConfig+0x474>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d106      	bne.n	80024da <HAL_RCC_OscConfig+0x2ea>
 80024cc:	4b64      	ldr	r3, [pc, #400]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 80024ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d0:	4a63      	ldr	r2, [pc, #396]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	6713      	str	r3, [r2, #112]	; 0x70
 80024d8:	e01c      	b.n	8002514 <HAL_RCC_OscConfig+0x324>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2b05      	cmp	r3, #5
 80024e0:	d10c      	bne.n	80024fc <HAL_RCC_OscConfig+0x30c>
 80024e2:	4b5f      	ldr	r3, [pc, #380]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 80024e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e6:	4a5e      	ldr	r2, [pc, #376]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 80024e8:	f043 0304 	orr.w	r3, r3, #4
 80024ec:	6713      	str	r3, [r2, #112]	; 0x70
 80024ee:	4b5c      	ldr	r3, [pc, #368]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 80024f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f2:	4a5b      	ldr	r2, [pc, #364]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	6713      	str	r3, [r2, #112]	; 0x70
 80024fa:	e00b      	b.n	8002514 <HAL_RCC_OscConfig+0x324>
 80024fc:	4b58      	ldr	r3, [pc, #352]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 80024fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002500:	4a57      	ldr	r2, [pc, #348]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 8002502:	f023 0301 	bic.w	r3, r3, #1
 8002506:	6713      	str	r3, [r2, #112]	; 0x70
 8002508:	4b55      	ldr	r3, [pc, #340]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 800250a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250c:	4a54      	ldr	r2, [pc, #336]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 800250e:	f023 0304 	bic.w	r3, r3, #4
 8002512:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d015      	beq.n	8002548 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251c:	f7ff faf8 	bl	8001b10 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002522:	e00a      	b.n	800253a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002524:	f7ff faf4 	bl	8001b10 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002532:	4293      	cmp	r3, r2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e0cb      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800253a:	4b49      	ldr	r3, [pc, #292]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 800253c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0ee      	beq.n	8002524 <HAL_RCC_OscConfig+0x334>
 8002546:	e014      	b.n	8002572 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002548:	f7ff fae2 	bl	8001b10 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800254e:	e00a      	b.n	8002566 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002550:	f7ff fade 	bl	8001b10 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	f241 3288 	movw	r2, #5000	; 0x1388
 800255e:	4293      	cmp	r3, r2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e0b5      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002566:	4b3e      	ldr	r3, [pc, #248]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1ee      	bne.n	8002550 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002572:	7dfb      	ldrb	r3, [r7, #23]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d105      	bne.n	8002584 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002578:	4b39      	ldr	r3, [pc, #228]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	4a38      	ldr	r2, [pc, #224]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 800257e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002582:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 80a1 	beq.w	80026d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800258e:	4b34      	ldr	r3, [pc, #208]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 030c 	and.w	r3, r3, #12
 8002596:	2b08      	cmp	r3, #8
 8002598:	d05c      	beq.n	8002654 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d141      	bne.n	8002626 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a2:	4b31      	ldr	r3, [pc, #196]	; (8002668 <HAL_RCC_OscConfig+0x478>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a8:	f7ff fab2 	bl	8001b10 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b0:	f7ff faae 	bl	8001b10 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e087      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c2:	4b27      	ldr	r3, [pc, #156]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69da      	ldr	r2, [r3, #28]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	019b      	lsls	r3, r3, #6
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e4:	085b      	lsrs	r3, r3, #1
 80025e6:	3b01      	subs	r3, #1
 80025e8:	041b      	lsls	r3, r3, #16
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	061b      	lsls	r3, r3, #24
 80025f2:	491b      	ldr	r1, [pc, #108]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025f8:	4b1b      	ldr	r3, [pc, #108]	; (8002668 <HAL_RCC_OscConfig+0x478>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fe:	f7ff fa87 	bl	8001b10 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002606:	f7ff fa83 	bl	8001b10 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e05c      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002618:	4b11      	ldr	r3, [pc, #68]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0f0      	beq.n	8002606 <HAL_RCC_OscConfig+0x416>
 8002624:	e054      	b.n	80026d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002626:	4b10      	ldr	r3, [pc, #64]	; (8002668 <HAL_RCC_OscConfig+0x478>)
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262c:	f7ff fa70 	bl	8001b10 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002634:	f7ff fa6c 	bl	8001b10 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e045      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_RCC_OscConfig+0x470>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0x444>
 8002652:	e03d      	b.n	80026d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d107      	bne.n	800266c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e038      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
 8002660:	40023800 	.word	0x40023800
 8002664:	40007000 	.word	0x40007000
 8002668:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800266c:	4b1b      	ldr	r3, [pc, #108]	; (80026dc <HAL_RCC_OscConfig+0x4ec>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d028      	beq.n	80026cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002684:	429a      	cmp	r2, r3
 8002686:	d121      	bne.n	80026cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002692:	429a      	cmp	r2, r3
 8002694:	d11a      	bne.n	80026cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800269c:	4013      	ands	r3, r2
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d111      	bne.n	80026cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b2:	085b      	lsrs	r3, r3, #1
 80026b4:	3b01      	subs	r3, #1
 80026b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d107      	bne.n	80026cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d001      	beq.n	80026d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e000      	b.n	80026d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3718      	adds	r7, #24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40023800 	.word	0x40023800

080026e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0cc      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026f4:	4b68      	ldr	r3, [pc, #416]	; (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d90c      	bls.n	800271c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002702:	4b65      	ldr	r3, [pc, #404]	; (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800270a:	4b63      	ldr	r3, [pc, #396]	; (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d001      	beq.n	800271c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0b8      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d020      	beq.n	800276a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002734:	4b59      	ldr	r3, [pc, #356]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	4a58      	ldr	r2, [pc, #352]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 800273a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800273e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0308 	and.w	r3, r3, #8
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800274c:	4b53      	ldr	r3, [pc, #332]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	4a52      	ldr	r2, [pc, #328]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002756:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002758:	4b50      	ldr	r3, [pc, #320]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	494d      	ldr	r1, [pc, #308]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	4313      	orrs	r3, r2
 8002768:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d044      	beq.n	8002800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d107      	bne.n	800278e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277e:	4b47      	ldr	r3, [pc, #284]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d119      	bne.n	80027be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e07f      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b02      	cmp	r3, #2
 8002794:	d003      	beq.n	800279e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800279a:	2b03      	cmp	r3, #3
 800279c:	d107      	bne.n	80027ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279e:	4b3f      	ldr	r3, [pc, #252]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d109      	bne.n	80027be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e06f      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ae:	4b3b      	ldr	r3, [pc, #236]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e067      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027be:	4b37      	ldr	r3, [pc, #220]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f023 0203 	bic.w	r2, r3, #3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	4934      	ldr	r1, [pc, #208]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027d0:	f7ff f99e 	bl	8001b10 <HAL_GetTick>
 80027d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d6:	e00a      	b.n	80027ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d8:	f7ff f99a 	bl	8001b10 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e04f      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ee:	4b2b      	ldr	r3, [pc, #172]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 020c 	and.w	r2, r3, #12
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d1eb      	bne.n	80027d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002800:	4b25      	ldr	r3, [pc, #148]	; (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d20c      	bcs.n	8002828 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280e:	4b22      	ldr	r3, [pc, #136]	; (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002816:	4b20      	ldr	r3, [pc, #128]	; (8002898 <HAL_RCC_ClockConfig+0x1b8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e032      	b.n	800288e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	d008      	beq.n	8002846 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002834:	4b19      	ldr	r3, [pc, #100]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	4916      	ldr	r1, [pc, #88]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	4313      	orrs	r3, r2
 8002844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	d009      	beq.n	8002866 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002852:	4b12      	ldr	r3, [pc, #72]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	490e      	ldr	r1, [pc, #56]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	4313      	orrs	r3, r2
 8002864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002866:	f000 f821 	bl	80028ac <HAL_RCC_GetSysClockFreq>
 800286a:	4602      	mov	r2, r0
 800286c:	4b0b      	ldr	r3, [pc, #44]	; (800289c <HAL_RCC_ClockConfig+0x1bc>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	091b      	lsrs	r3, r3, #4
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	490a      	ldr	r1, [pc, #40]	; (80028a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002878:	5ccb      	ldrb	r3, [r1, r3]
 800287a:	fa22 f303 	lsr.w	r3, r2, r3
 800287e:	4a09      	ldr	r2, [pc, #36]	; (80028a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002882:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff f8fe 	bl	8001a88 <HAL_InitTick>

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40023c00 	.word	0x40023c00
 800289c:	40023800 	.word	0x40023800
 80028a0:	08005cd0 	.word	0x08005cd0
 80028a4:	20000010 	.word	0x20000010
 80028a8:	20000014 	.word	0x20000014

080028ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028b0:	b094      	sub	sp, #80	; 0x50
 80028b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	647b      	str	r3, [r7, #68]	; 0x44
 80028b8:	2300      	movs	r3, #0
 80028ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028bc:	2300      	movs	r3, #0
 80028be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028c4:	4b79      	ldr	r3, [pc, #484]	; (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 030c 	and.w	r3, r3, #12
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d00d      	beq.n	80028ec <HAL_RCC_GetSysClockFreq+0x40>
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	f200 80e1 	bhi.w	8002a98 <HAL_RCC_GetSysClockFreq+0x1ec>
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <HAL_RCC_GetSysClockFreq+0x34>
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d003      	beq.n	80028e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80028de:	e0db      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028e0:	4b73      	ldr	r3, [pc, #460]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x204>)
 80028e2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80028e4:	e0db      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028e6:	4b73      	ldr	r3, [pc, #460]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x208>)
 80028e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028ea:	e0d8      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028ec:	4b6f      	ldr	r3, [pc, #444]	; (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028f4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028f6:	4b6d      	ldr	r3, [pc, #436]	; (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d063      	beq.n	80029ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002902:	4b6a      	ldr	r3, [pc, #424]	; (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	099b      	lsrs	r3, r3, #6
 8002908:	2200      	movs	r2, #0
 800290a:	63bb      	str	r3, [r7, #56]	; 0x38
 800290c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800290e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002914:	633b      	str	r3, [r7, #48]	; 0x30
 8002916:	2300      	movs	r3, #0
 8002918:	637b      	str	r3, [r7, #52]	; 0x34
 800291a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800291e:	4622      	mov	r2, r4
 8002920:	462b      	mov	r3, r5
 8002922:	f04f 0000 	mov.w	r0, #0
 8002926:	f04f 0100 	mov.w	r1, #0
 800292a:	0159      	lsls	r1, r3, #5
 800292c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002930:	0150      	lsls	r0, r2, #5
 8002932:	4602      	mov	r2, r0
 8002934:	460b      	mov	r3, r1
 8002936:	4621      	mov	r1, r4
 8002938:	1a51      	subs	r1, r2, r1
 800293a:	6139      	str	r1, [r7, #16]
 800293c:	4629      	mov	r1, r5
 800293e:	eb63 0301 	sbc.w	r3, r3, r1
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	f04f 0300 	mov.w	r3, #0
 800294c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002950:	4659      	mov	r1, fp
 8002952:	018b      	lsls	r3, r1, #6
 8002954:	4651      	mov	r1, sl
 8002956:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800295a:	4651      	mov	r1, sl
 800295c:	018a      	lsls	r2, r1, #6
 800295e:	4651      	mov	r1, sl
 8002960:	ebb2 0801 	subs.w	r8, r2, r1
 8002964:	4659      	mov	r1, fp
 8002966:	eb63 0901 	sbc.w	r9, r3, r1
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002976:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800297a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800297e:	4690      	mov	r8, r2
 8002980:	4699      	mov	r9, r3
 8002982:	4623      	mov	r3, r4
 8002984:	eb18 0303 	adds.w	r3, r8, r3
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	462b      	mov	r3, r5
 800298c:	eb49 0303 	adc.w	r3, r9, r3
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800299e:	4629      	mov	r1, r5
 80029a0:	024b      	lsls	r3, r1, #9
 80029a2:	4621      	mov	r1, r4
 80029a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029a8:	4621      	mov	r1, r4
 80029aa:	024a      	lsls	r2, r1, #9
 80029ac:	4610      	mov	r0, r2
 80029ae:	4619      	mov	r1, r3
 80029b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029b2:	2200      	movs	r2, #0
 80029b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80029b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029bc:	f7fd fc58 	bl	8000270 <__aeabi_uldivmod>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4613      	mov	r3, r2
 80029c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029c8:	e058      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ca:	4b38      	ldr	r3, [pc, #224]	; (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	099b      	lsrs	r3, r3, #6
 80029d0:	2200      	movs	r2, #0
 80029d2:	4618      	mov	r0, r3
 80029d4:	4611      	mov	r1, r2
 80029d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029da:	623b      	str	r3, [r7, #32]
 80029dc:	2300      	movs	r3, #0
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
 80029e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029e4:	4642      	mov	r2, r8
 80029e6:	464b      	mov	r3, r9
 80029e8:	f04f 0000 	mov.w	r0, #0
 80029ec:	f04f 0100 	mov.w	r1, #0
 80029f0:	0159      	lsls	r1, r3, #5
 80029f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029f6:	0150      	lsls	r0, r2, #5
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4641      	mov	r1, r8
 80029fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a02:	4649      	mov	r1, r9
 8002a04:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	f04f 0300 	mov.w	r3, #0
 8002a10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a1c:	ebb2 040a 	subs.w	r4, r2, sl
 8002a20:	eb63 050b 	sbc.w	r5, r3, fp
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	f04f 0300 	mov.w	r3, #0
 8002a2c:	00eb      	lsls	r3, r5, #3
 8002a2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a32:	00e2      	lsls	r2, r4, #3
 8002a34:	4614      	mov	r4, r2
 8002a36:	461d      	mov	r5, r3
 8002a38:	4643      	mov	r3, r8
 8002a3a:	18e3      	adds	r3, r4, r3
 8002a3c:	603b      	str	r3, [r7, #0]
 8002a3e:	464b      	mov	r3, r9
 8002a40:	eb45 0303 	adc.w	r3, r5, r3
 8002a44:	607b      	str	r3, [r7, #4]
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a52:	4629      	mov	r1, r5
 8002a54:	028b      	lsls	r3, r1, #10
 8002a56:	4621      	mov	r1, r4
 8002a58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a5c:	4621      	mov	r1, r4
 8002a5e:	028a      	lsls	r2, r1, #10
 8002a60:	4610      	mov	r0, r2
 8002a62:	4619      	mov	r1, r3
 8002a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a66:	2200      	movs	r2, #0
 8002a68:	61bb      	str	r3, [r7, #24]
 8002a6a:	61fa      	str	r2, [r7, #28]
 8002a6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a70:	f7fd fbfe 	bl	8000270 <__aeabi_uldivmod>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4613      	mov	r3, r2
 8002a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	0c1b      	lsrs	r3, r3, #16
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	3301      	adds	r3, #1
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002a8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a96:	e002      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a98:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a9a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3750      	adds	r7, #80	; 0x50
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aaa:	bf00      	nop
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	00f42400 	.word	0x00f42400
 8002ab4:	007a1200 	.word	0x007a1200

08002ab8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002abc:	4b03      	ldr	r3, [pc, #12]	; (8002acc <HAL_RCC_GetHCLKFreq+0x14>)
 8002abe:	681b      	ldr	r3, [r3, #0]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	20000010 	.word	0x20000010

08002ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ad4:	f7ff fff0 	bl	8002ab8 <HAL_RCC_GetHCLKFreq>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	0a9b      	lsrs	r3, r3, #10
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	4903      	ldr	r1, [pc, #12]	; (8002af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ae6:	5ccb      	ldrb	r3, [r1, r3]
 8002ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40023800 	.word	0x40023800
 8002af4:	08005ce0 	.word	0x08005ce0

08002af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002afc:	f7ff ffdc 	bl	8002ab8 <HAL_RCC_GetHCLKFreq>
 8002b00:	4602      	mov	r2, r0
 8002b02:	4b05      	ldr	r3, [pc, #20]	; (8002b18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	0b5b      	lsrs	r3, r3, #13
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	4903      	ldr	r1, [pc, #12]	; (8002b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b0e:	5ccb      	ldrb	r3, [r1, r3]
 8002b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	08005ce0 	.word	0x08005ce0

08002b20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e041      	b.n	8002bb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d106      	bne.n	8002b4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7fe fd8e 	bl	8001668 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3304      	adds	r3, #4
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4610      	mov	r0, r2
 8002b60:	f000 fe00 	bl	8003764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e041      	b.n	8002c54 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d106      	bne.n	8002bea <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f839 	bl	8002c5c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2202      	movs	r2, #2
 8002bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	f000 fdb1 	bl	8003764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d109      	bne.n	8002c94 <HAL_TIM_OC_Start+0x24>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	bf14      	ite	ne
 8002c8c:	2301      	movne	r3, #1
 8002c8e:	2300      	moveq	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	e022      	b.n	8002cda <HAL_TIM_OC_Start+0x6a>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d109      	bne.n	8002cae <HAL_TIM_OC_Start+0x3e>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	bf14      	ite	ne
 8002ca6:	2301      	movne	r3, #1
 8002ca8:	2300      	moveq	r3, #0
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	e015      	b.n	8002cda <HAL_TIM_OC_Start+0x6a>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d109      	bne.n	8002cc8 <HAL_TIM_OC_Start+0x58>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	bf14      	ite	ne
 8002cc0:	2301      	movne	r3, #1
 8002cc2:	2300      	moveq	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	e008      	b.n	8002cda <HAL_TIM_OC_Start+0x6a>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	bf14      	ite	ne
 8002cd4:	2301      	movne	r3, #1
 8002cd6:	2300      	moveq	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e07c      	b.n	8002ddc <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d104      	bne.n	8002cf2 <HAL_TIM_OC_Start+0x82>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2202      	movs	r2, #2
 8002cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cf0:	e013      	b.n	8002d1a <HAL_TIM_OC_Start+0xaa>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d104      	bne.n	8002d02 <HAL_TIM_OC_Start+0x92>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d00:	e00b      	b.n	8002d1a <HAL_TIM_OC_Start+0xaa>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d104      	bne.n	8002d12 <HAL_TIM_OC_Start+0xa2>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d10:	e003      	b.n	8002d1a <HAL_TIM_OC_Start+0xaa>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2202      	movs	r2, #2
 8002d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	6839      	ldr	r1, [r7, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f001 f808 	bl	8003d38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a2d      	ldr	r2, [pc, #180]	; (8002de4 <HAL_TIM_OC_Start+0x174>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d004      	beq.n	8002d3c <HAL_TIM_OC_Start+0xcc>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a2c      	ldr	r2, [pc, #176]	; (8002de8 <HAL_TIM_OC_Start+0x178>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d101      	bne.n	8002d40 <HAL_TIM_OC_Start+0xd0>
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e000      	b.n	8002d42 <HAL_TIM_OC_Start+0xd2>
 8002d40:	2300      	movs	r3, #0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d007      	beq.n	8002d56 <HAL_TIM_OC_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a22      	ldr	r2, [pc, #136]	; (8002de4 <HAL_TIM_OC_Start+0x174>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d022      	beq.n	8002da6 <HAL_TIM_OC_Start+0x136>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d68:	d01d      	beq.n	8002da6 <HAL_TIM_OC_Start+0x136>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a1f      	ldr	r2, [pc, #124]	; (8002dec <HAL_TIM_OC_Start+0x17c>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d018      	beq.n	8002da6 <HAL_TIM_OC_Start+0x136>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a1d      	ldr	r2, [pc, #116]	; (8002df0 <HAL_TIM_OC_Start+0x180>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d013      	beq.n	8002da6 <HAL_TIM_OC_Start+0x136>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a1c      	ldr	r2, [pc, #112]	; (8002df4 <HAL_TIM_OC_Start+0x184>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d00e      	beq.n	8002da6 <HAL_TIM_OC_Start+0x136>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a16      	ldr	r2, [pc, #88]	; (8002de8 <HAL_TIM_OC_Start+0x178>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d009      	beq.n	8002da6 <HAL_TIM_OC_Start+0x136>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a18      	ldr	r2, [pc, #96]	; (8002df8 <HAL_TIM_OC_Start+0x188>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d004      	beq.n	8002da6 <HAL_TIM_OC_Start+0x136>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a16      	ldr	r2, [pc, #88]	; (8002dfc <HAL_TIM_OC_Start+0x18c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d111      	bne.n	8002dca <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2b06      	cmp	r3, #6
 8002db6:	d010      	beq.n	8002dda <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0201 	orr.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc8:	e007      	b.n	8002dda <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f042 0201 	orr.w	r2, r2, #1
 8002dd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40010000 	.word	0x40010000
 8002de8:	40010400 	.word	0x40010400
 8002dec:	40000400 	.word	0x40000400
 8002df0:	40000800 	.word	0x40000800
 8002df4:	40000c00 	.word	0x40000c00
 8002df8:	40014000 	.word	0x40014000
 8002dfc:	40001800 	.word	0x40001800

08002e00 <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	6839      	ldr	r1, [r7, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 ff90 	bl	8003d38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a2e      	ldr	r2, [pc, #184]	; (8002ed8 <HAL_TIM_OC_Stop+0xd8>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d004      	beq.n	8002e2c <HAL_TIM_OC_Stop+0x2c>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a2d      	ldr	r2, [pc, #180]	; (8002edc <HAL_TIM_OC_Stop+0xdc>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d101      	bne.n	8002e30 <HAL_TIM_OC_Stop+0x30>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e000      	b.n	8002e32 <HAL_TIM_OC_Stop+0x32>
 8002e30:	2300      	movs	r3, #0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d017      	beq.n	8002e66 <HAL_TIM_OC_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6a1a      	ldr	r2, [r3, #32]
 8002e3c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002e40:	4013      	ands	r3, r2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10f      	bne.n	8002e66 <HAL_TIM_OC_Stop+0x66>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6a1a      	ldr	r2, [r3, #32]
 8002e4c:	f240 4344 	movw	r3, #1092	; 0x444
 8002e50:	4013      	ands	r3, r2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d107      	bne.n	8002e66 <HAL_TIM_OC_Stop+0x66>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6a1a      	ldr	r2, [r3, #32]
 8002e6c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002e70:	4013      	ands	r3, r2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10f      	bne.n	8002e96 <HAL_TIM_OC_Stop+0x96>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6a1a      	ldr	r2, [r3, #32]
 8002e7c:	f240 4344 	movw	r3, #1092	; 0x444
 8002e80:	4013      	ands	r3, r2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d107      	bne.n	8002e96 <HAL_TIM_OC_Stop+0x96>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0201 	bic.w	r2, r2, #1
 8002e94:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d104      	bne.n	8002ea6 <HAL_TIM_OC_Stop+0xa6>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ea4:	e013      	b.n	8002ece <HAL_TIM_OC_Stop+0xce>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	d104      	bne.n	8002eb6 <HAL_TIM_OC_Stop+0xb6>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eb4:	e00b      	b.n	8002ece <HAL_TIM_OC_Stop+0xce>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d104      	bne.n	8002ec6 <HAL_TIM_OC_Stop+0xc6>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ec4:	e003      	b.n	8002ece <HAL_TIM_OC_Stop+0xce>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40010000 	.word	0x40010000
 8002edc:	40010400 	.word	0x40010400

08002ee0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e041      	b.n	8002f76 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d106      	bne.n	8002f0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f839 	bl	8002f7e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4610      	mov	r0, r2
 8002f20:	f000 fc20 	bl	8003764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
	...

08002f94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d109      	bne.n	8002fb8 <HAL_TIM_PWM_Start+0x24>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	bf14      	ite	ne
 8002fb0:	2301      	movne	r3, #1
 8002fb2:	2300      	moveq	r3, #0
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	e022      	b.n	8002ffe <HAL_TIM_PWM_Start+0x6a>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d109      	bne.n	8002fd2 <HAL_TIM_PWM_Start+0x3e>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	bf14      	ite	ne
 8002fca:	2301      	movne	r3, #1
 8002fcc:	2300      	moveq	r3, #0
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	e015      	b.n	8002ffe <HAL_TIM_PWM_Start+0x6a>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d109      	bne.n	8002fec <HAL_TIM_PWM_Start+0x58>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	bf14      	ite	ne
 8002fe4:	2301      	movne	r3, #1
 8002fe6:	2300      	moveq	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	e008      	b.n	8002ffe <HAL_TIM_PWM_Start+0x6a>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	bf14      	ite	ne
 8002ff8:	2301      	movne	r3, #1
 8002ffa:	2300      	moveq	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e07c      	b.n	8003100 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d104      	bne.n	8003016 <HAL_TIM_PWM_Start+0x82>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2202      	movs	r2, #2
 8003010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003014:	e013      	b.n	800303e <HAL_TIM_PWM_Start+0xaa>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b04      	cmp	r3, #4
 800301a:	d104      	bne.n	8003026 <HAL_TIM_PWM_Start+0x92>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2202      	movs	r2, #2
 8003020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003024:	e00b      	b.n	800303e <HAL_TIM_PWM_Start+0xaa>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2b08      	cmp	r3, #8
 800302a:	d104      	bne.n	8003036 <HAL_TIM_PWM_Start+0xa2>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003034:	e003      	b.n	800303e <HAL_TIM_PWM_Start+0xaa>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2202      	movs	r2, #2
 800303a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2201      	movs	r2, #1
 8003044:	6839      	ldr	r1, [r7, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f000 fe76 	bl	8003d38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a2d      	ldr	r2, [pc, #180]	; (8003108 <HAL_TIM_PWM_Start+0x174>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d004      	beq.n	8003060 <HAL_TIM_PWM_Start+0xcc>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a2c      	ldr	r2, [pc, #176]	; (800310c <HAL_TIM_PWM_Start+0x178>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d101      	bne.n	8003064 <HAL_TIM_PWM_Start+0xd0>
 8003060:	2301      	movs	r3, #1
 8003062:	e000      	b.n	8003066 <HAL_TIM_PWM_Start+0xd2>
 8003064:	2300      	movs	r3, #0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d007      	beq.n	800307a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003078:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a22      	ldr	r2, [pc, #136]	; (8003108 <HAL_TIM_PWM_Start+0x174>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d022      	beq.n	80030ca <HAL_TIM_PWM_Start+0x136>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800308c:	d01d      	beq.n	80030ca <HAL_TIM_PWM_Start+0x136>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a1f      	ldr	r2, [pc, #124]	; (8003110 <HAL_TIM_PWM_Start+0x17c>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d018      	beq.n	80030ca <HAL_TIM_PWM_Start+0x136>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a1d      	ldr	r2, [pc, #116]	; (8003114 <HAL_TIM_PWM_Start+0x180>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d013      	beq.n	80030ca <HAL_TIM_PWM_Start+0x136>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a1c      	ldr	r2, [pc, #112]	; (8003118 <HAL_TIM_PWM_Start+0x184>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d00e      	beq.n	80030ca <HAL_TIM_PWM_Start+0x136>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a16      	ldr	r2, [pc, #88]	; (800310c <HAL_TIM_PWM_Start+0x178>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d009      	beq.n	80030ca <HAL_TIM_PWM_Start+0x136>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a18      	ldr	r2, [pc, #96]	; (800311c <HAL_TIM_PWM_Start+0x188>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d004      	beq.n	80030ca <HAL_TIM_PWM_Start+0x136>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a16      	ldr	r2, [pc, #88]	; (8003120 <HAL_TIM_PWM_Start+0x18c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d111      	bne.n	80030ee <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2b06      	cmp	r3, #6
 80030da:	d010      	beq.n	80030fe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0201 	orr.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ec:	e007      	b.n	80030fe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f042 0201 	orr.w	r2, r2, #1
 80030fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40010000 	.word	0x40010000
 800310c:	40010400 	.word	0x40010400
 8003110:	40000400 	.word	0x40000400
 8003114:	40000800 	.word	0x40000800
 8003118:	40000c00 	.word	0x40000c00
 800311c:	40014000 	.word	0x40014000
 8003120:	40001800 	.word	0x40001800

08003124 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b02      	cmp	r3, #2
 8003138:	d122      	bne.n	8003180 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b02      	cmp	r3, #2
 8003146:	d11b      	bne.n	8003180 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f06f 0202 	mvn.w	r2, #2
 8003150:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	f003 0303 	and.w	r3, r3, #3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 fadd 	bl	8003726 <HAL_TIM_IC_CaptureCallback>
 800316c:	e005      	b.n	800317a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 facf 	bl	8003712 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 fae0 	bl	800373a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	2b04      	cmp	r3, #4
 800318c:	d122      	bne.n	80031d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b04      	cmp	r3, #4
 800319a:	d11b      	bne.n	80031d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f06f 0204 	mvn.w	r2, #4
 80031a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2202      	movs	r2, #2
 80031aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 fab3 	bl	8003726 <HAL_TIM_IC_CaptureCallback>
 80031c0:	e005      	b.n	80031ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 faa5 	bl	8003712 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 fab6 	bl	800373a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d122      	bne.n	8003228 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f003 0308 	and.w	r3, r3, #8
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d11b      	bne.n	8003228 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f06f 0208 	mvn.w	r2, #8
 80031f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2204      	movs	r2, #4
 80031fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fa89 	bl	8003726 <HAL_TIM_IC_CaptureCallback>
 8003214:	e005      	b.n	8003222 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 fa7b 	bl	8003712 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 fa8c 	bl	800373a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	f003 0310 	and.w	r3, r3, #16
 8003232:	2b10      	cmp	r3, #16
 8003234:	d122      	bne.n	800327c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f003 0310 	and.w	r3, r3, #16
 8003240:	2b10      	cmp	r3, #16
 8003242:	d11b      	bne.n	800327c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f06f 0210 	mvn.w	r2, #16
 800324c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2208      	movs	r2, #8
 8003252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fa5f 	bl	8003726 <HAL_TIM_IC_CaptureCallback>
 8003268:	e005      	b.n	8003276 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 fa51 	bl	8003712 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 fa62 	bl	800373a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b01      	cmp	r3, #1
 8003288:	d10e      	bne.n	80032a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	2b01      	cmp	r3, #1
 8003296:	d107      	bne.n	80032a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f06f 0201 	mvn.w	r2, #1
 80032a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 fa2b 	bl	80036fe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b2:	2b80      	cmp	r3, #128	; 0x80
 80032b4:	d10e      	bne.n	80032d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c0:	2b80      	cmp	r3, #128	; 0x80
 80032c2:	d107      	bne.n	80032d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7fd fca6 	bl	8000c20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032de:	2b40      	cmp	r3, #64	; 0x40
 80032e0:	d10e      	bne.n	8003300 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ec:	2b40      	cmp	r3, #64	; 0x40
 80032ee:	d107      	bne.n	8003300 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 fa27 	bl	800374e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	f003 0320 	and.w	r3, r3, #32
 800330a:	2b20      	cmp	r3, #32
 800330c:	d10e      	bne.n	800332c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f003 0320 	and.w	r3, r3, #32
 8003318:	2b20      	cmp	r3, #32
 800331a:	d107      	bne.n	800332c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f06f 0220 	mvn.w	r2, #32
 8003324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 ff12 	bl	8004150 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800332c:	bf00      	nop
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003340:	2300      	movs	r3, #0
 8003342:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800334a:	2b01      	cmp	r3, #1
 800334c:	d101      	bne.n	8003352 <HAL_TIM_OC_ConfigChannel+0x1e>
 800334e:	2302      	movs	r3, #2
 8003350:	e048      	b.n	80033e4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b0c      	cmp	r3, #12
 800335e:	d839      	bhi.n	80033d4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003360:	a201      	add	r2, pc, #4	; (adr r2, 8003368 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003366:	bf00      	nop
 8003368:	0800339d 	.word	0x0800339d
 800336c:	080033d5 	.word	0x080033d5
 8003370:	080033d5 	.word	0x080033d5
 8003374:	080033d5 	.word	0x080033d5
 8003378:	080033ab 	.word	0x080033ab
 800337c:	080033d5 	.word	0x080033d5
 8003380:	080033d5 	.word	0x080033d5
 8003384:	080033d5 	.word	0x080033d5
 8003388:	080033b9 	.word	0x080033b9
 800338c:	080033d5 	.word	0x080033d5
 8003390:	080033d5 	.word	0x080033d5
 8003394:	080033d5 	.word	0x080033d5
 8003398:	080033c7 	.word	0x080033c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68b9      	ldr	r1, [r7, #8]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 fa7e 	bl	80038a4 <TIM_OC1_SetConfig>
      break;
 80033a8:	e017      	b.n	80033da <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68b9      	ldr	r1, [r7, #8]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 fae7 	bl	8003984 <TIM_OC2_SetConfig>
      break;
 80033b6:	e010      	b.n	80033da <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fb56 	bl	8003a70 <TIM_OC3_SetConfig>
      break;
 80033c4:	e009      	b.n	80033da <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68b9      	ldr	r1, [r7, #8]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 fbc3 	bl	8003b58 <TIM_OC4_SetConfig>
      break;
 80033d2:	e002      	b.n	80033da <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	75fb      	strb	r3, [r7, #23]
      break;
 80033d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033f8:	2300      	movs	r3, #0
 80033fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003402:	2b01      	cmp	r3, #1
 8003404:	d101      	bne.n	800340a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003406:	2302      	movs	r3, #2
 8003408:	e0ae      	b.n	8003568 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b0c      	cmp	r3, #12
 8003416:	f200 809f 	bhi.w	8003558 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800341a:	a201      	add	r2, pc, #4	; (adr r2, 8003420 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800341c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003420:	08003455 	.word	0x08003455
 8003424:	08003559 	.word	0x08003559
 8003428:	08003559 	.word	0x08003559
 800342c:	08003559 	.word	0x08003559
 8003430:	08003495 	.word	0x08003495
 8003434:	08003559 	.word	0x08003559
 8003438:	08003559 	.word	0x08003559
 800343c:	08003559 	.word	0x08003559
 8003440:	080034d7 	.word	0x080034d7
 8003444:	08003559 	.word	0x08003559
 8003448:	08003559 	.word	0x08003559
 800344c:	08003559 	.word	0x08003559
 8003450:	08003517 	.word	0x08003517
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68b9      	ldr	r1, [r7, #8]
 800345a:	4618      	mov	r0, r3
 800345c:	f000 fa22 	bl	80038a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699a      	ldr	r2, [r3, #24]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0208 	orr.w	r2, r2, #8
 800346e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699a      	ldr	r2, [r3, #24]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 0204 	bic.w	r2, r2, #4
 800347e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6999      	ldr	r1, [r3, #24]
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	691a      	ldr	r2, [r3, #16]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	619a      	str	r2, [r3, #24]
      break;
 8003492:	e064      	b.n	800355e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68b9      	ldr	r1, [r7, #8]
 800349a:	4618      	mov	r0, r3
 800349c:	f000 fa72 	bl	8003984 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699a      	ldr	r2, [r3, #24]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699a      	ldr	r2, [r3, #24]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6999      	ldr	r1, [r3, #24]
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	021a      	lsls	r2, r3, #8
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	619a      	str	r2, [r3, #24]
      break;
 80034d4:	e043      	b.n	800355e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68b9      	ldr	r1, [r7, #8]
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 fac7 	bl	8003a70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	69da      	ldr	r2, [r3, #28]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f042 0208 	orr.w	r2, r2, #8
 80034f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	69da      	ldr	r2, [r3, #28]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0204 	bic.w	r2, r2, #4
 8003500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	69d9      	ldr	r1, [r3, #28]
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	61da      	str	r2, [r3, #28]
      break;
 8003514:	e023      	b.n	800355e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68b9      	ldr	r1, [r7, #8]
 800351c:	4618      	mov	r0, r3
 800351e:	f000 fb1b 	bl	8003b58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	69da      	ldr	r2, [r3, #28]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003530:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	69da      	ldr	r2, [r3, #28]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003540:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69d9      	ldr	r1, [r3, #28]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	021a      	lsls	r2, r3, #8
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	61da      	str	r2, [r3, #28]
      break;
 8003556:	e002      	b.n	800355e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	75fb      	strb	r3, [r7, #23]
      break;
 800355c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003566:	7dfb      	ldrb	r3, [r7, #23]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003584:	2b01      	cmp	r3, #1
 8003586:	d101      	bne.n	800358c <HAL_TIM_ConfigClockSource+0x1c>
 8003588:	2302      	movs	r3, #2
 800358a:	e0b4      	b.n	80036f6 <HAL_TIM_ConfigClockSource+0x186>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2202      	movs	r2, #2
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035c4:	d03e      	beq.n	8003644 <HAL_TIM_ConfigClockSource+0xd4>
 80035c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ca:	f200 8087 	bhi.w	80036dc <HAL_TIM_ConfigClockSource+0x16c>
 80035ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d2:	f000 8086 	beq.w	80036e2 <HAL_TIM_ConfigClockSource+0x172>
 80035d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035da:	d87f      	bhi.n	80036dc <HAL_TIM_ConfigClockSource+0x16c>
 80035dc:	2b70      	cmp	r3, #112	; 0x70
 80035de:	d01a      	beq.n	8003616 <HAL_TIM_ConfigClockSource+0xa6>
 80035e0:	2b70      	cmp	r3, #112	; 0x70
 80035e2:	d87b      	bhi.n	80036dc <HAL_TIM_ConfigClockSource+0x16c>
 80035e4:	2b60      	cmp	r3, #96	; 0x60
 80035e6:	d050      	beq.n	800368a <HAL_TIM_ConfigClockSource+0x11a>
 80035e8:	2b60      	cmp	r3, #96	; 0x60
 80035ea:	d877      	bhi.n	80036dc <HAL_TIM_ConfigClockSource+0x16c>
 80035ec:	2b50      	cmp	r3, #80	; 0x50
 80035ee:	d03c      	beq.n	800366a <HAL_TIM_ConfigClockSource+0xfa>
 80035f0:	2b50      	cmp	r3, #80	; 0x50
 80035f2:	d873      	bhi.n	80036dc <HAL_TIM_ConfigClockSource+0x16c>
 80035f4:	2b40      	cmp	r3, #64	; 0x40
 80035f6:	d058      	beq.n	80036aa <HAL_TIM_ConfigClockSource+0x13a>
 80035f8:	2b40      	cmp	r3, #64	; 0x40
 80035fa:	d86f      	bhi.n	80036dc <HAL_TIM_ConfigClockSource+0x16c>
 80035fc:	2b30      	cmp	r3, #48	; 0x30
 80035fe:	d064      	beq.n	80036ca <HAL_TIM_ConfigClockSource+0x15a>
 8003600:	2b30      	cmp	r3, #48	; 0x30
 8003602:	d86b      	bhi.n	80036dc <HAL_TIM_ConfigClockSource+0x16c>
 8003604:	2b20      	cmp	r3, #32
 8003606:	d060      	beq.n	80036ca <HAL_TIM_ConfigClockSource+0x15a>
 8003608:	2b20      	cmp	r3, #32
 800360a:	d867      	bhi.n	80036dc <HAL_TIM_ConfigClockSource+0x16c>
 800360c:	2b00      	cmp	r3, #0
 800360e:	d05c      	beq.n	80036ca <HAL_TIM_ConfigClockSource+0x15a>
 8003610:	2b10      	cmp	r3, #16
 8003612:	d05a      	beq.n	80036ca <HAL_TIM_ConfigClockSource+0x15a>
 8003614:	e062      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6818      	ldr	r0, [r3, #0]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	6899      	ldr	r1, [r3, #8]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	f000 fb67 	bl	8003cf8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003638:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	609a      	str	r2, [r3, #8]
      break;
 8003642:	e04f      	b.n	80036e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6818      	ldr	r0, [r3, #0]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	6899      	ldr	r1, [r3, #8]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f000 fb50 	bl	8003cf8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003666:	609a      	str	r2, [r3, #8]
      break;
 8003668:	e03c      	b.n	80036e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6818      	ldr	r0, [r3, #0]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	6859      	ldr	r1, [r3, #4]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	461a      	mov	r2, r3
 8003678:	f000 fac4 	bl	8003c04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2150      	movs	r1, #80	; 0x50
 8003682:	4618      	mov	r0, r3
 8003684:	f000 fb1d 	bl	8003cc2 <TIM_ITRx_SetConfig>
      break;
 8003688:	e02c      	b.n	80036e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6818      	ldr	r0, [r3, #0]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	6859      	ldr	r1, [r3, #4]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	461a      	mov	r2, r3
 8003698:	f000 fae3 	bl	8003c62 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2160      	movs	r1, #96	; 0x60
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 fb0d 	bl	8003cc2 <TIM_ITRx_SetConfig>
      break;
 80036a8:	e01c      	b.n	80036e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6818      	ldr	r0, [r3, #0]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	6859      	ldr	r1, [r3, #4]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	461a      	mov	r2, r3
 80036b8:	f000 faa4 	bl	8003c04 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2140      	movs	r1, #64	; 0x40
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 fafd 	bl	8003cc2 <TIM_ITRx_SetConfig>
      break;
 80036c8:	e00c      	b.n	80036e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4619      	mov	r1, r3
 80036d4:	4610      	mov	r0, r2
 80036d6:	f000 faf4 	bl	8003cc2 <TIM_ITRx_SetConfig>
      break;
 80036da:	e003      	b.n	80036e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	73fb      	strb	r3, [r7, #15]
      break;
 80036e0:	e000      	b.n	80036e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036fe:	b480      	push	{r7}
 8003700:	b083      	sub	sp, #12
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800373a:	b480      	push	{r7}
 800373c:	b083      	sub	sp, #12
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
	...

08003764 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a40      	ldr	r2, [pc, #256]	; (8003878 <TIM_Base_SetConfig+0x114>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d013      	beq.n	80037a4 <TIM_Base_SetConfig+0x40>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003782:	d00f      	beq.n	80037a4 <TIM_Base_SetConfig+0x40>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a3d      	ldr	r2, [pc, #244]	; (800387c <TIM_Base_SetConfig+0x118>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d00b      	beq.n	80037a4 <TIM_Base_SetConfig+0x40>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a3c      	ldr	r2, [pc, #240]	; (8003880 <TIM_Base_SetConfig+0x11c>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d007      	beq.n	80037a4 <TIM_Base_SetConfig+0x40>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a3b      	ldr	r2, [pc, #236]	; (8003884 <TIM_Base_SetConfig+0x120>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d003      	beq.n	80037a4 <TIM_Base_SetConfig+0x40>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a3a      	ldr	r2, [pc, #232]	; (8003888 <TIM_Base_SetConfig+0x124>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d108      	bne.n	80037b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a2f      	ldr	r2, [pc, #188]	; (8003878 <TIM_Base_SetConfig+0x114>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d02b      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c4:	d027      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a2c      	ldr	r2, [pc, #176]	; (800387c <TIM_Base_SetConfig+0x118>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d023      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a2b      	ldr	r2, [pc, #172]	; (8003880 <TIM_Base_SetConfig+0x11c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d01f      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a2a      	ldr	r2, [pc, #168]	; (8003884 <TIM_Base_SetConfig+0x120>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d01b      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a29      	ldr	r2, [pc, #164]	; (8003888 <TIM_Base_SetConfig+0x124>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d017      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a28      	ldr	r2, [pc, #160]	; (800388c <TIM_Base_SetConfig+0x128>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d013      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a27      	ldr	r2, [pc, #156]	; (8003890 <TIM_Base_SetConfig+0x12c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d00f      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a26      	ldr	r2, [pc, #152]	; (8003894 <TIM_Base_SetConfig+0x130>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d00b      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a25      	ldr	r2, [pc, #148]	; (8003898 <TIM_Base_SetConfig+0x134>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d007      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a24      	ldr	r2, [pc, #144]	; (800389c <TIM_Base_SetConfig+0x138>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d003      	beq.n	8003816 <TIM_Base_SetConfig+0xb2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a23      	ldr	r2, [pc, #140]	; (80038a0 <TIM_Base_SetConfig+0x13c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d108      	bne.n	8003828 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800381c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	4313      	orrs	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	4313      	orrs	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a0a      	ldr	r2, [pc, #40]	; (8003878 <TIM_Base_SetConfig+0x114>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d003      	beq.n	800385c <TIM_Base_SetConfig+0xf8>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a0c      	ldr	r2, [pc, #48]	; (8003888 <TIM_Base_SetConfig+0x124>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d103      	bne.n	8003864 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	615a      	str	r2, [r3, #20]
}
 800386a:	bf00      	nop
 800386c:	3714      	adds	r7, #20
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40010000 	.word	0x40010000
 800387c:	40000400 	.word	0x40000400
 8003880:	40000800 	.word	0x40000800
 8003884:	40000c00 	.word	0x40000c00
 8003888:	40010400 	.word	0x40010400
 800388c:	40014000 	.word	0x40014000
 8003890:	40014400 	.word	0x40014400
 8003894:	40014800 	.word	0x40014800
 8003898:	40001800 	.word	0x40001800
 800389c:	40001c00 	.word	0x40001c00
 80038a0:	40002000 	.word	0x40002000

080038a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b087      	sub	sp, #28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	f023 0201 	bic.w	r2, r3, #1
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f023 0303 	bic.w	r3, r3, #3
 80038da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f023 0302 	bic.w	r3, r3, #2
 80038ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a20      	ldr	r2, [pc, #128]	; (800397c <TIM_OC1_SetConfig+0xd8>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d003      	beq.n	8003908 <TIM_OC1_SetConfig+0x64>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a1f      	ldr	r2, [pc, #124]	; (8003980 <TIM_OC1_SetConfig+0xdc>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d10c      	bne.n	8003922 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f023 0308 	bic.w	r3, r3, #8
 800390e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	4313      	orrs	r3, r2
 8003918:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f023 0304 	bic.w	r3, r3, #4
 8003920:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a15      	ldr	r2, [pc, #84]	; (800397c <TIM_OC1_SetConfig+0xd8>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d003      	beq.n	8003932 <TIM_OC1_SetConfig+0x8e>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a14      	ldr	r2, [pc, #80]	; (8003980 <TIM_OC1_SetConfig+0xdc>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d111      	bne.n	8003956 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003938:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003940:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	4313      	orrs	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	621a      	str	r2, [r3, #32]
}
 8003970:	bf00      	nop
 8003972:	371c      	adds	r7, #28
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	40010000 	.word	0x40010000
 8003980:	40010400 	.word	0x40010400

08003984 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003984:	b480      	push	{r7}
 8003986:	b087      	sub	sp, #28
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	f023 0210 	bic.w	r2, r3, #16
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	021b      	lsls	r3, r3, #8
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f023 0320 	bic.w	r3, r3, #32
 80039ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	4313      	orrs	r3, r2
 80039da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a22      	ldr	r2, [pc, #136]	; (8003a68 <TIM_OC2_SetConfig+0xe4>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d003      	beq.n	80039ec <TIM_OC2_SetConfig+0x68>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a21      	ldr	r2, [pc, #132]	; (8003a6c <TIM_OC2_SetConfig+0xe8>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d10d      	bne.n	8003a08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	011b      	lsls	r3, r3, #4
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a17      	ldr	r2, [pc, #92]	; (8003a68 <TIM_OC2_SetConfig+0xe4>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d003      	beq.n	8003a18 <TIM_OC2_SetConfig+0x94>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a16      	ldr	r2, [pc, #88]	; (8003a6c <TIM_OC2_SetConfig+0xe8>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d113      	bne.n	8003a40 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	621a      	str	r2, [r3, #32]
}
 8003a5a:	bf00      	nop
 8003a5c:	371c      	adds	r7, #28
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	40010000 	.word	0x40010000
 8003a6c:	40010400 	.word	0x40010400

08003a70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b087      	sub	sp, #28
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f023 0303 	bic.w	r3, r3, #3
 8003aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	021b      	lsls	r3, r3, #8
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a21      	ldr	r2, [pc, #132]	; (8003b50 <TIM_OC3_SetConfig+0xe0>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d003      	beq.n	8003ad6 <TIM_OC3_SetConfig+0x66>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a20      	ldr	r2, [pc, #128]	; (8003b54 <TIM_OC3_SetConfig+0xe4>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d10d      	bne.n	8003af2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003adc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	021b      	lsls	r3, r3, #8
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003af0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a16      	ldr	r2, [pc, #88]	; (8003b50 <TIM_OC3_SetConfig+0xe0>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d003      	beq.n	8003b02 <TIM_OC3_SetConfig+0x92>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a15      	ldr	r2, [pc, #84]	; (8003b54 <TIM_OC3_SetConfig+0xe4>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d113      	bne.n	8003b2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	621a      	str	r2, [r3, #32]
}
 8003b44:	bf00      	nop
 8003b46:	371c      	adds	r7, #28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	40010000 	.word	0x40010000
 8003b54:	40010400 	.word	0x40010400

08003b58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	021b      	lsls	r3, r3, #8
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ba2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	031b      	lsls	r3, r3, #12
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a12      	ldr	r2, [pc, #72]	; (8003bfc <TIM_OC4_SetConfig+0xa4>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d003      	beq.n	8003bc0 <TIM_OC4_SetConfig+0x68>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a11      	ldr	r2, [pc, #68]	; (8003c00 <TIM_OC4_SetConfig+0xa8>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d109      	bne.n	8003bd4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	019b      	lsls	r3, r3, #6
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	621a      	str	r2, [r3, #32]
}
 8003bee:	bf00      	nop
 8003bf0:	371c      	adds	r7, #28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	40010000 	.word	0x40010000
 8003c00:	40010400 	.word	0x40010400

08003c04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b087      	sub	sp, #28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	f023 0201 	bic.w	r2, r3, #1
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f023 030a 	bic.w	r3, r3, #10
 8003c40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	621a      	str	r2, [r3, #32]
}
 8003c56:	bf00      	nop
 8003c58:	371c      	adds	r7, #28
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b087      	sub	sp, #28
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	60f8      	str	r0, [r7, #12]
 8003c6a:	60b9      	str	r1, [r7, #8]
 8003c6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	f023 0210 	bic.w	r2, r3, #16
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	031b      	lsls	r3, r3, #12
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	011b      	lsls	r3, r3, #4
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	621a      	str	r2, [r3, #32]
}
 8003cb6:	bf00      	nop
 8003cb8:	371c      	adds	r7, #28
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b085      	sub	sp, #20
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
 8003cca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f043 0307 	orr.w	r3, r3, #7
 8003ce4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	609a      	str	r2, [r3, #8]
}
 8003cec:	bf00      	nop
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b087      	sub	sp, #28
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
 8003d04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	021a      	lsls	r2, r3, #8
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	609a      	str	r2, [r3, #8]
}
 8003d2c:	bf00      	nop
 8003d2e:	371c      	adds	r7, #28
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f003 031f 	and.w	r3, r3, #31
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6a1a      	ldr	r2, [r3, #32]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	401a      	ands	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6a1a      	ldr	r2, [r3, #32]
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f003 031f 	and.w	r3, r3, #31
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d70:	431a      	orrs	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	621a      	str	r2, [r3, #32]
}
 8003d76:	bf00      	nop
 8003d78:	371c      	adds	r7, #28
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
	...

08003d84 <HAL_TIMEx_OCN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d109      	bne.n	8003da8 <HAL_TIMEx_OCN_Start+0x24>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	bf14      	ite	ne
 8003da0:	2301      	movne	r3, #1
 8003da2:	2300      	moveq	r3, #0
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	e022      	b.n	8003dee <HAL_TIMEx_OCN_Start+0x6a>
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	2b04      	cmp	r3, #4
 8003dac:	d109      	bne.n	8003dc2 <HAL_TIMEx_OCN_Start+0x3e>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	bf14      	ite	ne
 8003dba:	2301      	movne	r3, #1
 8003dbc:	2300      	moveq	r3, #0
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	e015      	b.n	8003dee <HAL_TIMEx_OCN_Start+0x6a>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	d109      	bne.n	8003ddc <HAL_TIMEx_OCN_Start+0x58>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	bf14      	ite	ne
 8003dd4:	2301      	movne	r3, #1
 8003dd6:	2300      	moveq	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	e008      	b.n	8003dee <HAL_TIMEx_OCN_Start+0x6a>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	bf14      	ite	ne
 8003de8:	2301      	movne	r3, #1
 8003dea:	2300      	moveq	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <HAL_TIMEx_OCN_Start+0x72>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e06d      	b.n	8003ed2 <HAL_TIMEx_OCN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d104      	bne.n	8003e06 <HAL_TIMEx_OCN_Start+0x82>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e04:	e013      	b.n	8003e2e <HAL_TIMEx_OCN_Start+0xaa>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b04      	cmp	r3, #4
 8003e0a:	d104      	bne.n	8003e16 <HAL_TIMEx_OCN_Start+0x92>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e14:	e00b      	b.n	8003e2e <HAL_TIMEx_OCN_Start+0xaa>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d104      	bne.n	8003e26 <HAL_TIMEx_OCN_Start+0xa2>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e24:	e003      	b.n	8003e2e <HAL_TIMEx_OCN_Start+0xaa>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2202      	movs	r2, #2
 8003e2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2204      	movs	r2, #4
 8003e34:	6839      	ldr	r1, [r7, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 f994 	bl	8004164 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e4a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a22      	ldr	r2, [pc, #136]	; (8003edc <HAL_TIMEx_OCN_Start+0x158>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d022      	beq.n	8003e9c <HAL_TIMEx_OCN_Start+0x118>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e5e:	d01d      	beq.n	8003e9c <HAL_TIMEx_OCN_Start+0x118>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a1e      	ldr	r2, [pc, #120]	; (8003ee0 <HAL_TIMEx_OCN_Start+0x15c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d018      	beq.n	8003e9c <HAL_TIMEx_OCN_Start+0x118>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a1d      	ldr	r2, [pc, #116]	; (8003ee4 <HAL_TIMEx_OCN_Start+0x160>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d013      	beq.n	8003e9c <HAL_TIMEx_OCN_Start+0x118>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a1b      	ldr	r2, [pc, #108]	; (8003ee8 <HAL_TIMEx_OCN_Start+0x164>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d00e      	beq.n	8003e9c <HAL_TIMEx_OCN_Start+0x118>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a1a      	ldr	r2, [pc, #104]	; (8003eec <HAL_TIMEx_OCN_Start+0x168>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d009      	beq.n	8003e9c <HAL_TIMEx_OCN_Start+0x118>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a18      	ldr	r2, [pc, #96]	; (8003ef0 <HAL_TIMEx_OCN_Start+0x16c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d004      	beq.n	8003e9c <HAL_TIMEx_OCN_Start+0x118>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a17      	ldr	r2, [pc, #92]	; (8003ef4 <HAL_TIMEx_OCN_Start+0x170>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d111      	bne.n	8003ec0 <HAL_TIMEx_OCN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2b06      	cmp	r3, #6
 8003eac:	d010      	beq.n	8003ed0 <HAL_TIMEx_OCN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f042 0201 	orr.w	r2, r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ebe:	e007      	b.n	8003ed0 <HAL_TIMEx_OCN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0201 	orr.w	r2, r2, #1
 8003ece:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	40010000 	.word	0x40010000
 8003ee0:	40000400 	.word	0x40000400
 8003ee4:	40000800 	.word	0x40000800
 8003ee8:	40000c00 	.word	0x40000c00
 8003eec:	40010400 	.word	0x40010400
 8003ef0:	40014000 	.word	0x40014000
 8003ef4:	40001800 	.word	0x40001800

08003ef8 <HAL_TIMEx_OCN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2200      	movs	r2, #0
 8003f08:	6839      	ldr	r1, [r7, #0]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 f92a 	bl	8004164 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6a1a      	ldr	r2, [r3, #32]
 8003f16:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10f      	bne.n	8003f40 <HAL_TIMEx_OCN_Stop+0x48>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6a1a      	ldr	r2, [r3, #32]
 8003f26:	f240 4344 	movw	r3, #1092	; 0x444
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d107      	bne.n	8003f40 <HAL_TIMEx_OCN_Stop+0x48>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f3e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6a1a      	ldr	r2, [r3, #32]
 8003f46:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10f      	bne.n	8003f70 <HAL_TIMEx_OCN_Stop+0x78>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6a1a      	ldr	r2, [r3, #32]
 8003f56:	f240 4344 	movw	r3, #1092	; 0x444
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d107      	bne.n	8003f70 <HAL_TIMEx_OCN_Stop+0x78>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0201 	bic.w	r2, r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d104      	bne.n	8003f80 <HAL_TIMEx_OCN_Stop+0x88>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f7e:	e013      	b.n	8003fa8 <HAL_TIMEx_OCN_Stop+0xb0>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d104      	bne.n	8003f90 <HAL_TIMEx_OCN_Stop+0x98>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f8e:	e00b      	b.n	8003fa8 <HAL_TIMEx_OCN_Stop+0xb0>
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	2b08      	cmp	r3, #8
 8003f94:	d104      	bne.n	8003fa0 <HAL_TIMEx_OCN_Stop+0xa8>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f9e:	e003      	b.n	8003fa8 <HAL_TIMEx_OCN_Stop+0xb0>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
	...

08003fb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d101      	bne.n	8003fcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e05a      	b.n	8004082 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a21      	ldr	r2, [pc, #132]	; (8004090 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d022      	beq.n	8004056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004018:	d01d      	beq.n	8004056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a1d      	ldr	r2, [pc, #116]	; (8004094 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d018      	beq.n	8004056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a1b      	ldr	r2, [pc, #108]	; (8004098 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d013      	beq.n	8004056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a1a      	ldr	r2, [pc, #104]	; (800409c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d00e      	beq.n	8004056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a18      	ldr	r2, [pc, #96]	; (80040a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d009      	beq.n	8004056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a17      	ldr	r2, [pc, #92]	; (80040a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d004      	beq.n	8004056 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a15      	ldr	r2, [pc, #84]	; (80040a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d10c      	bne.n	8004070 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800405c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	4313      	orrs	r3, r2
 8004066:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	40010000 	.word	0x40010000
 8004094:	40000400 	.word	0x40000400
 8004098:	40000800 	.word	0x40000800
 800409c:	40000c00 	.word	0x40000c00
 80040a0:	40010400 	.word	0x40010400
 80040a4:	40014000 	.word	0x40014000
 80040a8:	40001800 	.word	0x40001800

080040ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d101      	bne.n	80040c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80040c4:	2302      	movs	r3, #2
 80040c6:	e03d      	b.n	8004144 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	4313      	orrs	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4313      	orrs	r3, r2
 8004106:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	4313      	orrs	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	4313      	orrs	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	4313      	orrs	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004164:	b480      	push	{r7}
 8004166:	b087      	sub	sp, #28
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	f003 031f 	and.w	r3, r3, #31
 8004176:	2204      	movs	r2, #4
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a1a      	ldr	r2, [r3, #32]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	43db      	mvns	r3, r3
 8004186:	401a      	ands	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a1a      	ldr	r2, [r3, #32]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	f003 031f 	and.w	r3, r3, #31
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	fa01 f303 	lsl.w	r3, r1, r3
 800419c:	431a      	orrs	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	621a      	str	r2, [r3, #32]
}
 80041a2:	bf00      	nop
 80041a4:	371c      	adds	r7, #28
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b082      	sub	sp, #8
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e03f      	b.n	8004240 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d106      	bne.n	80041da <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7fd fb31 	bl	800183c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2224      	movs	r2, #36	; 0x24
 80041de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041f0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 fdd4 	bl	8004da0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691a      	ldr	r2, [r3, #16]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004206:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	695a      	ldr	r2, [r3, #20]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004216:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004226:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2220      	movs	r2, #32
 8004232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2220      	movs	r2, #32
 800423a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08a      	sub	sp, #40	; 0x28
 800424c:	af02      	add	r7, sp, #8
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	603b      	str	r3, [r7, #0]
 8004254:	4613      	mov	r3, r2
 8004256:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b20      	cmp	r3, #32
 8004266:	d17c      	bne.n	8004362 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d002      	beq.n	8004274 <HAL_UART_Transmit+0x2c>
 800426e:	88fb      	ldrh	r3, [r7, #6]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e075      	b.n	8004364 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800427e:	2b01      	cmp	r3, #1
 8004280:	d101      	bne.n	8004286 <HAL_UART_Transmit+0x3e>
 8004282:	2302      	movs	r3, #2
 8004284:	e06e      	b.n	8004364 <HAL_UART_Transmit+0x11c>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2221      	movs	r2, #33	; 0x21
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800429c:	f7fd fc38 	bl	8001b10 <HAL_GetTick>
 80042a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	88fa      	ldrh	r2, [r7, #6]
 80042a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	88fa      	ldrh	r2, [r7, #6]
 80042ac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b6:	d108      	bne.n	80042ca <HAL_UART_Transmit+0x82>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d104      	bne.n	80042ca <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80042c0:	2300      	movs	r3, #0
 80042c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	61bb      	str	r3, [r7, #24]
 80042c8:	e003      	b.n	80042d2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042ce:	2300      	movs	r3, #0
 80042d0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80042da:	e02a      	b.n	8004332 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	2200      	movs	r2, #0
 80042e4:	2180      	movs	r1, #128	; 0x80
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 fb14 	bl	8004914 <UART_WaitOnFlagUntilTimeout>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e036      	b.n	8004364 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10b      	bne.n	8004314 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	881b      	ldrh	r3, [r3, #0]
 8004300:	461a      	mov	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800430a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	3302      	adds	r3, #2
 8004310:	61bb      	str	r3, [r7, #24]
 8004312:	e007      	b.n	8004324 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	781a      	ldrb	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	3301      	adds	r3, #1
 8004322:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004328:	b29b      	uxth	r3, r3
 800432a:	3b01      	subs	r3, #1
 800432c:	b29a      	uxth	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1cf      	bne.n	80042dc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	2200      	movs	r2, #0
 8004344:	2140      	movs	r1, #64	; 0x40
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 fae4 	bl	8004914 <UART_WaitOnFlagUntilTimeout>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e006      	b.n	8004364 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2220      	movs	r2, #32
 800435a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	e000      	b.n	8004364 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004362:	2302      	movs	r3, #2
  }
}
 8004364:	4618      	mov	r0, r3
 8004366:	3720      	adds	r7, #32
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	4613      	mov	r3, r2
 8004378:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b20      	cmp	r3, #32
 8004384:	d11d      	bne.n	80043c2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <HAL_UART_Receive_IT+0x26>
 800438c:	88fb      	ldrh	r3, [r7, #6]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e016      	b.n	80043c4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800439c:	2b01      	cmp	r3, #1
 800439e:	d101      	bne.n	80043a4 <HAL_UART_Receive_IT+0x38>
 80043a0:	2302      	movs	r3, #2
 80043a2:	e00f      	b.n	80043c4 <HAL_UART_Receive_IT+0x58>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80043b2:	88fb      	ldrh	r3, [r7, #6]
 80043b4:	461a      	mov	r2, r3
 80043b6:	68b9      	ldr	r1, [r7, #8]
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f000 fb19 	bl	80049f0 <UART_Start_Receive_IT>
 80043be:	4603      	mov	r3, r0
 80043c0:	e000      	b.n	80043c4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80043c2:	2302      	movs	r3, #2
  }
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b0ba      	sub	sp, #232	; 0xe8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80043f2:	2300      	movs	r3, #0
 80043f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80043f8:	2300      	movs	r3, #0
 80043fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80043fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004402:	f003 030f 	and.w	r3, r3, #15
 8004406:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800440a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10f      	bne.n	8004432 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004416:	f003 0320 	and.w	r3, r3, #32
 800441a:	2b00      	cmp	r3, #0
 800441c:	d009      	beq.n	8004432 <HAL_UART_IRQHandler+0x66>
 800441e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004422:	f003 0320 	and.w	r3, r3, #32
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 fbfd 	bl	8004c2a <UART_Receive_IT>
      return;
 8004430:	e256      	b.n	80048e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004432:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 80de 	beq.w	80045f8 <HAL_UART_IRQHandler+0x22c>
 800443c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	d106      	bne.n	8004456 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800444c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 80d1 	beq.w	80045f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00b      	beq.n	800447a <HAL_UART_IRQHandler+0xae>
 8004462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446a:	2b00      	cmp	r3, #0
 800446c:	d005      	beq.n	800447a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	f043 0201 	orr.w	r2, r3, #1
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800447a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800447e:	f003 0304 	and.w	r3, r3, #4
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00b      	beq.n	800449e <HAL_UART_IRQHandler+0xd2>
 8004486:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d005      	beq.n	800449e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	f043 0202 	orr.w	r2, r3, #2
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800449e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00b      	beq.n	80044c2 <HAL_UART_IRQHandler+0xf6>
 80044aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d005      	beq.n	80044c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	f043 0204 	orr.w	r2, r3, #4
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80044c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044c6:	f003 0308 	and.w	r3, r3, #8
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d011      	beq.n	80044f2 <HAL_UART_IRQHandler+0x126>
 80044ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044d2:	f003 0320 	and.w	r3, r3, #32
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d105      	bne.n	80044e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80044da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d005      	beq.n	80044f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	f043 0208 	orr.w	r2, r3, #8
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 81ed 	beq.w	80048d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004500:	f003 0320 	and.w	r3, r3, #32
 8004504:	2b00      	cmp	r3, #0
 8004506:	d008      	beq.n	800451a <HAL_UART_IRQHandler+0x14e>
 8004508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800450c:	f003 0320 	and.w	r3, r3, #32
 8004510:	2b00      	cmp	r3, #0
 8004512:	d002      	beq.n	800451a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 fb88 	bl	8004c2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004524:	2b40      	cmp	r3, #64	; 0x40
 8004526:	bf0c      	ite	eq
 8004528:	2301      	moveq	r3, #1
 800452a:	2300      	movne	r3, #0
 800452c:	b2db      	uxtb	r3, r3
 800452e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	f003 0308 	and.w	r3, r3, #8
 800453a:	2b00      	cmp	r3, #0
 800453c:	d103      	bne.n	8004546 <HAL_UART_IRQHandler+0x17a>
 800453e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004542:	2b00      	cmp	r3, #0
 8004544:	d04f      	beq.n	80045e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 fa90 	bl	8004a6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004556:	2b40      	cmp	r3, #64	; 0x40
 8004558:	d141      	bne.n	80045de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	3314      	adds	r3, #20
 8004560:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004564:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004568:	e853 3f00 	ldrex	r3, [r3]
 800456c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004570:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004574:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004578:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3314      	adds	r3, #20
 8004582:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004586:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800458a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004592:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004596:	e841 2300 	strex	r3, r2, [r1]
 800459a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800459e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1d9      	bne.n	800455a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d013      	beq.n	80045d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b2:	4a7d      	ldr	r2, [pc, #500]	; (80047a8 <HAL_UART_IRQHandler+0x3dc>)
 80045b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fd fc59 	bl	8001e72 <HAL_DMA_Abort_IT>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d016      	beq.n	80045f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045d0:	4610      	mov	r0, r2
 80045d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045d4:	e00e      	b.n	80045f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fc ff06 	bl	80013e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045dc:	e00a      	b.n	80045f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7fc ff02 	bl	80013e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e4:	e006      	b.n	80045f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7fc fefe 	bl	80013e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80045f2:	e170      	b.n	80048d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045f4:	bf00      	nop
    return;
 80045f6:	e16e      	b.n	80048d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	f040 814a 	bne.w	8004896 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004606:	f003 0310 	and.w	r3, r3, #16
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 8143 	beq.w	8004896 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004614:	f003 0310 	and.w	r3, r3, #16
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 813c 	beq.w	8004896 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800461e:	2300      	movs	r3, #0
 8004620:	60bb      	str	r3, [r7, #8]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	60bb      	str	r3, [r7, #8]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	60bb      	str	r3, [r7, #8]
 8004632:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463e:	2b40      	cmp	r3, #64	; 0x40
 8004640:	f040 80b4 	bne.w	80047ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004650:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 8140 	beq.w	80048da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800465e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004662:	429a      	cmp	r2, r3
 8004664:	f080 8139 	bcs.w	80048da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800466e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800467a:	f000 8088 	beq.w	800478e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	330c      	adds	r3, #12
 8004684:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004688:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800468c:	e853 3f00 	ldrex	r3, [r3]
 8004690:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004694:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004698:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800469c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	330c      	adds	r3, #12
 80046a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80046aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80046b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80046ba:	e841 2300 	strex	r3, r2, [r1]
 80046be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80046c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1d9      	bne.n	800467e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3314      	adds	r3, #20
 80046d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046d4:	e853 3f00 	ldrex	r3, [r3]
 80046d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80046da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046dc:	f023 0301 	bic.w	r3, r3, #1
 80046e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	3314      	adds	r3, #20
 80046ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80046ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80046f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80046f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80046fa:	e841 2300 	strex	r3, r2, [r1]
 80046fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004700:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1e1      	bne.n	80046ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	3314      	adds	r3, #20
 800470c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004710:	e853 3f00 	ldrex	r3, [r3]
 8004714:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800471c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	3314      	adds	r3, #20
 8004726:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800472a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800472c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004730:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004732:	e841 2300 	strex	r3, r2, [r1]
 8004736:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004738:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1e3      	bne.n	8004706 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2220      	movs	r2, #32
 8004742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	330c      	adds	r3, #12
 8004752:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004756:	e853 3f00 	ldrex	r3, [r3]
 800475a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800475c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800475e:	f023 0310 	bic.w	r3, r3, #16
 8004762:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	330c      	adds	r3, #12
 800476c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004770:	65ba      	str	r2, [r7, #88]	; 0x58
 8004772:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004774:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004776:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004778:	e841 2300 	strex	r3, r2, [r1]
 800477c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800477e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1e3      	bne.n	800474c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004788:	4618      	mov	r0, r3
 800478a:	f7fd fb02 	bl	8001d92 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004796:	b29b      	uxth	r3, r3
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	b29b      	uxth	r3, r3
 800479c:	4619      	mov	r1, r3
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f8ac 	bl	80048fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047a4:	e099      	b.n	80048da <HAL_UART_IRQHandler+0x50e>
 80047a6:	bf00      	nop
 80047a8:	08004b33 	.word	0x08004b33
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 808b 	beq.w	80048de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80047c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 8086 	beq.w	80048de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	330c      	adds	r3, #12
 80047d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047dc:	e853 3f00 	ldrex	r3, [r3]
 80047e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	330c      	adds	r3, #12
 80047f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80047f6:	647a      	str	r2, [r7, #68]	; 0x44
 80047f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047fe:	e841 2300 	strex	r3, r2, [r1]
 8004802:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1e3      	bne.n	80047d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3314      	adds	r3, #20
 8004810:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004814:	e853 3f00 	ldrex	r3, [r3]
 8004818:	623b      	str	r3, [r7, #32]
   return(result);
 800481a:	6a3b      	ldr	r3, [r7, #32]
 800481c:	f023 0301 	bic.w	r3, r3, #1
 8004820:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	3314      	adds	r3, #20
 800482a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800482e:	633a      	str	r2, [r7, #48]	; 0x30
 8004830:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004832:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004836:	e841 2300 	strex	r3, r2, [r1]
 800483a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800483c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1e3      	bne.n	800480a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2220      	movs	r2, #32
 8004846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	330c      	adds	r3, #12
 8004856:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	e853 3f00 	ldrex	r3, [r3]
 800485e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f023 0310 	bic.w	r3, r3, #16
 8004866:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	330c      	adds	r3, #12
 8004870:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004874:	61fa      	str	r2, [r7, #28]
 8004876:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004878:	69b9      	ldr	r1, [r7, #24]
 800487a:	69fa      	ldr	r2, [r7, #28]
 800487c:	e841 2300 	strex	r3, r2, [r1]
 8004880:	617b      	str	r3, [r7, #20]
   return(result);
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1e3      	bne.n	8004850 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004888:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800488c:	4619      	mov	r1, r3
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f834 	bl	80048fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004894:	e023      	b.n	80048de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800489a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d009      	beq.n	80048b6 <HAL_UART_IRQHandler+0x4ea>
 80048a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f953 	bl	8004b5a <UART_Transmit_IT>
    return;
 80048b4:	e014      	b.n	80048e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80048b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00e      	beq.n	80048e0 <HAL_UART_IRQHandler+0x514>
 80048c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d008      	beq.n	80048e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f993 	bl	8004bfa <UART_EndTransmit_IT>
    return;
 80048d4:	e004      	b.n	80048e0 <HAL_UART_IRQHandler+0x514>
    return;
 80048d6:	bf00      	nop
 80048d8:	e002      	b.n	80048e0 <HAL_UART_IRQHandler+0x514>
      return;
 80048da:	bf00      	nop
 80048dc:	e000      	b.n	80048e0 <HAL_UART_IRQHandler+0x514>
      return;
 80048de:	bf00      	nop
  }
}
 80048e0:	37e8      	adds	r7, #232	; 0xe8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop

080048e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	460b      	mov	r3, r1
 8004906:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b090      	sub	sp, #64	; 0x40
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	603b      	str	r3, [r7, #0]
 8004920:	4613      	mov	r3, r2
 8004922:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004924:	e050      	b.n	80049c8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492c:	d04c      	beq.n	80049c8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800492e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004930:	2b00      	cmp	r3, #0
 8004932:	d007      	beq.n	8004944 <UART_WaitOnFlagUntilTimeout+0x30>
 8004934:	f7fd f8ec 	bl	8001b10 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004940:	429a      	cmp	r2, r3
 8004942:	d241      	bcs.n	80049c8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	330c      	adds	r3, #12
 800494a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494e:	e853 3f00 	ldrex	r3, [r3]
 8004952:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800495a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	330c      	adds	r3, #12
 8004962:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004964:	637a      	str	r2, [r7, #52]	; 0x34
 8004966:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004968:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800496a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800496c:	e841 2300 	strex	r3, r2, [r1]
 8004970:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1e5      	bne.n	8004944 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3314      	adds	r3, #20
 800497e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	e853 3f00 	ldrex	r3, [r3]
 8004986:	613b      	str	r3, [r7, #16]
   return(result);
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	f023 0301 	bic.w	r3, r3, #1
 800498e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	3314      	adds	r3, #20
 8004996:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004998:	623a      	str	r2, [r7, #32]
 800499a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499c:	69f9      	ldr	r1, [r7, #28]
 800499e:	6a3a      	ldr	r2, [r7, #32]
 80049a0:	e841 2300 	strex	r3, r2, [r1]
 80049a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1e5      	bne.n	8004978 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2220      	movs	r2, #32
 80049b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e00f      	b.n	80049e8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	4013      	ands	r3, r2
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	bf0c      	ite	eq
 80049d8:	2301      	moveq	r3, #1
 80049da:	2300      	movne	r3, #0
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	461a      	mov	r2, r3
 80049e0:	79fb      	ldrb	r3, [r7, #7]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d09f      	beq.n	8004926 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3740      	adds	r7, #64	; 0x40
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	4613      	mov	r3, r2
 80049fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	88fa      	ldrh	r2, [r7, #6]
 8004a08:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	88fa      	ldrh	r2, [r7, #6]
 8004a0e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2222      	movs	r2, #34	; 0x22
 8004a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d007      	beq.n	8004a3e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68da      	ldr	r2, [r3, #12]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a3c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	695a      	ldr	r2, [r3, #20]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f042 0201 	orr.w	r2, r2, #1
 8004a4c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68da      	ldr	r2, [r3, #12]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f042 0220 	orr.w	r2, r2, #32
 8004a5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b095      	sub	sp, #84	; 0x54
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	330c      	adds	r3, #12
 8004a7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a7e:	e853 3f00 	ldrex	r3, [r3]
 8004a82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	330c      	adds	r3, #12
 8004a92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a94:	643a      	str	r2, [r7, #64]	; 0x40
 8004a96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a9c:	e841 2300 	strex	r3, r2, [r1]
 8004aa0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1e5      	bne.n	8004a74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	3314      	adds	r3, #20
 8004aae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	e853 3f00 	ldrex	r3, [r3]
 8004ab6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	f023 0301 	bic.w	r3, r3, #1
 8004abe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3314      	adds	r3, #20
 8004ac6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ac8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004aca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004acc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ace:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ad0:	e841 2300 	strex	r3, r2, [r1]
 8004ad4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1e5      	bne.n	8004aa8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d119      	bne.n	8004b18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	330c      	adds	r3, #12
 8004aea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	e853 3f00 	ldrex	r3, [r3]
 8004af2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	f023 0310 	bic.w	r3, r3, #16
 8004afa:	647b      	str	r3, [r7, #68]	; 0x44
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	330c      	adds	r3, #12
 8004b02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b04:	61ba      	str	r2, [r7, #24]
 8004b06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b08:	6979      	ldr	r1, [r7, #20]
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	e841 2300 	strex	r3, r2, [r1]
 8004b10:	613b      	str	r3, [r7, #16]
   return(result);
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1e5      	bne.n	8004ae4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b26:	bf00      	nop
 8004b28:	3754      	adds	r7, #84	; 0x54
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b084      	sub	sp, #16
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f7fc fc4b 	bl	80013e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b52:	bf00      	nop
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b085      	sub	sp, #20
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b21      	cmp	r3, #33	; 0x21
 8004b6c:	d13e      	bne.n	8004bec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b76:	d114      	bne.n	8004ba2 <UART_Transmit_IT+0x48>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d110      	bne.n	8004ba2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	1c9a      	adds	r2, r3, #2
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	621a      	str	r2, [r3, #32]
 8004ba0:	e008      	b.n	8004bb4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	1c59      	adds	r1, r3, #1
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6211      	str	r1, [r2, #32]
 8004bac:	781a      	ldrb	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10f      	bne.n	8004be8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68da      	ldr	r2, [r3, #12]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bd6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68da      	ldr	r2, [r3, #12]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004be6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004be8:	2300      	movs	r3, #0
 8004bea:	e000      	b.n	8004bee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004bec:	2302      	movs	r3, #2
  }
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b082      	sub	sp, #8
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68da      	ldr	r2, [r3, #12]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2220      	movs	r2, #32
 8004c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7ff fe64 	bl	80048e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b08c      	sub	sp, #48	; 0x30
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b22      	cmp	r3, #34	; 0x22
 8004c3c:	f040 80ab 	bne.w	8004d96 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c48:	d117      	bne.n	8004c7a <UART_Receive_IT+0x50>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d113      	bne.n	8004c7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c52:	2300      	movs	r3, #0
 8004c54:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c72:	1c9a      	adds	r2, r3, #2
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	629a      	str	r2, [r3, #40]	; 0x28
 8004c78:	e026      	b.n	8004cc8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004c80:	2300      	movs	r3, #0
 8004c82:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c8c:	d007      	beq.n	8004c9e <UART_Receive_IT+0x74>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10a      	bne.n	8004cac <UART_Receive_IT+0x82>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d106      	bne.n	8004cac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca8:	701a      	strb	r2, [r3, #0]
 8004caa:	e008      	b.n	8004cbe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cbc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc2:	1c5a      	adds	r2, r3, #1
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d15a      	bne.n	8004d92 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68da      	ldr	r2, [r3, #12]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 0220 	bic.w	r2, r2, #32
 8004cea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68da      	ldr	r2, [r3, #12]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	695a      	ldr	r2, [r3, #20]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0201 	bic.w	r2, r2, #1
 8004d0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d135      	bne.n	8004d88 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	330c      	adds	r3, #12
 8004d28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	e853 3f00 	ldrex	r3, [r3]
 8004d30:	613b      	str	r3, [r7, #16]
   return(result);
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	f023 0310 	bic.w	r3, r3, #16
 8004d38:	627b      	str	r3, [r7, #36]	; 0x24
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	330c      	adds	r3, #12
 8004d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d42:	623a      	str	r2, [r7, #32]
 8004d44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d46:	69f9      	ldr	r1, [r7, #28]
 8004d48:	6a3a      	ldr	r2, [r7, #32]
 8004d4a:	e841 2300 	strex	r3, r2, [r1]
 8004d4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1e5      	bne.n	8004d22 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0310 	and.w	r3, r3, #16
 8004d60:	2b10      	cmp	r3, #16
 8004d62:	d10a      	bne.n	8004d7a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d64:	2300      	movs	r3, #0
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	60fb      	str	r3, [r7, #12]
 8004d78:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d7e:	4619      	mov	r1, r3
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7ff fdbb 	bl	80048fc <HAL_UARTEx_RxEventCallback>
 8004d86:	e002      	b.n	8004d8e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f7fc fb37 	bl	80013fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	e002      	b.n	8004d98 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	e000      	b.n	8004d98 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004d96:	2302      	movs	r3, #2
  }
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3730      	adds	r7, #48	; 0x30
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004da4:	b0c0      	sub	sp, #256	; 0x100
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dbc:	68d9      	ldr	r1, [r3, #12]
 8004dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	ea40 0301 	orr.w	r3, r0, r1
 8004dc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	431a      	orrs	r2, r3
 8004de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004df8:	f021 010c 	bic.w	r1, r1, #12
 8004dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e06:	430b      	orrs	r3, r1
 8004e08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e1a:	6999      	ldr	r1, [r3, #24]
 8004e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	ea40 0301 	orr.w	r3, r0, r1
 8004e26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	4b8f      	ldr	r3, [pc, #572]	; (800506c <UART_SetConfig+0x2cc>)
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d005      	beq.n	8004e40 <UART_SetConfig+0xa0>
 8004e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	4b8d      	ldr	r3, [pc, #564]	; (8005070 <UART_SetConfig+0x2d0>)
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d104      	bne.n	8004e4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e40:	f7fd fe5a 	bl	8002af8 <HAL_RCC_GetPCLK2Freq>
 8004e44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e48:	e003      	b.n	8004e52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e4a:	f7fd fe41 	bl	8002ad0 <HAL_RCC_GetPCLK1Freq>
 8004e4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e5c:	f040 810c 	bne.w	8005078 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e64:	2200      	movs	r2, #0
 8004e66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e72:	4622      	mov	r2, r4
 8004e74:	462b      	mov	r3, r5
 8004e76:	1891      	adds	r1, r2, r2
 8004e78:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e7a:	415b      	adcs	r3, r3
 8004e7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e82:	4621      	mov	r1, r4
 8004e84:	eb12 0801 	adds.w	r8, r2, r1
 8004e88:	4629      	mov	r1, r5
 8004e8a:	eb43 0901 	adc.w	r9, r3, r1
 8004e8e:	f04f 0200 	mov.w	r2, #0
 8004e92:	f04f 0300 	mov.w	r3, #0
 8004e96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ea2:	4690      	mov	r8, r2
 8004ea4:	4699      	mov	r9, r3
 8004ea6:	4623      	mov	r3, r4
 8004ea8:	eb18 0303 	adds.w	r3, r8, r3
 8004eac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004eb0:	462b      	mov	r3, r5
 8004eb2:	eb49 0303 	adc.w	r3, r9, r3
 8004eb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ec6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004eca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ece:	460b      	mov	r3, r1
 8004ed0:	18db      	adds	r3, r3, r3
 8004ed2:	653b      	str	r3, [r7, #80]	; 0x50
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	eb42 0303 	adc.w	r3, r2, r3
 8004eda:	657b      	str	r3, [r7, #84]	; 0x54
 8004edc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ee0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ee4:	f7fb f9c4 	bl	8000270 <__aeabi_uldivmod>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	4b61      	ldr	r3, [pc, #388]	; (8005074 <UART_SetConfig+0x2d4>)
 8004eee:	fba3 2302 	umull	r2, r3, r3, r2
 8004ef2:	095b      	lsrs	r3, r3, #5
 8004ef4:	011c      	lsls	r4, r3, #4
 8004ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004efa:	2200      	movs	r2, #0
 8004efc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004f04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f08:	4642      	mov	r2, r8
 8004f0a:	464b      	mov	r3, r9
 8004f0c:	1891      	adds	r1, r2, r2
 8004f0e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f10:	415b      	adcs	r3, r3
 8004f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f18:	4641      	mov	r1, r8
 8004f1a:	eb12 0a01 	adds.w	sl, r2, r1
 8004f1e:	4649      	mov	r1, r9
 8004f20:	eb43 0b01 	adc.w	fp, r3, r1
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	f04f 0300 	mov.w	r3, #0
 8004f2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f38:	4692      	mov	sl, r2
 8004f3a:	469b      	mov	fp, r3
 8004f3c:	4643      	mov	r3, r8
 8004f3e:	eb1a 0303 	adds.w	r3, sl, r3
 8004f42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f46:	464b      	mov	r3, r9
 8004f48:	eb4b 0303 	adc.w	r3, fp, r3
 8004f4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f64:	460b      	mov	r3, r1
 8004f66:	18db      	adds	r3, r3, r3
 8004f68:	643b      	str	r3, [r7, #64]	; 0x40
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	eb42 0303 	adc.w	r3, r2, r3
 8004f70:	647b      	str	r3, [r7, #68]	; 0x44
 8004f72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004f7a:	f7fb f979 	bl	8000270 <__aeabi_uldivmod>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	460b      	mov	r3, r1
 8004f82:	4611      	mov	r1, r2
 8004f84:	4b3b      	ldr	r3, [pc, #236]	; (8005074 <UART_SetConfig+0x2d4>)
 8004f86:	fba3 2301 	umull	r2, r3, r3, r1
 8004f8a:	095b      	lsrs	r3, r3, #5
 8004f8c:	2264      	movs	r2, #100	; 0x64
 8004f8e:	fb02 f303 	mul.w	r3, r2, r3
 8004f92:	1acb      	subs	r3, r1, r3
 8004f94:	00db      	lsls	r3, r3, #3
 8004f96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004f9a:	4b36      	ldr	r3, [pc, #216]	; (8005074 <UART_SetConfig+0x2d4>)
 8004f9c:	fba3 2302 	umull	r2, r3, r3, r2
 8004fa0:	095b      	lsrs	r3, r3, #5
 8004fa2:	005b      	lsls	r3, r3, #1
 8004fa4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fa8:	441c      	add	r4, r3
 8004faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fb4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004fb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004fbc:	4642      	mov	r2, r8
 8004fbe:	464b      	mov	r3, r9
 8004fc0:	1891      	adds	r1, r2, r2
 8004fc2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004fc4:	415b      	adcs	r3, r3
 8004fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004fcc:	4641      	mov	r1, r8
 8004fce:	1851      	adds	r1, r2, r1
 8004fd0:	6339      	str	r1, [r7, #48]	; 0x30
 8004fd2:	4649      	mov	r1, r9
 8004fd4:	414b      	adcs	r3, r1
 8004fd6:	637b      	str	r3, [r7, #52]	; 0x34
 8004fd8:	f04f 0200 	mov.w	r2, #0
 8004fdc:	f04f 0300 	mov.w	r3, #0
 8004fe0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004fe4:	4659      	mov	r1, fp
 8004fe6:	00cb      	lsls	r3, r1, #3
 8004fe8:	4651      	mov	r1, sl
 8004fea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fee:	4651      	mov	r1, sl
 8004ff0:	00ca      	lsls	r2, r1, #3
 8004ff2:	4610      	mov	r0, r2
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	4642      	mov	r2, r8
 8004ffa:	189b      	adds	r3, r3, r2
 8004ffc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005000:	464b      	mov	r3, r9
 8005002:	460a      	mov	r2, r1
 8005004:	eb42 0303 	adc.w	r3, r2, r3
 8005008:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800500c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005018:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800501c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005020:	460b      	mov	r3, r1
 8005022:	18db      	adds	r3, r3, r3
 8005024:	62bb      	str	r3, [r7, #40]	; 0x28
 8005026:	4613      	mov	r3, r2
 8005028:	eb42 0303 	adc.w	r3, r2, r3
 800502c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800502e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005032:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005036:	f7fb f91b 	bl	8000270 <__aeabi_uldivmod>
 800503a:	4602      	mov	r2, r0
 800503c:	460b      	mov	r3, r1
 800503e:	4b0d      	ldr	r3, [pc, #52]	; (8005074 <UART_SetConfig+0x2d4>)
 8005040:	fba3 1302 	umull	r1, r3, r3, r2
 8005044:	095b      	lsrs	r3, r3, #5
 8005046:	2164      	movs	r1, #100	; 0x64
 8005048:	fb01 f303 	mul.w	r3, r1, r3
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	00db      	lsls	r3, r3, #3
 8005050:	3332      	adds	r3, #50	; 0x32
 8005052:	4a08      	ldr	r2, [pc, #32]	; (8005074 <UART_SetConfig+0x2d4>)
 8005054:	fba2 2303 	umull	r2, r3, r2, r3
 8005058:	095b      	lsrs	r3, r3, #5
 800505a:	f003 0207 	and.w	r2, r3, #7
 800505e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4422      	add	r2, r4
 8005066:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005068:	e105      	b.n	8005276 <UART_SetConfig+0x4d6>
 800506a:	bf00      	nop
 800506c:	40011000 	.word	0x40011000
 8005070:	40011400 	.word	0x40011400
 8005074:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005078:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800507c:	2200      	movs	r2, #0
 800507e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005082:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005086:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800508a:	4642      	mov	r2, r8
 800508c:	464b      	mov	r3, r9
 800508e:	1891      	adds	r1, r2, r2
 8005090:	6239      	str	r1, [r7, #32]
 8005092:	415b      	adcs	r3, r3
 8005094:	627b      	str	r3, [r7, #36]	; 0x24
 8005096:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800509a:	4641      	mov	r1, r8
 800509c:	1854      	adds	r4, r2, r1
 800509e:	4649      	mov	r1, r9
 80050a0:	eb43 0501 	adc.w	r5, r3, r1
 80050a4:	f04f 0200 	mov.w	r2, #0
 80050a8:	f04f 0300 	mov.w	r3, #0
 80050ac:	00eb      	lsls	r3, r5, #3
 80050ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050b2:	00e2      	lsls	r2, r4, #3
 80050b4:	4614      	mov	r4, r2
 80050b6:	461d      	mov	r5, r3
 80050b8:	4643      	mov	r3, r8
 80050ba:	18e3      	adds	r3, r4, r3
 80050bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050c0:	464b      	mov	r3, r9
 80050c2:	eb45 0303 	adc.w	r3, r5, r3
 80050c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80050d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80050da:	f04f 0200 	mov.w	r2, #0
 80050de:	f04f 0300 	mov.w	r3, #0
 80050e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80050e6:	4629      	mov	r1, r5
 80050e8:	008b      	lsls	r3, r1, #2
 80050ea:	4621      	mov	r1, r4
 80050ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050f0:	4621      	mov	r1, r4
 80050f2:	008a      	lsls	r2, r1, #2
 80050f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80050f8:	f7fb f8ba 	bl	8000270 <__aeabi_uldivmod>
 80050fc:	4602      	mov	r2, r0
 80050fe:	460b      	mov	r3, r1
 8005100:	4b60      	ldr	r3, [pc, #384]	; (8005284 <UART_SetConfig+0x4e4>)
 8005102:	fba3 2302 	umull	r2, r3, r3, r2
 8005106:	095b      	lsrs	r3, r3, #5
 8005108:	011c      	lsls	r4, r3, #4
 800510a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800510e:	2200      	movs	r2, #0
 8005110:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005114:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005118:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800511c:	4642      	mov	r2, r8
 800511e:	464b      	mov	r3, r9
 8005120:	1891      	adds	r1, r2, r2
 8005122:	61b9      	str	r1, [r7, #24]
 8005124:	415b      	adcs	r3, r3
 8005126:	61fb      	str	r3, [r7, #28]
 8005128:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800512c:	4641      	mov	r1, r8
 800512e:	1851      	adds	r1, r2, r1
 8005130:	6139      	str	r1, [r7, #16]
 8005132:	4649      	mov	r1, r9
 8005134:	414b      	adcs	r3, r1
 8005136:	617b      	str	r3, [r7, #20]
 8005138:	f04f 0200 	mov.w	r2, #0
 800513c:	f04f 0300 	mov.w	r3, #0
 8005140:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005144:	4659      	mov	r1, fp
 8005146:	00cb      	lsls	r3, r1, #3
 8005148:	4651      	mov	r1, sl
 800514a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800514e:	4651      	mov	r1, sl
 8005150:	00ca      	lsls	r2, r1, #3
 8005152:	4610      	mov	r0, r2
 8005154:	4619      	mov	r1, r3
 8005156:	4603      	mov	r3, r0
 8005158:	4642      	mov	r2, r8
 800515a:	189b      	adds	r3, r3, r2
 800515c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005160:	464b      	mov	r3, r9
 8005162:	460a      	mov	r2, r1
 8005164:	eb42 0303 	adc.w	r3, r2, r3
 8005168:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800516c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	67bb      	str	r3, [r7, #120]	; 0x78
 8005176:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005178:	f04f 0200 	mov.w	r2, #0
 800517c:	f04f 0300 	mov.w	r3, #0
 8005180:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005184:	4649      	mov	r1, r9
 8005186:	008b      	lsls	r3, r1, #2
 8005188:	4641      	mov	r1, r8
 800518a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800518e:	4641      	mov	r1, r8
 8005190:	008a      	lsls	r2, r1, #2
 8005192:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005196:	f7fb f86b 	bl	8000270 <__aeabi_uldivmod>
 800519a:	4602      	mov	r2, r0
 800519c:	460b      	mov	r3, r1
 800519e:	4b39      	ldr	r3, [pc, #228]	; (8005284 <UART_SetConfig+0x4e4>)
 80051a0:	fba3 1302 	umull	r1, r3, r3, r2
 80051a4:	095b      	lsrs	r3, r3, #5
 80051a6:	2164      	movs	r1, #100	; 0x64
 80051a8:	fb01 f303 	mul.w	r3, r1, r3
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	3332      	adds	r3, #50	; 0x32
 80051b2:	4a34      	ldr	r2, [pc, #208]	; (8005284 <UART_SetConfig+0x4e4>)
 80051b4:	fba2 2303 	umull	r2, r3, r2, r3
 80051b8:	095b      	lsrs	r3, r3, #5
 80051ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051be:	441c      	add	r4, r3
 80051c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051c4:	2200      	movs	r2, #0
 80051c6:	673b      	str	r3, [r7, #112]	; 0x70
 80051c8:	677a      	str	r2, [r7, #116]	; 0x74
 80051ca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80051ce:	4642      	mov	r2, r8
 80051d0:	464b      	mov	r3, r9
 80051d2:	1891      	adds	r1, r2, r2
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	415b      	adcs	r3, r3
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051de:	4641      	mov	r1, r8
 80051e0:	1851      	adds	r1, r2, r1
 80051e2:	6039      	str	r1, [r7, #0]
 80051e4:	4649      	mov	r1, r9
 80051e6:	414b      	adcs	r3, r1
 80051e8:	607b      	str	r3, [r7, #4]
 80051ea:	f04f 0200 	mov.w	r2, #0
 80051ee:	f04f 0300 	mov.w	r3, #0
 80051f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80051f6:	4659      	mov	r1, fp
 80051f8:	00cb      	lsls	r3, r1, #3
 80051fa:	4651      	mov	r1, sl
 80051fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005200:	4651      	mov	r1, sl
 8005202:	00ca      	lsls	r2, r1, #3
 8005204:	4610      	mov	r0, r2
 8005206:	4619      	mov	r1, r3
 8005208:	4603      	mov	r3, r0
 800520a:	4642      	mov	r2, r8
 800520c:	189b      	adds	r3, r3, r2
 800520e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005210:	464b      	mov	r3, r9
 8005212:	460a      	mov	r2, r1
 8005214:	eb42 0303 	adc.w	r3, r2, r3
 8005218:	66fb      	str	r3, [r7, #108]	; 0x6c
 800521a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	663b      	str	r3, [r7, #96]	; 0x60
 8005224:	667a      	str	r2, [r7, #100]	; 0x64
 8005226:	f04f 0200 	mov.w	r2, #0
 800522a:	f04f 0300 	mov.w	r3, #0
 800522e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005232:	4649      	mov	r1, r9
 8005234:	008b      	lsls	r3, r1, #2
 8005236:	4641      	mov	r1, r8
 8005238:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800523c:	4641      	mov	r1, r8
 800523e:	008a      	lsls	r2, r1, #2
 8005240:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005244:	f7fb f814 	bl	8000270 <__aeabi_uldivmod>
 8005248:	4602      	mov	r2, r0
 800524a:	460b      	mov	r3, r1
 800524c:	4b0d      	ldr	r3, [pc, #52]	; (8005284 <UART_SetConfig+0x4e4>)
 800524e:	fba3 1302 	umull	r1, r3, r3, r2
 8005252:	095b      	lsrs	r3, r3, #5
 8005254:	2164      	movs	r1, #100	; 0x64
 8005256:	fb01 f303 	mul.w	r3, r1, r3
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	3332      	adds	r3, #50	; 0x32
 8005260:	4a08      	ldr	r2, [pc, #32]	; (8005284 <UART_SetConfig+0x4e4>)
 8005262:	fba2 2303 	umull	r2, r3, r2, r3
 8005266:	095b      	lsrs	r3, r3, #5
 8005268:	f003 020f 	and.w	r2, r3, #15
 800526c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4422      	add	r2, r4
 8005274:	609a      	str	r2, [r3, #8]
}
 8005276:	bf00      	nop
 8005278:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800527c:	46bd      	mov	sp, r7
 800527e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005282:	bf00      	nop
 8005284:	51eb851f 	.word	0x51eb851f

08005288 <__errno>:
 8005288:	4b01      	ldr	r3, [pc, #4]	; (8005290 <__errno+0x8>)
 800528a:	6818      	ldr	r0, [r3, #0]
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	2000001c 	.word	0x2000001c

08005294 <__libc_init_array>:
 8005294:	b570      	push	{r4, r5, r6, lr}
 8005296:	4d0d      	ldr	r5, [pc, #52]	; (80052cc <__libc_init_array+0x38>)
 8005298:	4c0d      	ldr	r4, [pc, #52]	; (80052d0 <__libc_init_array+0x3c>)
 800529a:	1b64      	subs	r4, r4, r5
 800529c:	10a4      	asrs	r4, r4, #2
 800529e:	2600      	movs	r6, #0
 80052a0:	42a6      	cmp	r6, r4
 80052a2:	d109      	bne.n	80052b8 <__libc_init_array+0x24>
 80052a4:	4d0b      	ldr	r5, [pc, #44]	; (80052d4 <__libc_init_array+0x40>)
 80052a6:	4c0c      	ldr	r4, [pc, #48]	; (80052d8 <__libc_init_array+0x44>)
 80052a8:	f000 fc8e 	bl	8005bc8 <_init>
 80052ac:	1b64      	subs	r4, r4, r5
 80052ae:	10a4      	asrs	r4, r4, #2
 80052b0:	2600      	movs	r6, #0
 80052b2:	42a6      	cmp	r6, r4
 80052b4:	d105      	bne.n	80052c2 <__libc_init_array+0x2e>
 80052b6:	bd70      	pop	{r4, r5, r6, pc}
 80052b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80052bc:	4798      	blx	r3
 80052be:	3601      	adds	r6, #1
 80052c0:	e7ee      	b.n	80052a0 <__libc_init_array+0xc>
 80052c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80052c6:	4798      	blx	r3
 80052c8:	3601      	adds	r6, #1
 80052ca:	e7f2      	b.n	80052b2 <__libc_init_array+0x1e>
 80052cc:	08005d24 	.word	0x08005d24
 80052d0:	08005d24 	.word	0x08005d24
 80052d4:	08005d24 	.word	0x08005d24
 80052d8:	08005d28 	.word	0x08005d28

080052dc <memset>:
 80052dc:	4402      	add	r2, r0
 80052de:	4603      	mov	r3, r0
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d100      	bne.n	80052e6 <memset+0xa>
 80052e4:	4770      	bx	lr
 80052e6:	f803 1b01 	strb.w	r1, [r3], #1
 80052ea:	e7f9      	b.n	80052e0 <memset+0x4>

080052ec <siprintf>:
 80052ec:	b40e      	push	{r1, r2, r3}
 80052ee:	b500      	push	{lr}
 80052f0:	b09c      	sub	sp, #112	; 0x70
 80052f2:	ab1d      	add	r3, sp, #116	; 0x74
 80052f4:	9002      	str	r0, [sp, #8]
 80052f6:	9006      	str	r0, [sp, #24]
 80052f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80052fc:	4809      	ldr	r0, [pc, #36]	; (8005324 <siprintf+0x38>)
 80052fe:	9107      	str	r1, [sp, #28]
 8005300:	9104      	str	r1, [sp, #16]
 8005302:	4909      	ldr	r1, [pc, #36]	; (8005328 <siprintf+0x3c>)
 8005304:	f853 2b04 	ldr.w	r2, [r3], #4
 8005308:	9105      	str	r1, [sp, #20]
 800530a:	6800      	ldr	r0, [r0, #0]
 800530c:	9301      	str	r3, [sp, #4]
 800530e:	a902      	add	r1, sp, #8
 8005310:	f000 f868 	bl	80053e4 <_svfiprintf_r>
 8005314:	9b02      	ldr	r3, [sp, #8]
 8005316:	2200      	movs	r2, #0
 8005318:	701a      	strb	r2, [r3, #0]
 800531a:	b01c      	add	sp, #112	; 0x70
 800531c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005320:	b003      	add	sp, #12
 8005322:	4770      	bx	lr
 8005324:	2000001c 	.word	0x2000001c
 8005328:	ffff0208 	.word	0xffff0208

0800532c <__ssputs_r>:
 800532c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005330:	688e      	ldr	r6, [r1, #8]
 8005332:	429e      	cmp	r6, r3
 8005334:	4682      	mov	sl, r0
 8005336:	460c      	mov	r4, r1
 8005338:	4690      	mov	r8, r2
 800533a:	461f      	mov	r7, r3
 800533c:	d838      	bhi.n	80053b0 <__ssputs_r+0x84>
 800533e:	898a      	ldrh	r2, [r1, #12]
 8005340:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005344:	d032      	beq.n	80053ac <__ssputs_r+0x80>
 8005346:	6825      	ldr	r5, [r4, #0]
 8005348:	6909      	ldr	r1, [r1, #16]
 800534a:	eba5 0901 	sub.w	r9, r5, r1
 800534e:	6965      	ldr	r5, [r4, #20]
 8005350:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005354:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005358:	3301      	adds	r3, #1
 800535a:	444b      	add	r3, r9
 800535c:	106d      	asrs	r5, r5, #1
 800535e:	429d      	cmp	r5, r3
 8005360:	bf38      	it	cc
 8005362:	461d      	movcc	r5, r3
 8005364:	0553      	lsls	r3, r2, #21
 8005366:	d531      	bpl.n	80053cc <__ssputs_r+0xa0>
 8005368:	4629      	mov	r1, r5
 800536a:	f000 fb63 	bl	8005a34 <_malloc_r>
 800536e:	4606      	mov	r6, r0
 8005370:	b950      	cbnz	r0, 8005388 <__ssputs_r+0x5c>
 8005372:	230c      	movs	r3, #12
 8005374:	f8ca 3000 	str.w	r3, [sl]
 8005378:	89a3      	ldrh	r3, [r4, #12]
 800537a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800537e:	81a3      	strh	r3, [r4, #12]
 8005380:	f04f 30ff 	mov.w	r0, #4294967295
 8005384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005388:	6921      	ldr	r1, [r4, #16]
 800538a:	464a      	mov	r2, r9
 800538c:	f000 fabe 	bl	800590c <memcpy>
 8005390:	89a3      	ldrh	r3, [r4, #12]
 8005392:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800539a:	81a3      	strh	r3, [r4, #12]
 800539c:	6126      	str	r6, [r4, #16]
 800539e:	6165      	str	r5, [r4, #20]
 80053a0:	444e      	add	r6, r9
 80053a2:	eba5 0509 	sub.w	r5, r5, r9
 80053a6:	6026      	str	r6, [r4, #0]
 80053a8:	60a5      	str	r5, [r4, #8]
 80053aa:	463e      	mov	r6, r7
 80053ac:	42be      	cmp	r6, r7
 80053ae:	d900      	bls.n	80053b2 <__ssputs_r+0x86>
 80053b0:	463e      	mov	r6, r7
 80053b2:	6820      	ldr	r0, [r4, #0]
 80053b4:	4632      	mov	r2, r6
 80053b6:	4641      	mov	r1, r8
 80053b8:	f000 fab6 	bl	8005928 <memmove>
 80053bc:	68a3      	ldr	r3, [r4, #8]
 80053be:	1b9b      	subs	r3, r3, r6
 80053c0:	60a3      	str	r3, [r4, #8]
 80053c2:	6823      	ldr	r3, [r4, #0]
 80053c4:	4433      	add	r3, r6
 80053c6:	6023      	str	r3, [r4, #0]
 80053c8:	2000      	movs	r0, #0
 80053ca:	e7db      	b.n	8005384 <__ssputs_r+0x58>
 80053cc:	462a      	mov	r2, r5
 80053ce:	f000 fba5 	bl	8005b1c <_realloc_r>
 80053d2:	4606      	mov	r6, r0
 80053d4:	2800      	cmp	r0, #0
 80053d6:	d1e1      	bne.n	800539c <__ssputs_r+0x70>
 80053d8:	6921      	ldr	r1, [r4, #16]
 80053da:	4650      	mov	r0, sl
 80053dc:	f000 fabe 	bl	800595c <_free_r>
 80053e0:	e7c7      	b.n	8005372 <__ssputs_r+0x46>
	...

080053e4 <_svfiprintf_r>:
 80053e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e8:	4698      	mov	r8, r3
 80053ea:	898b      	ldrh	r3, [r1, #12]
 80053ec:	061b      	lsls	r3, r3, #24
 80053ee:	b09d      	sub	sp, #116	; 0x74
 80053f0:	4607      	mov	r7, r0
 80053f2:	460d      	mov	r5, r1
 80053f4:	4614      	mov	r4, r2
 80053f6:	d50e      	bpl.n	8005416 <_svfiprintf_r+0x32>
 80053f8:	690b      	ldr	r3, [r1, #16]
 80053fa:	b963      	cbnz	r3, 8005416 <_svfiprintf_r+0x32>
 80053fc:	2140      	movs	r1, #64	; 0x40
 80053fe:	f000 fb19 	bl	8005a34 <_malloc_r>
 8005402:	6028      	str	r0, [r5, #0]
 8005404:	6128      	str	r0, [r5, #16]
 8005406:	b920      	cbnz	r0, 8005412 <_svfiprintf_r+0x2e>
 8005408:	230c      	movs	r3, #12
 800540a:	603b      	str	r3, [r7, #0]
 800540c:	f04f 30ff 	mov.w	r0, #4294967295
 8005410:	e0d1      	b.n	80055b6 <_svfiprintf_r+0x1d2>
 8005412:	2340      	movs	r3, #64	; 0x40
 8005414:	616b      	str	r3, [r5, #20]
 8005416:	2300      	movs	r3, #0
 8005418:	9309      	str	r3, [sp, #36]	; 0x24
 800541a:	2320      	movs	r3, #32
 800541c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005420:	f8cd 800c 	str.w	r8, [sp, #12]
 8005424:	2330      	movs	r3, #48	; 0x30
 8005426:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80055d0 <_svfiprintf_r+0x1ec>
 800542a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800542e:	f04f 0901 	mov.w	r9, #1
 8005432:	4623      	mov	r3, r4
 8005434:	469a      	mov	sl, r3
 8005436:	f813 2b01 	ldrb.w	r2, [r3], #1
 800543a:	b10a      	cbz	r2, 8005440 <_svfiprintf_r+0x5c>
 800543c:	2a25      	cmp	r2, #37	; 0x25
 800543e:	d1f9      	bne.n	8005434 <_svfiprintf_r+0x50>
 8005440:	ebba 0b04 	subs.w	fp, sl, r4
 8005444:	d00b      	beq.n	800545e <_svfiprintf_r+0x7a>
 8005446:	465b      	mov	r3, fp
 8005448:	4622      	mov	r2, r4
 800544a:	4629      	mov	r1, r5
 800544c:	4638      	mov	r0, r7
 800544e:	f7ff ff6d 	bl	800532c <__ssputs_r>
 8005452:	3001      	adds	r0, #1
 8005454:	f000 80aa 	beq.w	80055ac <_svfiprintf_r+0x1c8>
 8005458:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800545a:	445a      	add	r2, fp
 800545c:	9209      	str	r2, [sp, #36]	; 0x24
 800545e:	f89a 3000 	ldrb.w	r3, [sl]
 8005462:	2b00      	cmp	r3, #0
 8005464:	f000 80a2 	beq.w	80055ac <_svfiprintf_r+0x1c8>
 8005468:	2300      	movs	r3, #0
 800546a:	f04f 32ff 	mov.w	r2, #4294967295
 800546e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005472:	f10a 0a01 	add.w	sl, sl, #1
 8005476:	9304      	str	r3, [sp, #16]
 8005478:	9307      	str	r3, [sp, #28]
 800547a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800547e:	931a      	str	r3, [sp, #104]	; 0x68
 8005480:	4654      	mov	r4, sl
 8005482:	2205      	movs	r2, #5
 8005484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005488:	4851      	ldr	r0, [pc, #324]	; (80055d0 <_svfiprintf_r+0x1ec>)
 800548a:	f7fa fea1 	bl	80001d0 <memchr>
 800548e:	9a04      	ldr	r2, [sp, #16]
 8005490:	b9d8      	cbnz	r0, 80054ca <_svfiprintf_r+0xe6>
 8005492:	06d0      	lsls	r0, r2, #27
 8005494:	bf44      	itt	mi
 8005496:	2320      	movmi	r3, #32
 8005498:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800549c:	0711      	lsls	r1, r2, #28
 800549e:	bf44      	itt	mi
 80054a0:	232b      	movmi	r3, #43	; 0x2b
 80054a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054a6:	f89a 3000 	ldrb.w	r3, [sl]
 80054aa:	2b2a      	cmp	r3, #42	; 0x2a
 80054ac:	d015      	beq.n	80054da <_svfiprintf_r+0xf6>
 80054ae:	9a07      	ldr	r2, [sp, #28]
 80054b0:	4654      	mov	r4, sl
 80054b2:	2000      	movs	r0, #0
 80054b4:	f04f 0c0a 	mov.w	ip, #10
 80054b8:	4621      	mov	r1, r4
 80054ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054be:	3b30      	subs	r3, #48	; 0x30
 80054c0:	2b09      	cmp	r3, #9
 80054c2:	d94e      	bls.n	8005562 <_svfiprintf_r+0x17e>
 80054c4:	b1b0      	cbz	r0, 80054f4 <_svfiprintf_r+0x110>
 80054c6:	9207      	str	r2, [sp, #28]
 80054c8:	e014      	b.n	80054f4 <_svfiprintf_r+0x110>
 80054ca:	eba0 0308 	sub.w	r3, r0, r8
 80054ce:	fa09 f303 	lsl.w	r3, r9, r3
 80054d2:	4313      	orrs	r3, r2
 80054d4:	9304      	str	r3, [sp, #16]
 80054d6:	46a2      	mov	sl, r4
 80054d8:	e7d2      	b.n	8005480 <_svfiprintf_r+0x9c>
 80054da:	9b03      	ldr	r3, [sp, #12]
 80054dc:	1d19      	adds	r1, r3, #4
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	9103      	str	r1, [sp, #12]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	bfbb      	ittet	lt
 80054e6:	425b      	neglt	r3, r3
 80054e8:	f042 0202 	orrlt.w	r2, r2, #2
 80054ec:	9307      	strge	r3, [sp, #28]
 80054ee:	9307      	strlt	r3, [sp, #28]
 80054f0:	bfb8      	it	lt
 80054f2:	9204      	strlt	r2, [sp, #16]
 80054f4:	7823      	ldrb	r3, [r4, #0]
 80054f6:	2b2e      	cmp	r3, #46	; 0x2e
 80054f8:	d10c      	bne.n	8005514 <_svfiprintf_r+0x130>
 80054fa:	7863      	ldrb	r3, [r4, #1]
 80054fc:	2b2a      	cmp	r3, #42	; 0x2a
 80054fe:	d135      	bne.n	800556c <_svfiprintf_r+0x188>
 8005500:	9b03      	ldr	r3, [sp, #12]
 8005502:	1d1a      	adds	r2, r3, #4
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	9203      	str	r2, [sp, #12]
 8005508:	2b00      	cmp	r3, #0
 800550a:	bfb8      	it	lt
 800550c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005510:	3402      	adds	r4, #2
 8005512:	9305      	str	r3, [sp, #20]
 8005514:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80055e0 <_svfiprintf_r+0x1fc>
 8005518:	7821      	ldrb	r1, [r4, #0]
 800551a:	2203      	movs	r2, #3
 800551c:	4650      	mov	r0, sl
 800551e:	f7fa fe57 	bl	80001d0 <memchr>
 8005522:	b140      	cbz	r0, 8005536 <_svfiprintf_r+0x152>
 8005524:	2340      	movs	r3, #64	; 0x40
 8005526:	eba0 000a 	sub.w	r0, r0, sl
 800552a:	fa03 f000 	lsl.w	r0, r3, r0
 800552e:	9b04      	ldr	r3, [sp, #16]
 8005530:	4303      	orrs	r3, r0
 8005532:	3401      	adds	r4, #1
 8005534:	9304      	str	r3, [sp, #16]
 8005536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800553a:	4826      	ldr	r0, [pc, #152]	; (80055d4 <_svfiprintf_r+0x1f0>)
 800553c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005540:	2206      	movs	r2, #6
 8005542:	f7fa fe45 	bl	80001d0 <memchr>
 8005546:	2800      	cmp	r0, #0
 8005548:	d038      	beq.n	80055bc <_svfiprintf_r+0x1d8>
 800554a:	4b23      	ldr	r3, [pc, #140]	; (80055d8 <_svfiprintf_r+0x1f4>)
 800554c:	bb1b      	cbnz	r3, 8005596 <_svfiprintf_r+0x1b2>
 800554e:	9b03      	ldr	r3, [sp, #12]
 8005550:	3307      	adds	r3, #7
 8005552:	f023 0307 	bic.w	r3, r3, #7
 8005556:	3308      	adds	r3, #8
 8005558:	9303      	str	r3, [sp, #12]
 800555a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800555c:	4433      	add	r3, r6
 800555e:	9309      	str	r3, [sp, #36]	; 0x24
 8005560:	e767      	b.n	8005432 <_svfiprintf_r+0x4e>
 8005562:	fb0c 3202 	mla	r2, ip, r2, r3
 8005566:	460c      	mov	r4, r1
 8005568:	2001      	movs	r0, #1
 800556a:	e7a5      	b.n	80054b8 <_svfiprintf_r+0xd4>
 800556c:	2300      	movs	r3, #0
 800556e:	3401      	adds	r4, #1
 8005570:	9305      	str	r3, [sp, #20]
 8005572:	4619      	mov	r1, r3
 8005574:	f04f 0c0a 	mov.w	ip, #10
 8005578:	4620      	mov	r0, r4
 800557a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800557e:	3a30      	subs	r2, #48	; 0x30
 8005580:	2a09      	cmp	r2, #9
 8005582:	d903      	bls.n	800558c <_svfiprintf_r+0x1a8>
 8005584:	2b00      	cmp	r3, #0
 8005586:	d0c5      	beq.n	8005514 <_svfiprintf_r+0x130>
 8005588:	9105      	str	r1, [sp, #20]
 800558a:	e7c3      	b.n	8005514 <_svfiprintf_r+0x130>
 800558c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005590:	4604      	mov	r4, r0
 8005592:	2301      	movs	r3, #1
 8005594:	e7f0      	b.n	8005578 <_svfiprintf_r+0x194>
 8005596:	ab03      	add	r3, sp, #12
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	462a      	mov	r2, r5
 800559c:	4b0f      	ldr	r3, [pc, #60]	; (80055dc <_svfiprintf_r+0x1f8>)
 800559e:	a904      	add	r1, sp, #16
 80055a0:	4638      	mov	r0, r7
 80055a2:	f3af 8000 	nop.w
 80055a6:	1c42      	adds	r2, r0, #1
 80055a8:	4606      	mov	r6, r0
 80055aa:	d1d6      	bne.n	800555a <_svfiprintf_r+0x176>
 80055ac:	89ab      	ldrh	r3, [r5, #12]
 80055ae:	065b      	lsls	r3, r3, #25
 80055b0:	f53f af2c 	bmi.w	800540c <_svfiprintf_r+0x28>
 80055b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055b6:	b01d      	add	sp, #116	; 0x74
 80055b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055bc:	ab03      	add	r3, sp, #12
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	462a      	mov	r2, r5
 80055c2:	4b06      	ldr	r3, [pc, #24]	; (80055dc <_svfiprintf_r+0x1f8>)
 80055c4:	a904      	add	r1, sp, #16
 80055c6:	4638      	mov	r0, r7
 80055c8:	f000 f87a 	bl	80056c0 <_printf_i>
 80055cc:	e7eb      	b.n	80055a6 <_svfiprintf_r+0x1c2>
 80055ce:	bf00      	nop
 80055d0:	08005ce8 	.word	0x08005ce8
 80055d4:	08005cf2 	.word	0x08005cf2
 80055d8:	00000000 	.word	0x00000000
 80055dc:	0800532d 	.word	0x0800532d
 80055e0:	08005cee 	.word	0x08005cee

080055e4 <_printf_common>:
 80055e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055e8:	4616      	mov	r6, r2
 80055ea:	4699      	mov	r9, r3
 80055ec:	688a      	ldr	r2, [r1, #8]
 80055ee:	690b      	ldr	r3, [r1, #16]
 80055f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055f4:	4293      	cmp	r3, r2
 80055f6:	bfb8      	it	lt
 80055f8:	4613      	movlt	r3, r2
 80055fa:	6033      	str	r3, [r6, #0]
 80055fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005600:	4607      	mov	r7, r0
 8005602:	460c      	mov	r4, r1
 8005604:	b10a      	cbz	r2, 800560a <_printf_common+0x26>
 8005606:	3301      	adds	r3, #1
 8005608:	6033      	str	r3, [r6, #0]
 800560a:	6823      	ldr	r3, [r4, #0]
 800560c:	0699      	lsls	r1, r3, #26
 800560e:	bf42      	ittt	mi
 8005610:	6833      	ldrmi	r3, [r6, #0]
 8005612:	3302      	addmi	r3, #2
 8005614:	6033      	strmi	r3, [r6, #0]
 8005616:	6825      	ldr	r5, [r4, #0]
 8005618:	f015 0506 	ands.w	r5, r5, #6
 800561c:	d106      	bne.n	800562c <_printf_common+0x48>
 800561e:	f104 0a19 	add.w	sl, r4, #25
 8005622:	68e3      	ldr	r3, [r4, #12]
 8005624:	6832      	ldr	r2, [r6, #0]
 8005626:	1a9b      	subs	r3, r3, r2
 8005628:	42ab      	cmp	r3, r5
 800562a:	dc26      	bgt.n	800567a <_printf_common+0x96>
 800562c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005630:	1e13      	subs	r3, r2, #0
 8005632:	6822      	ldr	r2, [r4, #0]
 8005634:	bf18      	it	ne
 8005636:	2301      	movne	r3, #1
 8005638:	0692      	lsls	r2, r2, #26
 800563a:	d42b      	bmi.n	8005694 <_printf_common+0xb0>
 800563c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005640:	4649      	mov	r1, r9
 8005642:	4638      	mov	r0, r7
 8005644:	47c0      	blx	r8
 8005646:	3001      	adds	r0, #1
 8005648:	d01e      	beq.n	8005688 <_printf_common+0xa4>
 800564a:	6823      	ldr	r3, [r4, #0]
 800564c:	68e5      	ldr	r5, [r4, #12]
 800564e:	6832      	ldr	r2, [r6, #0]
 8005650:	f003 0306 	and.w	r3, r3, #6
 8005654:	2b04      	cmp	r3, #4
 8005656:	bf08      	it	eq
 8005658:	1aad      	subeq	r5, r5, r2
 800565a:	68a3      	ldr	r3, [r4, #8]
 800565c:	6922      	ldr	r2, [r4, #16]
 800565e:	bf0c      	ite	eq
 8005660:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005664:	2500      	movne	r5, #0
 8005666:	4293      	cmp	r3, r2
 8005668:	bfc4      	itt	gt
 800566a:	1a9b      	subgt	r3, r3, r2
 800566c:	18ed      	addgt	r5, r5, r3
 800566e:	2600      	movs	r6, #0
 8005670:	341a      	adds	r4, #26
 8005672:	42b5      	cmp	r5, r6
 8005674:	d11a      	bne.n	80056ac <_printf_common+0xc8>
 8005676:	2000      	movs	r0, #0
 8005678:	e008      	b.n	800568c <_printf_common+0xa8>
 800567a:	2301      	movs	r3, #1
 800567c:	4652      	mov	r2, sl
 800567e:	4649      	mov	r1, r9
 8005680:	4638      	mov	r0, r7
 8005682:	47c0      	blx	r8
 8005684:	3001      	adds	r0, #1
 8005686:	d103      	bne.n	8005690 <_printf_common+0xac>
 8005688:	f04f 30ff 	mov.w	r0, #4294967295
 800568c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005690:	3501      	adds	r5, #1
 8005692:	e7c6      	b.n	8005622 <_printf_common+0x3e>
 8005694:	18e1      	adds	r1, r4, r3
 8005696:	1c5a      	adds	r2, r3, #1
 8005698:	2030      	movs	r0, #48	; 0x30
 800569a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800569e:	4422      	add	r2, r4
 80056a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056a8:	3302      	adds	r3, #2
 80056aa:	e7c7      	b.n	800563c <_printf_common+0x58>
 80056ac:	2301      	movs	r3, #1
 80056ae:	4622      	mov	r2, r4
 80056b0:	4649      	mov	r1, r9
 80056b2:	4638      	mov	r0, r7
 80056b4:	47c0      	blx	r8
 80056b6:	3001      	adds	r0, #1
 80056b8:	d0e6      	beq.n	8005688 <_printf_common+0xa4>
 80056ba:	3601      	adds	r6, #1
 80056bc:	e7d9      	b.n	8005672 <_printf_common+0x8e>
	...

080056c0 <_printf_i>:
 80056c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056c4:	7e0f      	ldrb	r7, [r1, #24]
 80056c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80056c8:	2f78      	cmp	r7, #120	; 0x78
 80056ca:	4691      	mov	r9, r2
 80056cc:	4680      	mov	r8, r0
 80056ce:	460c      	mov	r4, r1
 80056d0:	469a      	mov	sl, r3
 80056d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80056d6:	d807      	bhi.n	80056e8 <_printf_i+0x28>
 80056d8:	2f62      	cmp	r7, #98	; 0x62
 80056da:	d80a      	bhi.n	80056f2 <_printf_i+0x32>
 80056dc:	2f00      	cmp	r7, #0
 80056de:	f000 80d8 	beq.w	8005892 <_printf_i+0x1d2>
 80056e2:	2f58      	cmp	r7, #88	; 0x58
 80056e4:	f000 80a3 	beq.w	800582e <_printf_i+0x16e>
 80056e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056f0:	e03a      	b.n	8005768 <_printf_i+0xa8>
 80056f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056f6:	2b15      	cmp	r3, #21
 80056f8:	d8f6      	bhi.n	80056e8 <_printf_i+0x28>
 80056fa:	a101      	add	r1, pc, #4	; (adr r1, 8005700 <_printf_i+0x40>)
 80056fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005700:	08005759 	.word	0x08005759
 8005704:	0800576d 	.word	0x0800576d
 8005708:	080056e9 	.word	0x080056e9
 800570c:	080056e9 	.word	0x080056e9
 8005710:	080056e9 	.word	0x080056e9
 8005714:	080056e9 	.word	0x080056e9
 8005718:	0800576d 	.word	0x0800576d
 800571c:	080056e9 	.word	0x080056e9
 8005720:	080056e9 	.word	0x080056e9
 8005724:	080056e9 	.word	0x080056e9
 8005728:	080056e9 	.word	0x080056e9
 800572c:	08005879 	.word	0x08005879
 8005730:	0800579d 	.word	0x0800579d
 8005734:	0800585b 	.word	0x0800585b
 8005738:	080056e9 	.word	0x080056e9
 800573c:	080056e9 	.word	0x080056e9
 8005740:	0800589b 	.word	0x0800589b
 8005744:	080056e9 	.word	0x080056e9
 8005748:	0800579d 	.word	0x0800579d
 800574c:	080056e9 	.word	0x080056e9
 8005750:	080056e9 	.word	0x080056e9
 8005754:	08005863 	.word	0x08005863
 8005758:	682b      	ldr	r3, [r5, #0]
 800575a:	1d1a      	adds	r2, r3, #4
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	602a      	str	r2, [r5, #0]
 8005760:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005764:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005768:	2301      	movs	r3, #1
 800576a:	e0a3      	b.n	80058b4 <_printf_i+0x1f4>
 800576c:	6820      	ldr	r0, [r4, #0]
 800576e:	6829      	ldr	r1, [r5, #0]
 8005770:	0606      	lsls	r6, r0, #24
 8005772:	f101 0304 	add.w	r3, r1, #4
 8005776:	d50a      	bpl.n	800578e <_printf_i+0xce>
 8005778:	680e      	ldr	r6, [r1, #0]
 800577a:	602b      	str	r3, [r5, #0]
 800577c:	2e00      	cmp	r6, #0
 800577e:	da03      	bge.n	8005788 <_printf_i+0xc8>
 8005780:	232d      	movs	r3, #45	; 0x2d
 8005782:	4276      	negs	r6, r6
 8005784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005788:	485e      	ldr	r0, [pc, #376]	; (8005904 <_printf_i+0x244>)
 800578a:	230a      	movs	r3, #10
 800578c:	e019      	b.n	80057c2 <_printf_i+0x102>
 800578e:	680e      	ldr	r6, [r1, #0]
 8005790:	602b      	str	r3, [r5, #0]
 8005792:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005796:	bf18      	it	ne
 8005798:	b236      	sxthne	r6, r6
 800579a:	e7ef      	b.n	800577c <_printf_i+0xbc>
 800579c:	682b      	ldr	r3, [r5, #0]
 800579e:	6820      	ldr	r0, [r4, #0]
 80057a0:	1d19      	adds	r1, r3, #4
 80057a2:	6029      	str	r1, [r5, #0]
 80057a4:	0601      	lsls	r1, r0, #24
 80057a6:	d501      	bpl.n	80057ac <_printf_i+0xec>
 80057a8:	681e      	ldr	r6, [r3, #0]
 80057aa:	e002      	b.n	80057b2 <_printf_i+0xf2>
 80057ac:	0646      	lsls	r6, r0, #25
 80057ae:	d5fb      	bpl.n	80057a8 <_printf_i+0xe8>
 80057b0:	881e      	ldrh	r6, [r3, #0]
 80057b2:	4854      	ldr	r0, [pc, #336]	; (8005904 <_printf_i+0x244>)
 80057b4:	2f6f      	cmp	r7, #111	; 0x6f
 80057b6:	bf0c      	ite	eq
 80057b8:	2308      	moveq	r3, #8
 80057ba:	230a      	movne	r3, #10
 80057bc:	2100      	movs	r1, #0
 80057be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057c2:	6865      	ldr	r5, [r4, #4]
 80057c4:	60a5      	str	r5, [r4, #8]
 80057c6:	2d00      	cmp	r5, #0
 80057c8:	bfa2      	ittt	ge
 80057ca:	6821      	ldrge	r1, [r4, #0]
 80057cc:	f021 0104 	bicge.w	r1, r1, #4
 80057d0:	6021      	strge	r1, [r4, #0]
 80057d2:	b90e      	cbnz	r6, 80057d8 <_printf_i+0x118>
 80057d4:	2d00      	cmp	r5, #0
 80057d6:	d04d      	beq.n	8005874 <_printf_i+0x1b4>
 80057d8:	4615      	mov	r5, r2
 80057da:	fbb6 f1f3 	udiv	r1, r6, r3
 80057de:	fb03 6711 	mls	r7, r3, r1, r6
 80057e2:	5dc7      	ldrb	r7, [r0, r7]
 80057e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80057e8:	4637      	mov	r7, r6
 80057ea:	42bb      	cmp	r3, r7
 80057ec:	460e      	mov	r6, r1
 80057ee:	d9f4      	bls.n	80057da <_printf_i+0x11a>
 80057f0:	2b08      	cmp	r3, #8
 80057f2:	d10b      	bne.n	800580c <_printf_i+0x14c>
 80057f4:	6823      	ldr	r3, [r4, #0]
 80057f6:	07de      	lsls	r6, r3, #31
 80057f8:	d508      	bpl.n	800580c <_printf_i+0x14c>
 80057fa:	6923      	ldr	r3, [r4, #16]
 80057fc:	6861      	ldr	r1, [r4, #4]
 80057fe:	4299      	cmp	r1, r3
 8005800:	bfde      	ittt	le
 8005802:	2330      	movle	r3, #48	; 0x30
 8005804:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005808:	f105 35ff 	addle.w	r5, r5, #4294967295
 800580c:	1b52      	subs	r2, r2, r5
 800580e:	6122      	str	r2, [r4, #16]
 8005810:	f8cd a000 	str.w	sl, [sp]
 8005814:	464b      	mov	r3, r9
 8005816:	aa03      	add	r2, sp, #12
 8005818:	4621      	mov	r1, r4
 800581a:	4640      	mov	r0, r8
 800581c:	f7ff fee2 	bl	80055e4 <_printf_common>
 8005820:	3001      	adds	r0, #1
 8005822:	d14c      	bne.n	80058be <_printf_i+0x1fe>
 8005824:	f04f 30ff 	mov.w	r0, #4294967295
 8005828:	b004      	add	sp, #16
 800582a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800582e:	4835      	ldr	r0, [pc, #212]	; (8005904 <_printf_i+0x244>)
 8005830:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005834:	6829      	ldr	r1, [r5, #0]
 8005836:	6823      	ldr	r3, [r4, #0]
 8005838:	f851 6b04 	ldr.w	r6, [r1], #4
 800583c:	6029      	str	r1, [r5, #0]
 800583e:	061d      	lsls	r5, r3, #24
 8005840:	d514      	bpl.n	800586c <_printf_i+0x1ac>
 8005842:	07df      	lsls	r7, r3, #31
 8005844:	bf44      	itt	mi
 8005846:	f043 0320 	orrmi.w	r3, r3, #32
 800584a:	6023      	strmi	r3, [r4, #0]
 800584c:	b91e      	cbnz	r6, 8005856 <_printf_i+0x196>
 800584e:	6823      	ldr	r3, [r4, #0]
 8005850:	f023 0320 	bic.w	r3, r3, #32
 8005854:	6023      	str	r3, [r4, #0]
 8005856:	2310      	movs	r3, #16
 8005858:	e7b0      	b.n	80057bc <_printf_i+0xfc>
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	f043 0320 	orr.w	r3, r3, #32
 8005860:	6023      	str	r3, [r4, #0]
 8005862:	2378      	movs	r3, #120	; 0x78
 8005864:	4828      	ldr	r0, [pc, #160]	; (8005908 <_printf_i+0x248>)
 8005866:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800586a:	e7e3      	b.n	8005834 <_printf_i+0x174>
 800586c:	0659      	lsls	r1, r3, #25
 800586e:	bf48      	it	mi
 8005870:	b2b6      	uxthmi	r6, r6
 8005872:	e7e6      	b.n	8005842 <_printf_i+0x182>
 8005874:	4615      	mov	r5, r2
 8005876:	e7bb      	b.n	80057f0 <_printf_i+0x130>
 8005878:	682b      	ldr	r3, [r5, #0]
 800587a:	6826      	ldr	r6, [r4, #0]
 800587c:	6961      	ldr	r1, [r4, #20]
 800587e:	1d18      	adds	r0, r3, #4
 8005880:	6028      	str	r0, [r5, #0]
 8005882:	0635      	lsls	r5, r6, #24
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	d501      	bpl.n	800588c <_printf_i+0x1cc>
 8005888:	6019      	str	r1, [r3, #0]
 800588a:	e002      	b.n	8005892 <_printf_i+0x1d2>
 800588c:	0670      	lsls	r0, r6, #25
 800588e:	d5fb      	bpl.n	8005888 <_printf_i+0x1c8>
 8005890:	8019      	strh	r1, [r3, #0]
 8005892:	2300      	movs	r3, #0
 8005894:	6123      	str	r3, [r4, #16]
 8005896:	4615      	mov	r5, r2
 8005898:	e7ba      	b.n	8005810 <_printf_i+0x150>
 800589a:	682b      	ldr	r3, [r5, #0]
 800589c:	1d1a      	adds	r2, r3, #4
 800589e:	602a      	str	r2, [r5, #0]
 80058a0:	681d      	ldr	r5, [r3, #0]
 80058a2:	6862      	ldr	r2, [r4, #4]
 80058a4:	2100      	movs	r1, #0
 80058a6:	4628      	mov	r0, r5
 80058a8:	f7fa fc92 	bl	80001d0 <memchr>
 80058ac:	b108      	cbz	r0, 80058b2 <_printf_i+0x1f2>
 80058ae:	1b40      	subs	r0, r0, r5
 80058b0:	6060      	str	r0, [r4, #4]
 80058b2:	6863      	ldr	r3, [r4, #4]
 80058b4:	6123      	str	r3, [r4, #16]
 80058b6:	2300      	movs	r3, #0
 80058b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058bc:	e7a8      	b.n	8005810 <_printf_i+0x150>
 80058be:	6923      	ldr	r3, [r4, #16]
 80058c0:	462a      	mov	r2, r5
 80058c2:	4649      	mov	r1, r9
 80058c4:	4640      	mov	r0, r8
 80058c6:	47d0      	blx	sl
 80058c8:	3001      	adds	r0, #1
 80058ca:	d0ab      	beq.n	8005824 <_printf_i+0x164>
 80058cc:	6823      	ldr	r3, [r4, #0]
 80058ce:	079b      	lsls	r3, r3, #30
 80058d0:	d413      	bmi.n	80058fa <_printf_i+0x23a>
 80058d2:	68e0      	ldr	r0, [r4, #12]
 80058d4:	9b03      	ldr	r3, [sp, #12]
 80058d6:	4298      	cmp	r0, r3
 80058d8:	bfb8      	it	lt
 80058da:	4618      	movlt	r0, r3
 80058dc:	e7a4      	b.n	8005828 <_printf_i+0x168>
 80058de:	2301      	movs	r3, #1
 80058e0:	4632      	mov	r2, r6
 80058e2:	4649      	mov	r1, r9
 80058e4:	4640      	mov	r0, r8
 80058e6:	47d0      	blx	sl
 80058e8:	3001      	adds	r0, #1
 80058ea:	d09b      	beq.n	8005824 <_printf_i+0x164>
 80058ec:	3501      	adds	r5, #1
 80058ee:	68e3      	ldr	r3, [r4, #12]
 80058f0:	9903      	ldr	r1, [sp, #12]
 80058f2:	1a5b      	subs	r3, r3, r1
 80058f4:	42ab      	cmp	r3, r5
 80058f6:	dcf2      	bgt.n	80058de <_printf_i+0x21e>
 80058f8:	e7eb      	b.n	80058d2 <_printf_i+0x212>
 80058fa:	2500      	movs	r5, #0
 80058fc:	f104 0619 	add.w	r6, r4, #25
 8005900:	e7f5      	b.n	80058ee <_printf_i+0x22e>
 8005902:	bf00      	nop
 8005904:	08005cf9 	.word	0x08005cf9
 8005908:	08005d0a 	.word	0x08005d0a

0800590c <memcpy>:
 800590c:	440a      	add	r2, r1
 800590e:	4291      	cmp	r1, r2
 8005910:	f100 33ff 	add.w	r3, r0, #4294967295
 8005914:	d100      	bne.n	8005918 <memcpy+0xc>
 8005916:	4770      	bx	lr
 8005918:	b510      	push	{r4, lr}
 800591a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800591e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005922:	4291      	cmp	r1, r2
 8005924:	d1f9      	bne.n	800591a <memcpy+0xe>
 8005926:	bd10      	pop	{r4, pc}

08005928 <memmove>:
 8005928:	4288      	cmp	r0, r1
 800592a:	b510      	push	{r4, lr}
 800592c:	eb01 0402 	add.w	r4, r1, r2
 8005930:	d902      	bls.n	8005938 <memmove+0x10>
 8005932:	4284      	cmp	r4, r0
 8005934:	4623      	mov	r3, r4
 8005936:	d807      	bhi.n	8005948 <memmove+0x20>
 8005938:	1e43      	subs	r3, r0, #1
 800593a:	42a1      	cmp	r1, r4
 800593c:	d008      	beq.n	8005950 <memmove+0x28>
 800593e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005942:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005946:	e7f8      	b.n	800593a <memmove+0x12>
 8005948:	4402      	add	r2, r0
 800594a:	4601      	mov	r1, r0
 800594c:	428a      	cmp	r2, r1
 800594e:	d100      	bne.n	8005952 <memmove+0x2a>
 8005950:	bd10      	pop	{r4, pc}
 8005952:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005956:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800595a:	e7f7      	b.n	800594c <memmove+0x24>

0800595c <_free_r>:
 800595c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800595e:	2900      	cmp	r1, #0
 8005960:	d044      	beq.n	80059ec <_free_r+0x90>
 8005962:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005966:	9001      	str	r0, [sp, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	f1a1 0404 	sub.w	r4, r1, #4
 800596e:	bfb8      	it	lt
 8005970:	18e4      	addlt	r4, r4, r3
 8005972:	f000 f913 	bl	8005b9c <__malloc_lock>
 8005976:	4a1e      	ldr	r2, [pc, #120]	; (80059f0 <_free_r+0x94>)
 8005978:	9801      	ldr	r0, [sp, #4]
 800597a:	6813      	ldr	r3, [r2, #0]
 800597c:	b933      	cbnz	r3, 800598c <_free_r+0x30>
 800597e:	6063      	str	r3, [r4, #4]
 8005980:	6014      	str	r4, [r2, #0]
 8005982:	b003      	add	sp, #12
 8005984:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005988:	f000 b90e 	b.w	8005ba8 <__malloc_unlock>
 800598c:	42a3      	cmp	r3, r4
 800598e:	d908      	bls.n	80059a2 <_free_r+0x46>
 8005990:	6825      	ldr	r5, [r4, #0]
 8005992:	1961      	adds	r1, r4, r5
 8005994:	428b      	cmp	r3, r1
 8005996:	bf01      	itttt	eq
 8005998:	6819      	ldreq	r1, [r3, #0]
 800599a:	685b      	ldreq	r3, [r3, #4]
 800599c:	1949      	addeq	r1, r1, r5
 800599e:	6021      	streq	r1, [r4, #0]
 80059a0:	e7ed      	b.n	800597e <_free_r+0x22>
 80059a2:	461a      	mov	r2, r3
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	b10b      	cbz	r3, 80059ac <_free_r+0x50>
 80059a8:	42a3      	cmp	r3, r4
 80059aa:	d9fa      	bls.n	80059a2 <_free_r+0x46>
 80059ac:	6811      	ldr	r1, [r2, #0]
 80059ae:	1855      	adds	r5, r2, r1
 80059b0:	42a5      	cmp	r5, r4
 80059b2:	d10b      	bne.n	80059cc <_free_r+0x70>
 80059b4:	6824      	ldr	r4, [r4, #0]
 80059b6:	4421      	add	r1, r4
 80059b8:	1854      	adds	r4, r2, r1
 80059ba:	42a3      	cmp	r3, r4
 80059bc:	6011      	str	r1, [r2, #0]
 80059be:	d1e0      	bne.n	8005982 <_free_r+0x26>
 80059c0:	681c      	ldr	r4, [r3, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	6053      	str	r3, [r2, #4]
 80059c6:	4421      	add	r1, r4
 80059c8:	6011      	str	r1, [r2, #0]
 80059ca:	e7da      	b.n	8005982 <_free_r+0x26>
 80059cc:	d902      	bls.n	80059d4 <_free_r+0x78>
 80059ce:	230c      	movs	r3, #12
 80059d0:	6003      	str	r3, [r0, #0]
 80059d2:	e7d6      	b.n	8005982 <_free_r+0x26>
 80059d4:	6825      	ldr	r5, [r4, #0]
 80059d6:	1961      	adds	r1, r4, r5
 80059d8:	428b      	cmp	r3, r1
 80059da:	bf04      	itt	eq
 80059dc:	6819      	ldreq	r1, [r3, #0]
 80059de:	685b      	ldreq	r3, [r3, #4]
 80059e0:	6063      	str	r3, [r4, #4]
 80059e2:	bf04      	itt	eq
 80059e4:	1949      	addeq	r1, r1, r5
 80059e6:	6021      	streq	r1, [r4, #0]
 80059e8:	6054      	str	r4, [r2, #4]
 80059ea:	e7ca      	b.n	8005982 <_free_r+0x26>
 80059ec:	b003      	add	sp, #12
 80059ee:	bd30      	pop	{r4, r5, pc}
 80059f0:	200001e0 	.word	0x200001e0

080059f4 <sbrk_aligned>:
 80059f4:	b570      	push	{r4, r5, r6, lr}
 80059f6:	4e0e      	ldr	r6, [pc, #56]	; (8005a30 <sbrk_aligned+0x3c>)
 80059f8:	460c      	mov	r4, r1
 80059fa:	6831      	ldr	r1, [r6, #0]
 80059fc:	4605      	mov	r5, r0
 80059fe:	b911      	cbnz	r1, 8005a06 <sbrk_aligned+0x12>
 8005a00:	f000 f8bc 	bl	8005b7c <_sbrk_r>
 8005a04:	6030      	str	r0, [r6, #0]
 8005a06:	4621      	mov	r1, r4
 8005a08:	4628      	mov	r0, r5
 8005a0a:	f000 f8b7 	bl	8005b7c <_sbrk_r>
 8005a0e:	1c43      	adds	r3, r0, #1
 8005a10:	d00a      	beq.n	8005a28 <sbrk_aligned+0x34>
 8005a12:	1cc4      	adds	r4, r0, #3
 8005a14:	f024 0403 	bic.w	r4, r4, #3
 8005a18:	42a0      	cmp	r0, r4
 8005a1a:	d007      	beq.n	8005a2c <sbrk_aligned+0x38>
 8005a1c:	1a21      	subs	r1, r4, r0
 8005a1e:	4628      	mov	r0, r5
 8005a20:	f000 f8ac 	bl	8005b7c <_sbrk_r>
 8005a24:	3001      	adds	r0, #1
 8005a26:	d101      	bne.n	8005a2c <sbrk_aligned+0x38>
 8005a28:	f04f 34ff 	mov.w	r4, #4294967295
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	bd70      	pop	{r4, r5, r6, pc}
 8005a30:	200001e4 	.word	0x200001e4

08005a34 <_malloc_r>:
 8005a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a38:	1ccd      	adds	r5, r1, #3
 8005a3a:	f025 0503 	bic.w	r5, r5, #3
 8005a3e:	3508      	adds	r5, #8
 8005a40:	2d0c      	cmp	r5, #12
 8005a42:	bf38      	it	cc
 8005a44:	250c      	movcc	r5, #12
 8005a46:	2d00      	cmp	r5, #0
 8005a48:	4607      	mov	r7, r0
 8005a4a:	db01      	blt.n	8005a50 <_malloc_r+0x1c>
 8005a4c:	42a9      	cmp	r1, r5
 8005a4e:	d905      	bls.n	8005a5c <_malloc_r+0x28>
 8005a50:	230c      	movs	r3, #12
 8005a52:	603b      	str	r3, [r7, #0]
 8005a54:	2600      	movs	r6, #0
 8005a56:	4630      	mov	r0, r6
 8005a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a5c:	4e2e      	ldr	r6, [pc, #184]	; (8005b18 <_malloc_r+0xe4>)
 8005a5e:	f000 f89d 	bl	8005b9c <__malloc_lock>
 8005a62:	6833      	ldr	r3, [r6, #0]
 8005a64:	461c      	mov	r4, r3
 8005a66:	bb34      	cbnz	r4, 8005ab6 <_malloc_r+0x82>
 8005a68:	4629      	mov	r1, r5
 8005a6a:	4638      	mov	r0, r7
 8005a6c:	f7ff ffc2 	bl	80059f4 <sbrk_aligned>
 8005a70:	1c43      	adds	r3, r0, #1
 8005a72:	4604      	mov	r4, r0
 8005a74:	d14d      	bne.n	8005b12 <_malloc_r+0xde>
 8005a76:	6834      	ldr	r4, [r6, #0]
 8005a78:	4626      	mov	r6, r4
 8005a7a:	2e00      	cmp	r6, #0
 8005a7c:	d140      	bne.n	8005b00 <_malloc_r+0xcc>
 8005a7e:	6823      	ldr	r3, [r4, #0]
 8005a80:	4631      	mov	r1, r6
 8005a82:	4638      	mov	r0, r7
 8005a84:	eb04 0803 	add.w	r8, r4, r3
 8005a88:	f000 f878 	bl	8005b7c <_sbrk_r>
 8005a8c:	4580      	cmp	r8, r0
 8005a8e:	d13a      	bne.n	8005b06 <_malloc_r+0xd2>
 8005a90:	6821      	ldr	r1, [r4, #0]
 8005a92:	3503      	adds	r5, #3
 8005a94:	1a6d      	subs	r5, r5, r1
 8005a96:	f025 0503 	bic.w	r5, r5, #3
 8005a9a:	3508      	adds	r5, #8
 8005a9c:	2d0c      	cmp	r5, #12
 8005a9e:	bf38      	it	cc
 8005aa0:	250c      	movcc	r5, #12
 8005aa2:	4629      	mov	r1, r5
 8005aa4:	4638      	mov	r0, r7
 8005aa6:	f7ff ffa5 	bl	80059f4 <sbrk_aligned>
 8005aaa:	3001      	adds	r0, #1
 8005aac:	d02b      	beq.n	8005b06 <_malloc_r+0xd2>
 8005aae:	6823      	ldr	r3, [r4, #0]
 8005ab0:	442b      	add	r3, r5
 8005ab2:	6023      	str	r3, [r4, #0]
 8005ab4:	e00e      	b.n	8005ad4 <_malloc_r+0xa0>
 8005ab6:	6822      	ldr	r2, [r4, #0]
 8005ab8:	1b52      	subs	r2, r2, r5
 8005aba:	d41e      	bmi.n	8005afa <_malloc_r+0xc6>
 8005abc:	2a0b      	cmp	r2, #11
 8005abe:	d916      	bls.n	8005aee <_malloc_r+0xba>
 8005ac0:	1961      	adds	r1, r4, r5
 8005ac2:	42a3      	cmp	r3, r4
 8005ac4:	6025      	str	r5, [r4, #0]
 8005ac6:	bf18      	it	ne
 8005ac8:	6059      	strne	r1, [r3, #4]
 8005aca:	6863      	ldr	r3, [r4, #4]
 8005acc:	bf08      	it	eq
 8005ace:	6031      	streq	r1, [r6, #0]
 8005ad0:	5162      	str	r2, [r4, r5]
 8005ad2:	604b      	str	r3, [r1, #4]
 8005ad4:	4638      	mov	r0, r7
 8005ad6:	f104 060b 	add.w	r6, r4, #11
 8005ada:	f000 f865 	bl	8005ba8 <__malloc_unlock>
 8005ade:	f026 0607 	bic.w	r6, r6, #7
 8005ae2:	1d23      	adds	r3, r4, #4
 8005ae4:	1af2      	subs	r2, r6, r3
 8005ae6:	d0b6      	beq.n	8005a56 <_malloc_r+0x22>
 8005ae8:	1b9b      	subs	r3, r3, r6
 8005aea:	50a3      	str	r3, [r4, r2]
 8005aec:	e7b3      	b.n	8005a56 <_malloc_r+0x22>
 8005aee:	6862      	ldr	r2, [r4, #4]
 8005af0:	42a3      	cmp	r3, r4
 8005af2:	bf0c      	ite	eq
 8005af4:	6032      	streq	r2, [r6, #0]
 8005af6:	605a      	strne	r2, [r3, #4]
 8005af8:	e7ec      	b.n	8005ad4 <_malloc_r+0xa0>
 8005afa:	4623      	mov	r3, r4
 8005afc:	6864      	ldr	r4, [r4, #4]
 8005afe:	e7b2      	b.n	8005a66 <_malloc_r+0x32>
 8005b00:	4634      	mov	r4, r6
 8005b02:	6876      	ldr	r6, [r6, #4]
 8005b04:	e7b9      	b.n	8005a7a <_malloc_r+0x46>
 8005b06:	230c      	movs	r3, #12
 8005b08:	603b      	str	r3, [r7, #0]
 8005b0a:	4638      	mov	r0, r7
 8005b0c:	f000 f84c 	bl	8005ba8 <__malloc_unlock>
 8005b10:	e7a1      	b.n	8005a56 <_malloc_r+0x22>
 8005b12:	6025      	str	r5, [r4, #0]
 8005b14:	e7de      	b.n	8005ad4 <_malloc_r+0xa0>
 8005b16:	bf00      	nop
 8005b18:	200001e0 	.word	0x200001e0

08005b1c <_realloc_r>:
 8005b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b20:	4680      	mov	r8, r0
 8005b22:	4614      	mov	r4, r2
 8005b24:	460e      	mov	r6, r1
 8005b26:	b921      	cbnz	r1, 8005b32 <_realloc_r+0x16>
 8005b28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b2c:	4611      	mov	r1, r2
 8005b2e:	f7ff bf81 	b.w	8005a34 <_malloc_r>
 8005b32:	b92a      	cbnz	r2, 8005b40 <_realloc_r+0x24>
 8005b34:	f7ff ff12 	bl	800595c <_free_r>
 8005b38:	4625      	mov	r5, r4
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b40:	f000 f838 	bl	8005bb4 <_malloc_usable_size_r>
 8005b44:	4284      	cmp	r4, r0
 8005b46:	4607      	mov	r7, r0
 8005b48:	d802      	bhi.n	8005b50 <_realloc_r+0x34>
 8005b4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005b4e:	d812      	bhi.n	8005b76 <_realloc_r+0x5a>
 8005b50:	4621      	mov	r1, r4
 8005b52:	4640      	mov	r0, r8
 8005b54:	f7ff ff6e 	bl	8005a34 <_malloc_r>
 8005b58:	4605      	mov	r5, r0
 8005b5a:	2800      	cmp	r0, #0
 8005b5c:	d0ed      	beq.n	8005b3a <_realloc_r+0x1e>
 8005b5e:	42bc      	cmp	r4, r7
 8005b60:	4622      	mov	r2, r4
 8005b62:	4631      	mov	r1, r6
 8005b64:	bf28      	it	cs
 8005b66:	463a      	movcs	r2, r7
 8005b68:	f7ff fed0 	bl	800590c <memcpy>
 8005b6c:	4631      	mov	r1, r6
 8005b6e:	4640      	mov	r0, r8
 8005b70:	f7ff fef4 	bl	800595c <_free_r>
 8005b74:	e7e1      	b.n	8005b3a <_realloc_r+0x1e>
 8005b76:	4635      	mov	r5, r6
 8005b78:	e7df      	b.n	8005b3a <_realloc_r+0x1e>
	...

08005b7c <_sbrk_r>:
 8005b7c:	b538      	push	{r3, r4, r5, lr}
 8005b7e:	4d06      	ldr	r5, [pc, #24]	; (8005b98 <_sbrk_r+0x1c>)
 8005b80:	2300      	movs	r3, #0
 8005b82:	4604      	mov	r4, r0
 8005b84:	4608      	mov	r0, r1
 8005b86:	602b      	str	r3, [r5, #0]
 8005b88:	f7fb feea 	bl	8001960 <_sbrk>
 8005b8c:	1c43      	adds	r3, r0, #1
 8005b8e:	d102      	bne.n	8005b96 <_sbrk_r+0x1a>
 8005b90:	682b      	ldr	r3, [r5, #0]
 8005b92:	b103      	cbz	r3, 8005b96 <_sbrk_r+0x1a>
 8005b94:	6023      	str	r3, [r4, #0]
 8005b96:	bd38      	pop	{r3, r4, r5, pc}
 8005b98:	200001e8 	.word	0x200001e8

08005b9c <__malloc_lock>:
 8005b9c:	4801      	ldr	r0, [pc, #4]	; (8005ba4 <__malloc_lock+0x8>)
 8005b9e:	f000 b811 	b.w	8005bc4 <__retarget_lock_acquire_recursive>
 8005ba2:	bf00      	nop
 8005ba4:	200001ec 	.word	0x200001ec

08005ba8 <__malloc_unlock>:
 8005ba8:	4801      	ldr	r0, [pc, #4]	; (8005bb0 <__malloc_unlock+0x8>)
 8005baa:	f000 b80c 	b.w	8005bc6 <__retarget_lock_release_recursive>
 8005bae:	bf00      	nop
 8005bb0:	200001ec 	.word	0x200001ec

08005bb4 <_malloc_usable_size_r>:
 8005bb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bb8:	1f18      	subs	r0, r3, #4
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	bfbc      	itt	lt
 8005bbe:	580b      	ldrlt	r3, [r1, r0]
 8005bc0:	18c0      	addlt	r0, r0, r3
 8005bc2:	4770      	bx	lr

08005bc4 <__retarget_lock_acquire_recursive>:
 8005bc4:	4770      	bx	lr

08005bc6 <__retarget_lock_release_recursive>:
 8005bc6:	4770      	bx	lr

08005bc8 <_init>:
 8005bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bca:	bf00      	nop
 8005bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bce:	bc08      	pop	{r3}
 8005bd0:	469e      	mov	lr, r3
 8005bd2:	4770      	bx	lr

08005bd4 <_fini>:
 8005bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd6:	bf00      	nop
 8005bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bda:	bc08      	pop	{r3}
 8005bdc:	469e      	mov	lr, r3
 8005bde:	4770      	bx	lr
